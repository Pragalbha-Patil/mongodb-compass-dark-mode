"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var TypeChecker = require('hadron-type-checker');

var Events = require('../element-events');

var _require = require('../utils'),
    fieldStringLen = _require.fieldStringLen;

var StandardEditor = require('./standard');
/**
 * CRUD editor for date values.
 */


var DateEditor = /*#__PURE__*/function (_StandardEditor) {
  _inherits(DateEditor, _StandardEditor);

  var _super = _createSuper(DateEditor);

  /**
   * Create the editor with the element.
   *
   * @param {Element} element - The hadron document element.
   */
  function DateEditor(element) {
    _classCallCheck(this, DateEditor);

    return _super.call(this, element);
  }
  /**
   * Complete the date edit by converting the valid string to a date
   * object or leaving as invalid.
   */


  _createClass(DateEditor, [{
    key: "complete",
    value: function complete() {
      if (this.element.isCurrentTypeValid()) {
        this.element.edit(TypeChecker.cast(this._formattedValue(), 'Date'));
      }
    }
    /**
     * Edit the element with the provided value.
     *
     * @param {Object} value - The new value.
     */

  }, {
    key: "edit",
    value: function edit(value) {
      try {
        var date = TypeChecker.cast(value, 'Date');

        if (date.toString() === 'Invalid Date') {
          this.element.setInvalid(value, 'Date', "".concat(value, " is not in a valid date format"));
        } else {
          this.element.currentValue = value;
          this.element.setValid();

          this.element._bubbleUp(Events.Edited, this.element);
        }
      } catch (e) {
        this.element.setInvalid(value, this.element.currentType, e.message);
      }
    }
    /**
     * Get the number of characters the value should display.
     *
     * @param {Boolean} editMode - If the element is being edited.
     *
     * @returns {Number} The number of characters.
     */

  }, {
    key: "size",
    value: function size(editMode) {
      var value = this.element.currentValue;

      if (editMode) {
        return fieldStringLen(value);
      }

      return this.element.isCurrentTypeValid() ? fieldStringLen(this._formattedValue()) : fieldStringLen(value);
    }
    /**
     * Start the date edit.
     *
     * @param {Object} value - The value in the field.
     */

  }, {
    key: "start",
    value: function start() {
      if (this.element.isCurrentTypeValid()) {
        this.edit(this._formattedValue());
      }
    }
    /**
     * Get the value being edited.
     *
     * @param {Boolean} editMode - If the UI is in edit mode.
     *
     * @returns {String} The value.
     */

  }, {
    key: "value",
    value: function value(editMode) {
      var value = this.element.currentValue;

      if (!editMode && this.element.isCurrentTypeValid()) {
        return this._formattedValue();
      }

      return value;
    }
  }, {
    key: "_formattedValue",
    value: function _formattedValue() {
      return new Date(this.element.currentValue).toISOString().replace('Z', '+00:00');
    }
  }]);

  return DateEditor;
}(StandardEditor);

module.exports = DateEditor;