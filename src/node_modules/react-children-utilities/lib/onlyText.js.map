{"version":3,"file":"onlyText.js","sourceRoot":"","sources":["../src/lib/onlyText.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,QAAQ,EAAE,cAAc,EAAE,MAAM,OAAO,CAAC;AAEjD,OAAO,WAAW,MAAM,kBAAkB,CAAC;AAE3C,MAAM,CAAC,MAAM,aAAa,GAAG,CAAC,KAA+B,EAAU,EAAE;IACvE,IAAI,OAAO,KAAK,KAAK,WAAW,IAAI,KAAK,KAAK,IAAI,IAAI,OAAO,KAAK,KAAK,SAAS,EAAE;QAChF,OAAO,EAAE,CAAC;KACX;IAED,IAAI,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,KAAK,IAAI,EAAE;QAClC,OAAO,EAAE,CAAC;KACX;IAED,OAAQ,KAAyB,CAAC,QAAQ,EAAE,CAAC;AAC/C,CAAC,CAAC;AAEF,MAAM,QAAQ,GAAG,CAAC,QAA+C,EAAU,EAAE;IAC3E,IAAI,CAAC,CAAC,QAAQ,YAAY,KAAK,CAAC,IAAI,CAAC,cAAc,CAAC,QAAQ,CAAC,EAAE;QAC7D,OAAO,aAAa,CAAC,QAAQ,CAAC,CAAC;KAChC;IAED,OAAO,QAAQ,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,MAAM,CACtC,CAAC,IAAY,EAAE,KAA8B,EAAU,EAAE;QACvD,IAAI,OAAO,GAAG,EAAE,CAAC;QAEjB,IAAI,cAAc,CAAC,KAAK,CAAC,IAAI,WAAW,CAAC,KAAK,CAAC,EAAE;YAC/C,OAAO,GAAG,QAAQ,CAAC,KAAK,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;SAC1C;aAAM,IAAI,cAAc,CAAC,KAAK,CAAC,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,EAAE;YACvD,OAAO,GAAG,EAAE,CAAC;SACd;aAAM;YACL,OAAO,GAAG,aAAa,CAAC,KAAK,CAAC,CAAC;SAChC;QAED,OAAO,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;IAC9B,CAAC,EACD,EAAE,CACH,CAAC;AACJ,CAAC,CAAC;AAEF,eAAe,QAAQ,CAAC","sourcesContent":["import type { ReactNode } from 'react';\nimport { Children, isValidElement } from 'react';\nimport type { ReadonlyDeep } from 'type-fest';\nimport hasChildren from './hasChildren.js';\n\nexport const childToString = (child?: ReadonlyDeep<ReactNode>): string => {\n  if (typeof child === 'undefined' || child === null || typeof child === 'boolean') {\n    return '';\n  }\n\n  if (JSON.stringify(child) === '{}') {\n    return '';\n  }\n\n  return (child as number | string).toString();\n};\n\nconst onlyText = (children: ReadonlyDeep<ReactNode | ReactNode[]>): string => {\n  if (!(children instanceof Array) && !isValidElement(children)) {\n    return childToString(children);\n  }\n\n  return Children.toArray(children).reduce(\n    (text: string, child: ReadonlyDeep<ReactNode>): string => {\n      let newText = '';\n\n      if (isValidElement(child) && hasChildren(child)) {\n        newText = onlyText(child.props.children);\n      } else if (isValidElement(child) && !hasChildren(child)) {\n        newText = '';\n      } else {\n        newText = childToString(child);\n      }\n\n      return text.concat(newText);\n    },\n    '',\n  );\n};\n\nexport default onlyText;\n"]}