{"version":3,"file":"deepMap.js","sourceRoot":"","sources":["../src/lib/deepMap.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,QAAQ,EAAE,YAAY,EAAE,cAAc,EAAE,MAAM,OAAO,CAAC;AAE/D,OAAO,kBAAkB,MAAM,yBAAyB,CAAC;AAEzD,MAAM,OAAO,GAAG,CACd,QAA+C,EAC/C,SAIc,EACD,EAAE,CACf,QAAQ,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,GAAG,CAC5B,CAAC,KAA8B,EAAE,KAAa,EAAE,WAAsC,EAAE,EAAE;IACxF,IAAI,cAAc,CAAC,KAAK,CAAC,IAAI,kBAAkB,CAAC,KAAK,CAAC,EAAE;QACtD,qDAAqD;QACrD,OAAO,SAAS,CACd,YAAY,CAAC,KAAK,EAAE;YAClB,GAAG,KAAK,CAAC,KAAK;YACd,QAAQ,EAAE,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,QAAQ,EAAE,SAAS,CAAC;SACnD,CAAC,CACH,CAAC;KACH;IACD,OAAO,SAAS,CAAC,KAAK,EAAE,KAAK,EAAE,WAAW,CAAC,CAAC;AAC9C,CAAC,CACF,CAAC;AAEJ,eAAe,OAAO,CAAC","sourcesContent":["import type { ReactNode } from 'react';\nimport { Children, cloneElement, isValidElement } from 'react';\nimport type { ReadonlyDeep } from 'type-fest';\nimport hasComplexChildren from './hasComplexChildren.js';\n\nconst deepMap = (\n  children: ReadonlyDeep<ReactNode | ReactNode[]>,\n  deepMapFn: (\n    child: ReadonlyDeep<ReactNode>,\n    index?: number,\n    children?: ReadonlyDeep<ReactNode[]>,\n  ) => ReactNode,\n): ReactNode[] =>\n  Children.toArray(children).map(\n    (child: ReadonlyDeep<ReactNode>, index: number, mapChildren: ReadonlyDeep<ReactNode[]>) => {\n      if (isValidElement(child) && hasComplexChildren(child)) {\n        // Clone the child that has children and map them too\n        return deepMapFn(\n          cloneElement(child, {\n            ...child.props,\n            children: deepMap(child.props.children, deepMapFn),\n          }),\n        );\n      }\n      return deepMapFn(child, index, mapChildren);\n    },\n  );\n\nexport default deepMap;\n"]}