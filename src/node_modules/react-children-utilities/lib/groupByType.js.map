{"version":3,"file":"groupByType.js","sourceRoot":"","sources":["../src/lib/groupByType.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,QAAQ,EAAE,MAAM,OAAO,CAAC;AAEjC,OAAO,cAAc,MAAM,qBAAqB,CAAC;AAEjD,kDAAkD;AAClD,MAAM,WAAW,GAAG,CAClB,QAA+C;AAC/C,kHAAkH;AAClH,QAAuE,EAAE,EACzE,IAAI,GAAG,MAAM,EACgB,EAAE;IAC/B,8EAA8E;IAC9E,MAAM,SAAS,GAAa,KAAK,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC,OAAO,IAAI,KAAK,QAAQ,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;IAE/F,OAAO,QAAQ,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,MAAM;IACtC,8EAA8E;IAC9E,CAAC,GAAgC,EAAE,KAA8B,EAAE,EAAE;QACnE,MAAM,WAAW,GAAG,cAAc,CAAC,KAAK,CAAC,CAAC;QAC1C,MAAM,GAAG,GAAG,WAAW,KAAK,IAAI,IAAI,SAAS,CAAC,QAAQ,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC,IAAI,CAAC;QAEzF,IAAI,OAAO,GAAG,CAAC,GAAG,CAAC,KAAK,WAAW,EAAE;YACnC,GAAG,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC;SACf;QAED,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,GAAG,CAAC,EAAE,KAAK,CAAC,CAAC;QAEhC,OAAO,GAAG,CAAC;IACb,CAAC,EACD,EAAE,CACH,CAAC;AACJ,CAAC,CAAC;AAEF,eAAe,WAAW,CAAC","sourcesContent":["import type { ComponentClass, FunctionComponent, ReactNode } from 'react';\nimport { Children } from 'react';\nimport type { ReadonlyDeep } from 'type-fest';\nimport getElementName from './getElementName.js';\n\n// eslint-disable-next-line max-lines-per-function\nconst groupByType = (\n  children: ReadonlyDeep<ReactNode | ReactNode[]>,\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/prefer-readonly-parameter-types\n  types: readonly (ComponentClass<any> | FunctionComponent | string)[] = [],\n  rest = 'rest',\n): Record<string, ReactNode[]> => {\n  // eslint-disable-next-line @typescript-eslint/prefer-readonly-parameter-types\n  const typeNames: string[] = types.map((type) => (typeof type === 'string' ? type : type.name));\n\n  return Children.toArray(children).reduce(\n    // eslint-disable-next-line @typescript-eslint/prefer-readonly-parameter-types\n    (acc: Record<string, ReactNode[]>, child: ReadonlyDeep<ReactNode>) => {\n      const elementName = getElementName(child);\n      const key = elementName !== null && typeNames.includes(elementName) ? elementName : rest;\n\n      if (typeof acc[key] === 'undefined') {\n        acc[key] = [];\n      }\n\n      acc[key] = [...acc[key], child];\n\n      return acc;\n    },\n    {},\n  );\n};\n\nexport default groupByType;\n"]}