{"version":3,"file":"deepFilter.js","sourceRoot":"","sources":["../src/lib/deepFilter.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,QAAQ,EAAE,YAAY,EAAE,cAAc,EAAE,MAAM,OAAO,CAAC;AAE/D,OAAO,kBAAkB,MAAM,yBAAyB,CAAC;AAEzD,MAAM,UAAU,GAAG,CACjB,QAA+C,EAC/C,YAIY,EACC,EAAE,CACf,QAAQ,CAAC,OAAO,CAAC,QAAQ,CAAC;KACvB,MAAM,CAAC,YAAY,CAAC;KACpB,GAAG,CAAC,CAAC,KAA8B,EAAE,EAAE;IACtC,IAAI,cAAc,CAAC,KAAK,CAAC,IAAI,kBAAkB,CAAC,KAAK,CAAC,EAAE;QACtD,wDAAwD;QACxD,OAAO,YAAY,CAAC,KAAK,EAAE;YACzB,GAAG,KAAK,CAAC,KAAK;YACd,QAAQ,EAAE,UAAU,CAAC,KAAK,CAAC,KAAK,CAAC,QAAQ,EAAE,YAAY,CAAC;SACzD,CAAC,CAAC;KACJ;IACD,OAAO,KAAK,CAAC;AACf,CAAC,CAAC,CAAC;AAEP,eAAe,UAAU,CAAC","sourcesContent":["import type { ReactNode } from 'react';\nimport { Children, cloneElement, isValidElement } from 'react';\nimport type { ReadonlyDeep } from 'type-fest';\nimport hasComplexChildren from './hasComplexChildren.js';\n\nconst deepFilter = (\n  children: ReadonlyDeep<ReactNode | ReactNode[]>,\n  deepFilterFn: (\n    child: ReadonlyDeep<ReactNode>,\n    index?: number,\n    children?: ReadonlyDeep<ReactNode[]>,\n  ) => boolean,\n): ReactNode[] =>\n  Children.toArray(children)\n    .filter(deepFilterFn)\n    .map((child: ReadonlyDeep<ReactNode>) => {\n      if (isValidElement(child) && hasComplexChildren(child)) {\n        // Clone the child that has children and filter them too\n        return cloneElement(child, {\n          ...child.props,\n          children: deepFilter(child.props.children, deepFilterFn),\n        });\n      }\n      return child;\n    });\n\nexport default deepFilter;\n"]}