import type { ReactNode } from 'react';
import type { ReadonlyDeep } from 'type-fest';
declare const deepMap: (children: ReadonlyDeep<ReactNode | ReactNode[]>, deepMapFn: (child: ReadonlyDeep<ReactNode>, index?: number | undefined, children?: readonly (boolean | import("react").ReactText | import("type-fest/source/readonly-deep").ReadonlyObjectDeep<import("react").ReactElement<any, string | import("react").JSXElementConstructor<any>>> | import("type-fest/source/readonly-deep").ReadonlyObjectDeep<{}> | import("type-fest/source/readonly-deep").ReadonlyObjectDeep<Iterable<ReactNode>> | import("type-fest/source/readonly-deep").ReadonlyObjectDeep<import("react").ReactPortal> | null | undefined)[] | undefined) => ReactNode) => ReactNode[];
export default deepMap;
//# sourceMappingURL=deepMap.d.ts.map