/// <reference types="react" />
import deepFilter from './lib/deepFilter.js';
import deepFind from './lib/deepFind.js';
import deepForEach from './lib/deepForEach.js';
import deepMap from './lib/deepMap.js';
import filter from './lib/filter.js';
import getElementName from './lib/getElementName.js';
import groupByType from './lib/groupByType.js';
import hasChildren from './lib/hasChildren.js';
import hasComplexChildren from './lib/hasComplexChildren.js';
import onlyText from './lib/onlyText.js';
import onlyValid from './lib/onlyValid.js';
export { deepFilter, deepFind, deepForEach, deepMap, filter, getElementName, groupByType, hasChildren, hasComplexChildren, onlyText, onlyValid, };
declare const _default: {
    deepFilter: (children: boolean | import("react").ReactText | import("type-fest/source/readonly-deep").ReadonlyObjectDeep<import("react").ReactElement<any, string | import("react").JSXElementConstructor<any>>> | import("type-fest/source/readonly-deep").ReadonlyObjectDeep<{}> | import("type-fest/source/readonly-deep").ReadonlyObjectDeep<Iterable<import("react").ReactNode>> | import("type-fest/source/readonly-deep").ReadonlyObjectDeep<import("react").ReactPortal> | readonly (boolean | import("react").ReactText | import("type-fest/source/readonly-deep").ReadonlyObjectDeep<import("react").ReactElement<any, string | import("react").JSXElementConstructor<any>>> | import("type-fest/source/readonly-deep").ReadonlyObjectDeep<{}> | import("type-fest/source/readonly-deep").ReadonlyObjectDeep<Iterable<import("react").ReactNode>> | import("type-fest/source/readonly-deep").ReadonlyObjectDeep<import("react").ReactPortal> | null | undefined)[] | null | undefined, deepFilterFn: (child: boolean | import("react").ReactText | import("type-fest/source/readonly-deep").ReadonlyObjectDeep<import("react").ReactElement<any, string | import("react").JSXElementConstructor<any>>> | import("type-fest/source/readonly-deep").ReadonlyObjectDeep<{}> | import("type-fest/source/readonly-deep").ReadonlyObjectDeep<Iterable<import("react").ReactNode>> | import("type-fest/source/readonly-deep").ReadonlyObjectDeep<import("react").ReactPortal> | null | undefined, index?: number | undefined, children?: readonly (boolean | import("react").ReactText | import("type-fest/source/readonly-deep").ReadonlyObjectDeep<import("react").ReactElement<any, string | import("react").JSXElementConstructor<any>>> | import("type-fest/source/readonly-deep").ReadonlyObjectDeep<{}> | import("type-fest/source/readonly-deep").ReadonlyObjectDeep<Iterable<import("react").ReactNode>> | import("type-fest/source/readonly-deep").ReadonlyObjectDeep<import("react").ReactPortal> | null | undefined)[] | undefined) => boolean) => import("react").ReactNode[];
    deepFind: (children: boolean | import("react").ReactText | import("type-fest/source/readonly-deep").ReadonlyObjectDeep<import("react").ReactElement<any, string | import("react").JSXElementConstructor<any>>> | import("type-fest/source/readonly-deep").ReadonlyObjectDeep<{}> | import("type-fest/source/readonly-deep").ReadonlyObjectDeep<Iterable<import("react").ReactNode>> | import("type-fest/source/readonly-deep").ReadonlyObjectDeep<import("react").ReactPortal> | readonly (boolean | import("react").ReactText | import("type-fest/source/readonly-deep").ReadonlyObjectDeep<import("react").ReactElement<any, string | import("react").JSXElementConstructor<any>>> | import("type-fest/source/readonly-deep").ReadonlyObjectDeep<{}> | import("type-fest/source/readonly-deep").ReadonlyObjectDeep<Iterable<import("react").ReactNode>> | import("type-fest/source/readonly-deep").ReadonlyObjectDeep<import("react").ReactPortal> | null | undefined)[] | null | undefined, deepFindFn: (child: boolean | import("react").ReactText | import("type-fest/source/readonly-deep").ReadonlyObjectDeep<import("react").ReactElement<any, string | import("react").JSXElementConstructor<any>>> | import("type-fest/source/readonly-deep").ReadonlyObjectDeep<{}> | import("type-fest/source/readonly-deep").ReadonlyObjectDeep<Iterable<import("react").ReactNode>> | import("type-fest/source/readonly-deep").ReadonlyObjectDeep<import("react").ReactPortal> | null | undefined, index?: number | undefined, children?: readonly (boolean | import("react").ReactText | import("type-fest/source/readonly-deep").ReadonlyObjectDeep<import("react").ReactElement<any, string | import("react").JSXElementConstructor<any>>> | import("type-fest/source/readonly-deep").ReadonlyObjectDeep<{}> | import("type-fest/source/readonly-deep").ReadonlyObjectDeep<Iterable<import("react").ReactNode>> | import("type-fest/source/readonly-deep").ReadonlyObjectDeep<import("react").ReactPortal> | null | undefined)[] | undefined) => boolean) => import("react").ReactNode;
    deepForEach: (children: boolean | import("react").ReactText | import("type-fest/source/readonly-deep").ReadonlyObjectDeep<import("react").ReactElement<any, string | import("react").JSXElementConstructor<any>>> | import("type-fest/source/readonly-deep").ReadonlyObjectDeep<{}> | import("type-fest/source/readonly-deep").ReadonlyObjectDeep<Iterable<import("react").ReactNode>> | import("type-fest/source/readonly-deep").ReadonlyObjectDeep<import("react").ReactPortal> | readonly (boolean | import("react").ReactText | import("type-fest/source/readonly-deep").ReadonlyObjectDeep<import("react").ReactElement<any, string | import("react").JSXElementConstructor<any>>> | import("type-fest/source/readonly-deep").ReadonlyObjectDeep<{}> | import("type-fest/source/readonly-deep").ReadonlyObjectDeep<Iterable<import("react").ReactNode>> | import("type-fest/source/readonly-deep").ReadonlyObjectDeep<import("react").ReactPortal> | null | undefined)[] | null | undefined, deepForEachFn: (child: boolean | import("react").ReactText | import("type-fest/source/readonly-deep").ReadonlyObjectDeep<import("react").ReactElement<any, string | import("react").JSXElementConstructor<any>>> | import("type-fest/source/readonly-deep").ReadonlyObjectDeep<{}> | import("type-fest/source/readonly-deep").ReadonlyObjectDeep<Iterable<import("react").ReactNode>> | import("type-fest/source/readonly-deep").ReadonlyObjectDeep<import("react").ReactPortal> | null | undefined, index?: number | undefined) => void) => void;
    deepMap: (children: boolean | import("react").ReactText | import("type-fest/source/readonly-deep").ReadonlyObjectDeep<import("react").ReactElement<any, string | import("react").JSXElementConstructor<any>>> | import("type-fest/source/readonly-deep").ReadonlyObjectDeep<{}> | import("type-fest/source/readonly-deep").ReadonlyObjectDeep<Iterable<import("react").ReactNode>> | import("type-fest/source/readonly-deep").ReadonlyObjectDeep<import("react").ReactPortal> | readonly (boolean | import("react").ReactText | import("type-fest/source/readonly-deep").ReadonlyObjectDeep<import("react").ReactElement<any, string | import("react").JSXElementConstructor<any>>> | import("type-fest/source/readonly-deep").ReadonlyObjectDeep<{}> | import("type-fest/source/readonly-deep").ReadonlyObjectDeep<Iterable<import("react").ReactNode>> | import("type-fest/source/readonly-deep").ReadonlyObjectDeep<import("react").ReactPortal> | null | undefined)[] | null | undefined, deepMapFn: (child: boolean | import("react").ReactText | import("type-fest/source/readonly-deep").ReadonlyObjectDeep<import("react").ReactElement<any, string | import("react").JSXElementConstructor<any>>> | import("type-fest/source/readonly-deep").ReadonlyObjectDeep<{}> | import("type-fest/source/readonly-deep").ReadonlyObjectDeep<Iterable<import("react").ReactNode>> | import("type-fest/source/readonly-deep").ReadonlyObjectDeep<import("react").ReactPortal> | null | undefined, index?: number | undefined, children?: readonly (boolean | import("react").ReactText | import("type-fest/source/readonly-deep").ReadonlyObjectDeep<import("react").ReactElement<any, string | import("react").JSXElementConstructor<any>>> | import("type-fest/source/readonly-deep").ReadonlyObjectDeep<{}> | import("type-fest/source/readonly-deep").ReadonlyObjectDeep<Iterable<import("react").ReactNode>> | import("type-fest/source/readonly-deep").ReadonlyObjectDeep<import("react").ReactPortal> | null | undefined)[] | undefined) => import("react").ReactNode) => import("react").ReactNode[];
    filter: (children: boolean | import("react").ReactText | import("type-fest/source/readonly-deep").ReadonlyObjectDeep<import("react").ReactElement<any, string | import("react").JSXElementConstructor<any>>> | import("type-fest/source/readonly-deep").ReadonlyObjectDeep<{}> | import("type-fest/source/readonly-deep").ReadonlyObjectDeep<Iterable<import("react").ReactNode>> | import("type-fest/source/readonly-deep").ReadonlyObjectDeep<import("react").ReactPortal> | readonly (boolean | import("react").ReactText | import("type-fest/source/readonly-deep").ReadonlyObjectDeep<import("react").ReactElement<any, string | import("react").JSXElementConstructor<any>>> | import("type-fest/source/readonly-deep").ReadonlyObjectDeep<{}> | import("type-fest/source/readonly-deep").ReadonlyObjectDeep<Iterable<import("react").ReactNode>> | import("type-fest/source/readonly-deep").ReadonlyObjectDeep<import("react").ReactPortal> | null | undefined)[] | null | undefined, filterFn: (child: boolean | import("react").ReactText | import("type-fest/source/readonly-deep").ReadonlyObjectDeep<import("react").ReactElement<any, string | import("react").JSXElementConstructor<any>>> | import("type-fest/source/readonly-deep").ReadonlyObjectDeep<{}> | import("type-fest/source/readonly-deep").ReadonlyObjectDeep<Iterable<import("react").ReactNode>> | import("type-fest/source/readonly-deep").ReadonlyObjectDeep<import("react").ReactPortal> | null | undefined, index?: number | undefined, children?: readonly (boolean | import("react").ReactText | import("type-fest/source/readonly-deep").ReadonlyObjectDeep<import("react").ReactElement<any, string | import("react").JSXElementConstructor<any>>> | import("type-fest/source/readonly-deep").ReadonlyObjectDeep<{}> | import("type-fest/source/readonly-deep").ReadonlyObjectDeep<Iterable<import("react").ReactNode>> | import("type-fest/source/readonly-deep").ReadonlyObjectDeep<import("react").ReactPortal> | null | undefined)[] | undefined) => boolean) => import("react").ReactNode[];
    getElementName: (element: boolean | import("react").ReactText | import("type-fest/source/readonly-deep").ReadonlyObjectDeep<import("react").ReactElement<any, string | import("react").JSXElementConstructor<any>>> | import("type-fest/source/readonly-deep").ReadonlyObjectDeep<{}> | import("type-fest/source/readonly-deep").ReadonlyObjectDeep<Iterable<import("react").ReactNode>> | import("type-fest/source/readonly-deep").ReadonlyObjectDeep<import("react").ReactPortal> | null | undefined) => string | null;
    groupByType: (children: boolean | import("react").ReactText | import("type-fest/source/readonly-deep").ReadonlyObjectDeep<import("react").ReactElement<any, string | import("react").JSXElementConstructor<any>>> | import("type-fest/source/readonly-deep").ReadonlyObjectDeep<{}> | import("type-fest/source/readonly-deep").ReadonlyObjectDeep<Iterable<import("react").ReactNode>> | import("type-fest/source/readonly-deep").ReadonlyObjectDeep<import("react").ReactPortal> | readonly (boolean | import("react").ReactText | import("type-fest/source/readonly-deep").ReadonlyObjectDeep<import("react").ReactElement<any, string | import("react").JSXElementConstructor<any>>> | import("type-fest/source/readonly-deep").ReadonlyObjectDeep<{}> | import("type-fest/source/readonly-deep").ReadonlyObjectDeep<Iterable<import("react").ReactNode>> | import("type-fest/source/readonly-deep").ReadonlyObjectDeep<import("react").ReactPortal> | null | undefined)[] | null | undefined, types?: readonly (string | import("react").ComponentClass<any, any> | import("react").FunctionComponent<{}>)[], rest?: string) => Record<string, import("react").ReactNode[]>;
    hasChildren: (element: boolean | import("react").ReactText | import("type-fest/source/readonly-deep").ReadonlyObjectDeep<import("react").ReactElement<any, string | import("react").JSXElementConstructor<any>>> | import("type-fest/source/readonly-deep").ReadonlyObjectDeep<{}> | import("type-fest/source/readonly-deep").ReadonlyObjectDeep<Iterable<import("react").ReactNode>> | import("type-fest/source/readonly-deep").ReadonlyObjectDeep<import("react").ReactPortal> | null | undefined) => element is import("react").ReactElement<{
        children: boolean | import("react").ReactText | import("type-fest/source/readonly-deep").ReadonlyObjectDeep<import("react").ReactElement<any, string | import("react").JSXElementConstructor<any>>> | import("type-fest/source/readonly-deep").ReadonlyObjectDeep<{}> | import("type-fest/source/readonly-deep").ReadonlyObjectDeep<Iterable<import("react").ReactNode>> | import("type-fest/source/readonly-deep").ReadonlyObjectDeep<import("react").ReactPortal> | readonly (boolean | import("react").ReactText | import("type-fest/source/readonly-deep").ReadonlyObjectDeep<import("react").ReactElement<any, string | import("react").JSXElementConstructor<any>>> | import("type-fest/source/readonly-deep").ReadonlyObjectDeep<{}> | import("type-fest/source/readonly-deep").ReadonlyObjectDeep<Iterable<import("react").ReactNode>> | import("type-fest/source/readonly-deep").ReadonlyObjectDeep<import("react").ReactPortal> | null | undefined)[] | null | undefined;
    }, string | import("react").JSXElementConstructor<any>>;
    hasComplexChildren: (element: boolean | import("react").ReactText | import("type-fest/source/readonly-deep").ReadonlyObjectDeep<import("react").ReactElement<any, string | import("react").JSXElementConstructor<any>>> | import("type-fest/source/readonly-deep").ReadonlyObjectDeep<{}> | import("type-fest/source/readonly-deep").ReadonlyObjectDeep<Iterable<import("react").ReactNode>> | import("type-fest/source/readonly-deep").ReadonlyObjectDeep<import("react").ReactPortal> | null | undefined) => element is import("react").ReactElement<{
        children: boolean | import("react").ReactText | import("type-fest/source/readonly-deep").ReadonlyObjectDeep<import("react").ReactElement<any, string | import("react").JSXElementConstructor<any>>> | import("type-fest/source/readonly-deep").ReadonlyObjectDeep<{}> | import("type-fest/source/readonly-deep").ReadonlyObjectDeep<Iterable<import("react").ReactNode>> | import("type-fest/source/readonly-deep").ReadonlyObjectDeep<import("react").ReactPortal> | readonly (boolean | import("react").ReactText | import("type-fest/source/readonly-deep").ReadonlyObjectDeep<import("react").ReactElement<any, string | import("react").JSXElementConstructor<any>>> | import("type-fest/source/readonly-deep").ReadonlyObjectDeep<{}> | import("type-fest/source/readonly-deep").ReadonlyObjectDeep<Iterable<import("react").ReactNode>> | import("type-fest/source/readonly-deep").ReadonlyObjectDeep<import("react").ReactPortal> | null | undefined)[] | null | undefined;
    }, string | import("react").JSXElementConstructor<any>>;
    onlyText: (children: boolean | import("react").ReactText | import("type-fest/source/readonly-deep").ReadonlyObjectDeep<import("react").ReactElement<any, string | import("react").JSXElementConstructor<any>>> | import("type-fest/source/readonly-deep").ReadonlyObjectDeep<{}> | import("type-fest/source/readonly-deep").ReadonlyObjectDeep<Iterable<import("react").ReactNode>> | import("type-fest/source/readonly-deep").ReadonlyObjectDeep<import("react").ReactPortal> | readonly (boolean | import("react").ReactText | import("type-fest/source/readonly-deep").ReadonlyObjectDeep<import("react").ReactElement<any, string | import("react").JSXElementConstructor<any>>> | import("type-fest/source/readonly-deep").ReadonlyObjectDeep<{}> | import("type-fest/source/readonly-deep").ReadonlyObjectDeep<Iterable<import("react").ReactNode>> | import("type-fest/source/readonly-deep").ReadonlyObjectDeep<import("react").ReactPortal> | null | undefined)[] | null | undefined) => string;
    onlyValid: (children: boolean | import("react").ReactText | import("type-fest/source/readonly-deep").ReadonlyObjectDeep<import("react").ReactElement<any, string | import("react").JSXElementConstructor<any>>> | import("type-fest/source/readonly-deep").ReadonlyObjectDeep<{}> | import("type-fest/source/readonly-deep").ReadonlyObjectDeep<Iterable<import("react").ReactNode>> | import("type-fest/source/readonly-deep").ReadonlyObjectDeep<import("react").ReactPortal> | readonly (boolean | import("react").ReactText | import("type-fest/source/readonly-deep").ReadonlyObjectDeep<import("react").ReactElement<any, string | import("react").JSXElementConstructor<any>>> | import("type-fest/source/readonly-deep").ReadonlyObjectDeep<{}> | import("type-fest/source/readonly-deep").ReadonlyObjectDeep<Iterable<import("react").ReactNode>> | import("type-fest/source/readonly-deep").ReadonlyObjectDeep<import("react").ReactPortal> | null | undefined)[] | null | undefined) => import("react").ReactNode[];
    map<T, C>(children: C | readonly C[], fn: (child: C, index: number) => T): C extends null | undefined ? C : Exclude<T, boolean | null | undefined>[];
    forEach<C_1>(children: C_1 | readonly C_1[], fn: (child: C_1, index: number) => void): void;
    count(children: any): number;
    only<C_2>(children: C_2): C_2 extends any[] ? never : C_2;
    toArray(children: import("react").ReactNode | import("react").ReactNode[]): (import("react").ReactChild | import("react").ReactFragment | import("react").ReactPortal)[];
};
export default _default;
//# sourceMappingURL=react-children-utilities.d.ts.map