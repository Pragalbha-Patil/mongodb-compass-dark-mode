{"version":3,"file":"react-children-utilities.min.js","sources":["lib/hasChildren.js","lib/hasComplexChildren.js","lib/deepFilter.js","lib/deepFind.js","lib/deepForEach.js","lib/deepMap.js","lib/filter.js","lib/getElementName.js","lib/groupByType.js","lib/onlyText.js","lib/onlyValid.js","react-children-utilities.js"],"sourcesContent":["import { isValidElement } from 'react';\nconst hasChildren = (element) => isValidElement(element) &&\n    Boolean(element.props.children);\nexport default hasChildren;\n//# sourceMappingURL=hasChildren.js.map","import { Children, isValidElement } from 'react';\nimport hasChildren from './hasChildren.js';\nconst hasComplexChildren = (element) => isValidElement(element) &&\n    hasChildren(element) &&\n    Children.toArray(element.props.children).reduce((response, child) => response || isValidElement(child), false);\nexport default hasComplexChildren;\n//# sourceMappingURL=hasComplexChildren.js.map","import { Children, cloneElement, isValidElement } from 'react';\nimport hasComplexChildren from './hasComplexChildren.js';\nconst deepFilter = (children, deepFilterFn) => Children.toArray(children)\n    .filter(deepFilterFn)\n    .map((child) => {\n    if (isValidElement(child) && hasComplexChildren(child)) {\n        // Clone the child that has children and filter them too\n        return cloneElement(child, {\n            ...child.props,\n            children: deepFilter(child.props.children, deepFilterFn),\n        });\n    }\n    return child;\n});\nexport default deepFilter;\n//# sourceMappingURL=deepFilter.js.map","import { Children, isValidElement } from 'react';\nimport hasComplexChildren from './hasComplexChildren.js';\nconst deepFind = (children, deepFindFn) => {\n    // eslint-disable-next-line @typescript-eslint/init-declarations\n    let found;\n    Children.toArray(children).find((child, index, findChildren) => {\n        if (deepFindFn(child, index, findChildren)) {\n            found = child;\n            return true;\n        }\n        if (isValidElement(child) && hasComplexChildren(child)) {\n            // Find inside the child that has children\n            found = deepFind(child.props.children, deepFindFn);\n            return typeof found !== 'undefined';\n        }\n        return false;\n    });\n    return found;\n};\nexport default deepFind;\n//# sourceMappingURL=deepFind.js.map","import { Children, isValidElement } from 'react';\nimport hasComplexChildren from './hasComplexChildren.js';\nconst deepForEach = (children, deepForEachFn) => {\n    Children.forEach(children, (child, index) => {\n        if (isValidElement(child) && hasComplexChildren(child)) {\n            // Each inside the child that has children\n            deepForEach(child.props.children, deepForEachFn);\n        }\n        deepForEachFn(child, index);\n    });\n};\nexport default deepForEach;\n//# sourceMappingURL=deepForEach.js.map","import { Children, cloneElement, isValidElement } from 'react';\nimport hasComplexChildren from './hasComplexChildren.js';\nconst deepMap = (children, deepMapFn) => Children.toArray(children).map((child, index, mapChildren) => {\n    if (isValidElement(child) && hasComplexChildren(child)) {\n        // Clone the child that has children and map them too\n        return deepMapFn(cloneElement(child, {\n            ...child.props,\n            children: deepMap(child.props.children, deepMapFn),\n        }));\n    }\n    return deepMapFn(child, index, mapChildren);\n});\nexport default deepMap;\n//# sourceMappingURL=deepMap.js.map","import { Children } from 'react';\nconst filter = (children, filterFn) => Children.toArray(children).filter(filterFn);\nexport default filter;\n//# sourceMappingURL=filter.js.map","import { isValidElement } from 'react';\nconst getElementName = (element) => {\n    if (!isValidElement(element)) {\n        return null;\n    }\n    return typeof element.type === 'string' ? element.type : element.type.name;\n};\nexport default getElementName;\n//# sourceMappingURL=getElementName.js.map","import { Children } from 'react';\nimport getElementName from './getElementName.js';\n// eslint-disable-next-line max-lines-per-function\nconst groupByType = (children, \n// eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/prefer-readonly-parameter-types\ntypes = [], rest = 'rest') => {\n    // eslint-disable-next-line @typescript-eslint/prefer-readonly-parameter-types\n    const typeNames = types.map((type) => (typeof type === 'string' ? type : type.name));\n    return Children.toArray(children).reduce(\n    // eslint-disable-next-line @typescript-eslint/prefer-readonly-parameter-types\n    (acc, child) => {\n        const elementName = getElementName(child);\n        const key = elementName !== null && typeNames.includes(elementName) ? elementName : rest;\n        if (typeof acc[key] === 'undefined') {\n            acc[key] = [];\n        }\n        acc[key] = [...acc[key], child];\n        return acc;\n    }, {});\n};\nexport default groupByType;\n//# sourceMappingURL=groupByType.js.map","import { Children, isValidElement } from 'react';\nimport hasChildren from './hasChildren.js';\nexport const childToString = (child) => {\n    if (typeof child === 'undefined' || child === null || typeof child === 'boolean') {\n        return '';\n    }\n    if (JSON.stringify(child) === '{}') {\n        return '';\n    }\n    return child.toString();\n};\nconst onlyText = (children) => {\n    if (!(children instanceof Array) && !isValidElement(children)) {\n        return childToString(children);\n    }\n    return Children.toArray(children).reduce((text, child) => {\n        let newText = '';\n        if (isValidElement(child) && hasChildren(child)) {\n            newText = onlyText(child.props.children);\n        }\n        else if (isValidElement(child) && !hasChildren(child)) {\n            newText = '';\n        }\n        else {\n            newText = childToString(child);\n        }\n        return text.concat(newText);\n    }, '');\n};\nexport default onlyText;\n//# sourceMappingURL=onlyText.js.map","import { isValidElement } from 'react';\nimport deepFilter from './deepFilter.js';\nconst onlyValid = (children) => deepFilter(children, (child) => isValidElement(child));\nexport default onlyValid;\n//# sourceMappingURL=onlyValid.js.map","import { Children } from 'react';\nimport deepFilter from './lib/deepFilter.js';\nimport deepFind from './lib/deepFind.js';\nimport deepForEach from './lib/deepForEach.js';\nimport deepMap from './lib/deepMap.js';\nimport filter from './lib/filter.js';\nimport getElementName from './lib/getElementName.js';\nimport groupByType from './lib/groupByType.js';\nimport hasChildren from './lib/hasChildren.js';\nimport hasComplexChildren from './lib/hasComplexChildren.js';\nimport onlyText from './lib/onlyText.js';\nimport onlyValid from './lib/onlyValid.js';\nexport { deepFilter, deepFind, deepForEach, deepMap, filter, getElementName, groupByType, hasChildren, hasComplexChildren, onlyText, onlyValid, };\nexport default {\n    ...Children,\n    deepFilter,\n    deepFind,\n    deepForEach,\n    deepMap,\n    filter,\n    getElementName,\n    groupByType,\n    hasChildren,\n    hasComplexChildren,\n    onlyText,\n    onlyValid,\n};\n//# sourceMappingURL=react-children-utilities.js.map"],"names":["hasChildren","element","isValidElement","Boolean","props","children","hasComplexChildren","Children","toArray","reduce","response","child","deepFilter","deepFilterFn","filter","map","cloneElement","deepFind","deepFindFn","found","find","index","findChildren","deepForEach","deepForEachFn","forEach","deepMap","deepMapFn","mapChildren","filterFn","getElementName","type","name","groupByType","types","rest","typeNames","acc","elementName","key","includes","childToString","JSON","stringify","toString","onlyText","Array","text","newText","concat","onlyValid"],"mappings":"uEACK,MAACA,EAAeC,GAAYC,EAAeD,IAC5CE,QAAQF,EAAQG,EAAMC,UCApBC,EAAsBL,GAAYC,EAAeD,IACnDD,EAAYC,IACZM,EAASC,QAAQP,EAAQG,EAAMC,UAAUI,QAAO,CAACC,EAAUC,IAAUD,GAAYR,EAAeS,KAAQ,GCFtGC,EAAa,CAACP,EAAUQ,IAAiBN,EAASC,QAAQH,GAC3DS,OAAOD,GACPE,KAAKJ,GACFT,EAAeS,IAAUL,EAAmBK,GAErCK,EAAaL,EAAO,IACpBA,EAAMP,EACTC,SAAUO,EAAWD,EAAMP,EAAMC,SAAUQ,KAG5CF,ICVLM,EAAW,CAACZ,EAAUa,KAExB,IAAIC,EAaJ,OAZAZ,EAASC,QAAQH,GAAUe,MAAK,CAACT,EAAOU,EAAOC,IACvCJ,EAAWP,EAAOU,EAAOC,IACzBH,EAAQR,GACD,MAEPT,EAAeS,KAAUL,EAAmBK,MAE5CQ,EAAQF,EAASN,EAAMP,EAAMC,SAAUa,QACf,IAAVC,KAIfA,GCfLI,EAAc,CAAClB,EAAUmB,KAC3BjB,EAASkB,QAAQpB,GAAU,CAACM,EAAOU,KAC3BnB,EAAeS,IAAUL,EAAmBK,IAE5CY,EAAYZ,EAAMP,EAAMC,SAAUmB,GAEtCA,EAAcb,EAAOU,OCNvBK,EAAU,CAACrB,EAAUsB,IAAcpB,EAASC,QAAQH,GAAUU,KAAI,CAACJ,EAAOU,EAAOO,IAC/E1B,EAAeS,IAAUL,EAAmBK,GAErCgB,EAAUX,EAAaL,EAAO,IAC9BA,EAAMP,EACTC,SAAUqB,EAAQf,EAAMP,EAAMC,SAAUsB,MAGzCA,EAAUhB,EAAOU,EAAOO,KCT7Bd,EAAS,CAACT,EAAUwB,IAAatB,EAASC,QAAQH,GAAUS,OAAOe,GCAnEC,EAAkB7B,GACfC,EAAeD,GAGW,iBAAjBA,EAAQ8B,KAAoB9B,EAAQ8B,KAAO9B,EAAQ8B,KAAKC,KAF3D,KCATC,EAAc,CAAC5B,EAErB6B,EAAQ,GAAIC,EAAO,UAEf,MAAMC,EAAYF,EAAMnB,KAAKgB,GAA0B,iBAATA,EAAoBA,EAAOA,EAAKC,OAC9E,OAAOzB,EAASC,QAAQH,GAAUI,QAElC,CAAC4B,EAAK1B,KACF,MAAM2B,EAAcR,EAAenB,GAC7B4B,EAAsB,OAAhBD,GAAwBF,EAAUI,SAASF,GAAeA,EAAcH,EAKpF,YAJwB,IAAbE,EAAIE,KACXF,EAAIE,GAAO,IAEfF,EAAIE,GAAO,IAAIF,EAAIE,GAAM5B,GAClB0B,IACR,KChBMI,EAAiB9B,GACtB,MAAOA,GAA4D,kBAAVA,GAG/B,OAA1B+B,KAAKC,UAAUhC,GAFR,GAKJA,EAAMiC,WAEXC,EAAYxC,GACRA,aAAoByC,OAAW5C,EAAeG,GAG7CE,EAASC,QAAQH,GAAUI,QAAO,CAACsC,EAAMpC,KAC5C,IAAIqC,EAAU,GAUd,OARIA,EADA9C,EAAeS,IAAUX,EAAYW,GAC3BkC,EAASlC,EAAMP,EAAMC,UAE1BH,EAAeS,KAAWX,EAAYW,GACjC,GAGA8B,EAAc9B,GAErBoC,EAAKE,OAAOD,KACpB,IAdQP,EAAcpC,GCXvB6C,EAAa7C,GAAaO,EAAWP,GAAWM,GAAUT,EAAeS,KCW/E,MAAe,IACRJ,EACHK,EAAAA,EACAK,EAAAA,EACAM,EAAAA,EACAG,EAAAA,EACAZ,OAAAA,EACAgB,EAAAA,EACAG,EAAAA,EACAjC,EAAAA,EACAM,EAAAA,EACAuC,EAAAA,EACAK,EAAAA"}