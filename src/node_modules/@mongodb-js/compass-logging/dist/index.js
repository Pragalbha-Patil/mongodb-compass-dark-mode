"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createLoggerAndTelemetry = void 0;
const mongodb_log_writer_1 = require("mongodb-log-writer");
const is_electron_renderer_1 = __importDefault(require("is-electron-renderer"));
const debug_1 = __importDefault(require("debug"));
function emit(ipc, event, data) {
    var _a;
    (_a = ipc === null || ipc === void 0 ? void 0 : ipc.callQuiet) === null || _a === void 0 ? void 0 : _a.call(ipc, event, data);
    if (typeof process !== 'undefined' && typeof process.emit === 'function') {
        process.emit(event, data);
    }
}
function createLoggerAndTelemetry(component) {
    const ipc = is_electron_renderer_1.default
        ? require('hadron-ipc')
        : null;
    const target = {
        write(line, callback) {
            emit(ipc, 'compass:log', { line });
            callback();
        },
        end(callback) {
            callback();
        },
    };
    const writer = new mongodb_log_writer_1.MongoLogWriter('', null, target);
    const track = (...args) => {
        void Promise.resolve()
            .then(() => trackAsync(...args))
            .catch((error) => debug('track failed', error));
    };
    const trackAsync = async (event, properties = {}) => {
        var _a, _b;
        const isTrackingEnabled = (_b = (_a = global) === null || _a === void 0 ? void 0 : _a.hadronApp) === null || _b === void 0 ? void 0 : _b.isFeatureEnabled('trackUsageStatistics');
        if (!isTrackingEnabled) {
            return;
        }
        const data = {
            event,
            properties,
        };
        if (typeof properties === 'function') {
            data.properties = await properties();
        }
        emit(ipc, 'compass:track', data);
    };
    const debug = (0, debug_1.default)(`mongodb-compass:${component.toLowerCase()}`);
    writer.on('log', ({ s, ctx, msg, attr }) => {
        if (attr) {
            debug(msg, { s, ctx, ...attr });
        }
        else {
            debug(msg, { s, ctx });
        }
    });
    return {
        log: writer.bindComponent(component),
        mongoLogId: mongodb_log_writer_1.mongoLogId,
        debug,
        track,
    };
}
exports.createLoggerAndTelemetry = createLoggerAndTelemetry;
exports.default = createLoggerAndTelemetry;
//# sourceMappingURL=index.js.map