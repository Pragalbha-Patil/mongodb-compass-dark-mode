import React from 'react';
import type { TypeCastMap, TypeCastTypes } from 'hadron-type-checker';
import type { DBRef } from 'bson';
declare type ValueProps = {
    [type in keyof TypeCastMap]: {
        type: type;
        value: TypeCastMap[type];
    };
}[keyof TypeCastMap] | {
    type: 'DBRef';
    value: DBRef;
};
declare type ValueTypes = ValueProps['type'];
declare type PropsByValueType<V extends ValueTypes> = Omit<Extract<ValueProps, {
    type: V;
}>, 'type'>;
export declare const VALUE_COLOR_BY_TYPE: Record<Extract<TypeCastTypes, 'Int32' | 'Double' | 'Decimal128' | 'Date' | 'Boolean' | 'String' | 'ObjectId'>, string>;
export declare function hasCustomColor(type: ValueTypes | string): type is keyof typeof VALUE_COLOR_BY_TYPE;
export declare const ObjectIdValue: React.FunctionComponent<PropsByValueType<'ObjectId'>>;
export declare const BinaryValue: React.FunctionComponent<PropsByValueType<'Binary'>>;
export declare const CodeValue: React.FunctionComponent<PropsByValueType<'Code'>>;
export declare const DateValue: React.FunctionComponent<PropsByValueType<'Date'>>;
export declare const NumberValue: React.FunctionComponent<PropsByValueType<'Int32' | 'Double'> & {
    type: 'Int32' | 'Double';
}>;
export declare const StringValue: React.FunctionComponent<PropsByValueType<'String'>>;
export declare const RegExpValue: React.FunctionComponent<PropsByValueType<'BSONRegExp'>>;
export declare const TimestampValue: React.FunctionComponent<PropsByValueType<'Timestamp'>>;
export declare const KeyValue: React.FunctionComponent<{
    type: 'MinKey' | 'MaxKey';
}>;
export declare const DBRefValue: React.FunctionComponent<PropsByValueType<'DBRef'>>;
export declare const SymbolValue: React.FunctionComponent<PropsByValueType<'BSONSymbol'>>;
export declare const UnknownValue: React.FunctionComponent<{
    type: string;
    value: unknown;
}>;
declare const BSONValue: React.FunctionComponent<ValueProps>;
export default BSONValue;
//# sourceMappingURL=bson-value.d.ts.map