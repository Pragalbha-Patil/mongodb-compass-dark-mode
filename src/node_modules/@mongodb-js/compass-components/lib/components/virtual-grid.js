"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.VirtualGrid = void 0;
const react_1 = __importStar(require("react"));
const emotion_1 = require("@leafygreen-ui/emotion");
const react_window_1 = require("react-window");
const use_dom_rect_1 = require("../hooks/use-dom-rect");
const use_virtual_grid_1 = require("../hooks/use-virtual-grid");
const merge_props_1 = require("../utils/merge-props");
const GridContext = (0, react_1.createContext)({
    headerHeight: 0,
    renderHeader: () => null,
    renderItem: () => null,
    renderEmptyList: () => null,
    itemsCount: 0,
    rowCount: 0,
    colCount: 0,
    currentTabbable: 0,
    gridProps: {},
});
const GridWithHeader = (0, react_1.forwardRef)(function GridHeader({ style, children, ...props }, ref) {
    const { headerHeight, renderHeader, gridProps, classNames, renderEmptyList, itemsCount, } = (0, react_1.useContext)(GridContext);
    return (react_1.default.createElement("div", { ref: ref, style: {
            ...style,
            height: style.height + headerHeight,
        }, ...props },
        react_1.default.createElement("div", { style: { height: headerHeight }, className: classNames === null || classNames === void 0 ? void 0 : classNames.header }, react_1.default.createElement(renderHeader, {})),
        react_1.default.createElement("div", { style: { height: style.height }, ...gridProps }, itemsCount === 0 && renderEmptyList
            ? react_1.default.createElement(renderEmptyList, {})
            : children)));
});
const row = (0, emotion_1.css)({
    display: 'grid',
    alignItems: 'stretch',
    gridTemplateRows: 'auto',
    gridTemplateColumns: '1fr',
    gridAutoColumns: '1fr',
    gridAutoFlow: 'column',
});
const cell = (0, emotion_1.css)({
    width: '100%',
    minWidth: 0,
});
const Row = ({ style, index }) => {
    const { colCount, itemsCount, renderItem, currentTabbable, classNames, itemKey, } = (0, react_1.useContext)(GridContext);
    const rowStart = index * colCount;
    const cells = (0, react_1.useMemo)(() => {
        return Array.from({ length: colCount }, (_, cellIdx) => {
            var _a;
            const itemIdx = rowStart + cellIdx;
            const isEmpty = itemIdx >= itemsCount;
            return isEmpty ? (react_1.default.createElement("div", { className: (0, emotion_1.cx)(cell, classNames === null || classNames === void 0 ? void 0 : classNames.cell), key: `empty${cellIdx}` })) : (react_1.default.createElement(renderItem, {
                key: (_a = itemKey === null || itemKey === void 0 ? void 0 : itemKey(itemIdx)) !== null && _a !== void 0 ? _a : itemIdx,
                role: 'gridcell',
                className: (0, emotion_1.cx)(cell, classNames === null || classNames === void 0 ? void 0 : classNames.cell),
                tabIndex: itemIdx === currentTabbable ? 0 : -1,
                ['data-vlist-item-idx']: itemIdx,
                index: itemIdx,
            }));
        });
    }, [
        colCount,
        rowStart,
        itemsCount,
        classNames === null || classNames === void 0 ? void 0 : classNames.cell,
        renderItem,
        itemKey,
        currentTabbable,
    ]);
    return (react_1.default.createElement("div", { style: style, className: (0, emotion_1.cx)(row, classNames === null || classNames === void 0 ? void 0 : classNames.row), role: "row", "aria-rowindex": index + 1 }, cells));
};
const container = (0, emotion_1.css)({
    width: '100%',
    flex: 1,
    overflow: 'hidden',
    display: 'grid',
    gridTemplateRows: 'auto 1fr',
    gridTemplateColumns: '100%',
    outline: 'none',
});
const grid = (0, emotion_1.css)({
    position: 'relative',
});
exports.VirtualGrid = (0, react_1.forwardRef)(function VirtualGrid({ itemMinWidth, itemHeight, itemsCount, colCount: _colCount, renderItem, headerHeight = 0, renderHeader = () => null, renderEmptyList, overscanCount = 3, classNames, itemKey, resetActiveItemOnBlur, ...containerProps }, ref) {
    const listRef = (0, react_1.useRef)(null);
    const [rectProps, { width: _width, height }] = (0, use_dom_rect_1.useDOMRect)();
    const width = Math.max(_width, itemMinWidth);
    const colCount = _colCount !== null && _colCount !== void 0 ? _colCount : Math.max(1, Math.floor(width / itemMinWidth));
    const rowCount = Math.ceil(itemsCount / colCount);
    const onFocusMove = (0, react_1.useCallback)((idx) => {
        var _a;
        const rowIdx = Math.floor(idx / colCount);
        (_a = listRef.current) === null || _a === void 0 ? void 0 : _a.scrollToItem(rowIdx);
    }, [listRef, colCount]);
    const [navigationProps, currentTabbable] = (0, use_virtual_grid_1.useVirtualGridArrowNavigation)({
        itemsCount,
        colCount,
        rowCount,
        onFocusMove,
        resetActiveItemOnBlur,
    });
    const gridContainerProps = (0, merge_props_1.mergeProps)({ ref, className: (0, emotion_1.cx)(container, classNames === null || classNames === void 0 ? void 0 : classNames.container) }, containerProps, rectProps);
    return (react_1.default.createElement(GridContext.Provider, { value: {
            rowCount,
            colCount,
            itemsCount,
            renderItem,
            headerHeight,
            renderHeader,
            currentTabbable,
            classNames,
            gridProps: (0, merge_props_1.mergeProps)({
                role: 'grid',
                'aria-rowcount': rowCount,
                className: (0, emotion_1.cx)(grid, classNames === null || classNames === void 0 ? void 0 : classNames.grid),
            }, navigationProps),
            itemKey,
            renderEmptyList,
        } },
        react_1.default.createElement("div", { ...gridContainerProps },
            react_1.default.createElement(react_window_1.FixedSizeList, { ref: listRef, width: width, height: height, innerElementType: GridWithHeader, itemCount: rowCount, itemSize: itemHeight, overscanCount: overscanCount }, Row))));
});
//# sourceMappingURL=virtual-grid.js.map