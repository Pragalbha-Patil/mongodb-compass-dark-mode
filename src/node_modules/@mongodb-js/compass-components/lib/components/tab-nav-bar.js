"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TabNavBar = void 0;
const react_1 = __importDefault(require("react"));
const emotion_1 = require("@leafygreen-ui/emotion");
const tokens_1 = require("@leafygreen-ui/tokens");
const palette_1 = require("@leafygreen-ui/palette");
const workspace_container_1 = require("./workspace-container");
const use_theme_1 = require("../hooks/use-theme");
const leafygreen_1 = require("./leafygreen");
const containerStyles = (0, emotion_1.css)({
    flexGrow: 1,
    flexShrink: 1,
    flexBasis: 'auto',
    display: 'flex',
    flexDirection: 'column',
    alignItems: 'stretch',
    overflow: 'auto',
});
const tabsContainerStyles = (0, emotion_1.css)({
    padding: `0 ${tokens_1.spacing[3]}px`,
});
const tabsContainerDarkStyles = (0, emotion_1.css)({
    background: palette_1.uiColors.gray.dark3,
});
const tabsContainerLightStyles = (0, emotion_1.css)({
    background: palette_1.uiColors.white,
});
const hiddenStyles = (0, emotion_1.css)({
    display: 'none',
});
function UnthemedTabNavBar({ 'data-test-id': dataTestId, 'aria-label': ariaLabel, activeTabIndex, darkMode, mountAllViews, tabs, views, onTabClicked, }) {
    return (react_1.default.createElement("div", { className: containerStyles },
        react_1.default.createElement("div", { className: (0, emotion_1.cx)(tabsContainerStyles, darkMode ? tabsContainerDarkStyles : tabsContainerLightStyles) },
            react_1.default.createElement(leafygreen_1.Tabs, { "data-test-id": dataTestId, "aria-label": ariaLabel, className: "test-tab-nav-bar-tabs", setSelected: onTabClicked, selected: activeTabIndex }, tabs.map((tab, idx) => (react_1.default.createElement(leafygreen_1.Tab, { className: "test-tab-nav-bar-tab", key: `tab-${idx}`, name: tab }))))),
        views.map((view, idx) => (mountAllViews || idx === activeTabIndex) && (react_1.default.createElement(workspace_container_1.WorkspaceContainer, { className: (0, emotion_1.cx)({
                [hiddenStyles]: idx !== activeTabIndex,
            }), key: `tab-content-${tabs[idx]}`, "data-test-id": `${tabs[idx]
                .toLowerCase()
                .replace(/ /g, '-')}-content` }, view)))));
}
const TabNavBar = (0, use_theme_1.withTheme)(UnthemedTabNavBar);
exports.TabNavBar = TabNavBar;
//# sourceMappingURL=tab-nav-bar.js.map