"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = __importStar(require("react"));
const emotion_1 = require("@leafygreen-ui/emotion");
const hadron_document_1 = require("hadron-document");
const tokens_1 = require("@leafygreen-ui/tokens");
const auto_focus_context_1 = require("./auto-focus-context");
const use_force_update_1 = require("./use-force-update");
const element_1 = require("./element");
function useHadronDocument(doc) {
    const forceUpdate = (0, use_force_update_1.useForceUpdate)();
    const onDocumentFieldsAddedOrRemoved = (0, react_1.useCallback)((_el, parentEl) => {
        if (doc === parentEl) {
            forceUpdate();
        }
    }, [doc, forceUpdate]);
    (0, react_1.useEffect)(() => {
        doc.on(hadron_document_1.ElementEvents.Added, onDocumentFieldsAddedOrRemoved);
        doc.on(hadron_document_1.ElementEvents.Removed, onDocumentFieldsAddedOrRemoved);
        return () => {
            doc.off(hadron_document_1.ElementEvents.Added, onDocumentFieldsAddedOrRemoved);
            doc.off(hadron_document_1.ElementEvents.Removed, onDocumentFieldsAddedOrRemoved);
        };
    }, [doc, onDocumentFieldsAddedOrRemoved]);
    return {
        elements: [...doc.elements],
    };
}
const hadronDocument = (0, emotion_1.css)({
    position: 'relative',
    fontFamily: tokens_1.fontFamilies.code,
    fontSize: '12px',
    lineHeight: `${tokens_1.spacing[3]}px`,
    counterReset: 'line-number',
});
const HadronDocument = ({ value: document, visibleFieldsCount, expanded, editable, onEditStart, editing, }) => {
    const { elements } = useHadronDocument(document);
    const visibleElements = (0, react_1.useMemo)(() => {
        return elements.filter(Boolean).slice(0, visibleFieldsCount);
    }, [elements, visibleFieldsCount]);
    const [autoFocus, setAutoFocus] = (0, react_1.useState)(null);
    (0, react_1.useEffect)(() => {
        if (!editing) {
            setAutoFocus(null);
        }
    }, [editing]);
    return (react_1.default.createElement("div", { className: hadronDocument, "data-testid": "hadron-document", "data-id": document.uuid },
        react_1.default.createElement(auto_focus_context_1.AutoFocusContext.Provider, { value: autoFocus }, visibleElements.map((el) => {
            return (react_1.default.createElement(element_1.HadronElement, { value: el, key: el.uuid, editable: editable, editingEnabled: editing, allExpanded: expanded, onEditStart: editable
                    ? (id, type) => {
                        setAutoFocus({ id, type });
                        onEditStart === null || onEditStart === void 0 ? void 0 : onEditStart();
                    }
                    : undefined, lineNumberSize: visibleElements.length, onAddElement: (el) => {
                    var _a;
                    setAutoFocus({
                        id: el.uuid,
                        type: ((_a = el.parent) === null || _a === void 0 ? void 0 : _a.currentType) === 'Array' ? 'value' : 'key',
                    });
                } }));
        }))));
};
exports.default = HadronDocument;
//# sourceMappingURL=document.js.map