"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = __importStar(require("react"));
const emotion_1 = require("@leafygreen-ui/emotion");
const tokens_1 = require("@leafygreen-ui/tokens");
const leafygreen_1 = require("../leafygreen");
const actionsGroupContainer = (0, emotion_1.css)({
    position: 'absolute',
    display: 'flex',
    gap: tokens_1.spacing[2],
    width: '100%',
    top: tokens_1.spacing[3],
    paddingLeft: tokens_1.spacing[3],
    paddingRight: tokens_1.spacing[3],
    pointerEvents: 'none',
});
const actionsGroupItem = (0, emotion_1.css)({
    flex: 'none',
    pointerEvents: 'all',
});
const actionsGroupItemSeparator = (0, emotion_1.css)({
    flex: '1 0 auto',
});
function useElementParentHoverState(ref) {
    const [isHovered, setIsHovered] = (0, react_1.useState)(false);
    (0, react_1.useEffect)(() => {
        var _a;
        const node = (_a = ref.current) === null || _a === void 0 ? void 0 : _a.parentElement;
        const onMouseEnter = () => {
            setIsHovered(true);
        };
        const onMouseLeave = () => {
            setIsHovered(false);
        };
        node === null || node === void 0 ? void 0 : node.addEventListener('mouseenter', onMouseEnter);
        node === null || node === void 0 ? void 0 : node.addEventListener('mouseleave', onMouseLeave);
        return () => {
            node === null || node === void 0 ? void 0 : node.removeEventListener('mouseenter', onMouseEnter);
            node === null || node === void 0 ? void 0 : node.removeEventListener('mouseleave', onMouseLeave);
        };
    }, [ref]);
    return isHovered;
}
const DocumentActionsGroup = ({ onEdit, onCopy, onClone, onRemove, onExpand, expanded, onlyShowOnHover = true, }) => {
    const conatinerRef = (0, react_1.useRef)(null);
    const isHovered = useElementParentHoverState(conatinerRef);
    const [showCopyButtonTooltip, setShowCopyButtonTooltip] = (0, react_1.useState)(false);
    (0, react_1.useEffect)(() => {
        if (showCopyButtonTooltip === true) {
            const tid = setTimeout(() => {
                setShowCopyButtonTooltip(false);
            }, 1200);
            return () => {
                clearTimeout(tid);
            };
        }
    }, [showCopyButtonTooltip]);
    return (react_1.default.createElement("div", { ref: conatinerRef, className: actionsGroupContainer, style: {
            display: onlyShowOnHover ? (isHovered ? 'flex' : 'none') : 'flex',
        } },
        onExpand && (react_1.default.createElement(leafygreen_1.Button, { size: "xsmall", rightGlyph: react_1.default.createElement(leafygreen_1.Icon, { role: "presentation", glyph: expanded ? 'CaretDown' : 'CaretRight' }), title: expanded ? 'Collapse all' : 'Expand all', "aria-label": expanded ? 'Collapse all' : 'Expand all', "aria-pressed": expanded, "data-testid": "expand-document-button", onClick: onExpand, className: actionsGroupItem })),
        react_1.default.createElement("span", { className: actionsGroupItemSeparator }),
        onEdit && (react_1.default.createElement(leafygreen_1.Button, { size: "xsmall", rightGlyph: react_1.default.createElement(leafygreen_1.Icon, { role: "presentation", glyph: "Edit" }), title: "Edit document", "aria-label": "Edit document", "data-testid": "edit-document-button", onClick: onEdit, className: actionsGroupItem })),
        onCopy && (react_1.default.createElement(leafygreen_1.Tooltip, { open: showCopyButtonTooltip, trigger: ({ children }) => {
                return (react_1.default.createElement("div", null,
                    react_1.default.createElement(leafygreen_1.Button, { size: "xsmall", rightGlyph: react_1.default.createElement(leafygreen_1.Icon, { role: "presentation", glyph: "Copy" }), title: "Copy document", "aria-label": "Copy document", "data-testid": "copy-document-button", onClick: () => {
                            setShowCopyButtonTooltip(true);
                            onCopy();
                        }, className: actionsGroupItem }),
                    children));
            }, justify: "middle", darkMode: true }, "Copied!")),
        onClone && (react_1.default.createElement(leafygreen_1.Button, { size: "xsmall", rightGlyph: react_1.default.createElement(leafygreen_1.Icon, { role: "presentation", glyph: "Clone" }), title: "Clone document", "aria-label": "Clone document", "data-testid": "clone-document-button", onClick: onClone, className: actionsGroupItem })),
        onRemove && (react_1.default.createElement(leafygreen_1.Button, { size: "xsmall", rightGlyph: react_1.default.createElement(leafygreen_1.Icon, { role: "presentation", glyph: "Trash" }), title: "Remove document", "aria-label": "Remove document", "data-testid": "remove-document-button", onClick: onRemove, className: actionsGroupItem }))));
};
exports.default = DocumentActionsGroup;
//# sourceMappingURL=document-actions-group.js.map