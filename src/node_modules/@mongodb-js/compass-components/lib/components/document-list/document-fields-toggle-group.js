"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = __importStar(require("react"));
const emotion_1 = require("@leafygreen-ui/emotion");
const tokens_1 = require("@leafygreen-ui/tokens");
const leafygreen_1 = require("../leafygreen");
const container = (0, emotion_1.css)({
    display: 'flex',
    gap: tokens_1.spacing[2],
    paddingTop: tokens_1.spacing[3],
    paddingLeft: tokens_1.spacing[3],
    paddingRight: tokens_1.spacing[3],
});
const button = (0, emotion_1.css)({
    flex: 'none',
});
const DocumentFieldsToggleGroup = ({ showHideButton = true, currentSize, totalSize, minSize = 25, step = 1000, onSizeChange, }) => {
    const showSizeDiff = (0, react_1.useMemo)(() => {
        return Math.min(totalSize - currentSize, step);
    }, [currentSize, step, totalSize]);
    const hideSizeDiff = (0, react_1.useMemo)(() => {
        return Math.max(currentSize - minSize, 0);
    }, [currentSize, minSize]);
    const isShowButtonVisible = (0, react_1.useMemo)(() => {
        return showSizeDiff > 0;
    }, [showSizeDiff]);
    const isHideButtonVisible = (0, react_1.useMemo)(() => {
        return showHideButton && hideSizeDiff > 0;
    }, [hideSizeDiff, showHideButton]);
    const onShowClick = (0, react_1.useCallback)(() => {
        onSizeChange(currentSize + showSizeDiff);
    }, [currentSize, onSizeChange, showSizeDiff]);
    const onHideClick = (0, react_1.useCallback)(() => {
        onSizeChange(currentSize - hideSizeDiff);
    }, [currentSize, hideSizeDiff, onSizeChange]);
    if (!isShowButtonVisible && !isHideButtonVisible) {
        return null;
    }
    return (react_1.default.createElement("div", { className: container },
        isShowButtonVisible && (react_1.default.createElement(leafygreen_1.Button, { size: "xsmall", leftGlyph: react_1.default.createElement(leafygreen_1.Icon, { glyph: "ArrowDown" }), onClick: onShowClick, className: button, "data-testid": "show-more-fields-button" },
            "Show ",
            showSizeDiff,
            " more fields")),
        isHideButtonVisible && (react_1.default.createElement(leafygreen_1.Button, { size: "xsmall", leftGlyph: react_1.default.createElement(leafygreen_1.Icon, { glyph: "ArrowUp" }), onClick: onHideClick, className: button, "data-testid": "hide-fields-button" },
            "Hide ",
            hideSizeDiff,
            " fields"))));
};
exports.default = DocumentFieldsToggleGroup;
//# sourceMappingURL=document-fields-toggle-group.js.map