"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AddFieldActions = exports.EditActions = void 0;
const react_1 = __importStar(require("react"));
const menu_1 = require("@leafygreen-ui/menu");
const emotion_1 = require("@leafygreen-ui/emotion");
const tokens_1 = require("@leafygreen-ui/tokens");
const font_awesome_icon_1 = require("./font-awesome-icon");
const buttonReset = (0, emotion_1.css)({
    margin: 0,
    padding: 0,
    border: 'none',
    background: 'none',
});
const EditActions = ({ editing, onRemove, onRevert }) => {
    return (react_1.default.createElement(react_1.default.Fragment, null, editing &&
        (onRevert ? (react_1.default.createElement("button", { "data-testid": "hadron-document-revert", className: buttonReset, "aria-label": "Revert changes", onClick: (evt) => {
                evt.stopPropagation();
                onRevert();
            } },
            react_1.default.createElement(font_awesome_icon_1.FontAwesomeIcon, { icon: "revert" }))) : onRemove ? (react_1.default.createElement("button", { "data-testid": "hadron-document-remove", className: buttonReset, "aria-label": "Remove field", onClick: (evt) => {
                evt.stopPropagation();
                onRemove();
            } },
            react_1.default.createElement(font_awesome_icon_1.FontAwesomeIcon, { icon: "remove" }))) : null)));
};
exports.EditActions = EditActions;
const addFieldButton = (0, emotion_1.css)({
    display: 'block',
    width: tokens_1.spacing[3],
    height: tokens_1.spacing[3],
    marginLeft: 'auto',
    boxShadow: `inset 0 0 0 1px currentColor`,
    borderRadius: '2px',
    userSelect: 'none',
});
const menu = (0, emotion_1.css)({
    width: 'auto',
});
const AddFieldActions = ({ editing, type, parentType, keyName, onAddFieldToElement, onAddFieldAfterElement, }) => {
    const [isOpen, setIsOpen] = (0, react_1.useState)(false);
    if (!editing) {
        return null;
    }
    return (react_1.default.createElement(menu_1.Menu, { open: isOpen, setOpen: setIsOpen, usePortal: false, popoverZIndex: 999999, align: "bottom", justify: "start", className: menu, trigger: ({ children, onClick, ...props }) => {
            return (react_1.default.createElement(react_1.default.Fragment, null,
                react_1.default.createElement("button", { "data-testid": "hadron-document-add-element", className: (0, emotion_1.cx)(buttonReset, addFieldButton), onClick: (evt) => {
                        evt.stopPropagation();
                        onClick === null || onClick === void 0 ? void 0 : onClick(evt);
                    }, ...props }, "+"),
                children));
        } },
        onAddFieldToElement && (react_1.default.createElement(menu_1.MenuItem, { "data-testid": "hadron-document-add-child", onClick: () => {
                setIsOpen(false);
                onAddFieldToElement();
            } },
            react_1.default.createElement(font_awesome_icon_1.FontAwesomeIcon, { icon: "addChild" }),
            "\u00A0Add",
            ' ',
            type === 'Array' ? 'item' : 'field',
            " to ",
            react_1.default.createElement("b", null, keyName))),
        react_1.default.createElement(menu_1.MenuItem, { "data-testid": "hadron-document-add-sibling", onClick: () => {
                setIsOpen(false);
                onAddFieldAfterElement();
            } },
            react_1.default.createElement(font_awesome_icon_1.FontAwesomeIcon, { icon: "addSibling" }),
            "\u00A0Add",
            ' ',
            parentType === 'Array' ? 'item' : 'field',
            " after ",
            react_1.default.createElement("b", null, keyName))));
};
exports.AddFieldActions = AddFieldActions;
//# sourceMappingURL=element-actions.js.map