"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ResizeDirection = exports.ResizeHandle = void 0;
const react_1 = __importStar(require("react"));
const emotion_1 = require("@leafygreen-ui/emotion");
var ResizeDirection;
(function (ResizeDirection) {
    ResizeDirection["TOP"] = "TOP";
    ResizeDirection["RIGHT"] = "RIGHT";
})(ResizeDirection || (ResizeDirection = {}));
exports.ResizeDirection = ResizeDirection;
const baseResizerStyles = (0, emotion_1.css)({
    position: 'absolute',
    background: 'transparent',
    padding: 0,
    transition: 'opacity 250ms ease',
    transitionDelay: '0ms',
    backgroundColor: '#019EE2',
    opacity: '0',
    outline: 'none',
    zIndex: 100,
    ':focus': {
        opacity: 1,
    },
    ':hover': {
        transitionDelay: '250ms',
        opacity: 1,
    },
    WebkitAppearance: 'none',
    '::-webkit-slider-thumb': {
        WebkitAppearance: 'none',
    },
    '::-ms-track': {
        background: 'none',
        borderColor: 'none',
        color: 'none',
    },
});
const verticalResizerStyle = (0, emotion_1.css)({
    width: '4px !important',
    right: '-2px',
    bottom: 0,
    top: 0,
    ':hover': {
        cursor: 'ew-resize',
    },
});
const horizontalResizerStyle = (0, emotion_1.css)({
    width: '100%',
    height: '4px !important',
    top: '-2px',
    right: 0,
    left: 0,
    ':hover': {
        cursor: 'ns-resize',
    },
});
function ResizeHandle({ direction, step = 10, value, minValue, maxValue, onChange, title, }) {
    const isDragging = (0, react_1.useRef)(false);
    function boundSize(attemptedSize) {
        return Math.min(maxValue, Math.max(minValue, attemptedSize));
    }
    let directionTitle = 'vertical';
    let dimensionTitle = 'Width';
    let resizerStyle = verticalResizerStyle;
    if (direction === ResizeDirection.TOP) {
        directionTitle = 'horizontal';
        dimensionTitle = 'Height';
        resizerStyle = horizontalResizerStyle;
    }
    return (react_1.default.createElement("input", { type: "range", "aria-roledescription": `${directionTitle} splitter`, "aria-label": `${dimensionTitle} of the ${title}, resize using arrow keys`, className: (0, emotion_1.cx)(baseResizerStyles, resizerStyle), min: minValue, max: maxValue, value: value, step: step, onChange: (event) => {
            if (isDragging.current) {
                return;
            }
            onChange(boundSize(Number(event.target.value)));
        }, onMouseDown: () => {
            isDragging.current = true;
        }, onMouseMove: (event) => {
            if (isDragging.current) {
                if (direction === ResizeDirection.RIGHT) {
                    onChange(boundSize(value + event.movementX));
                }
                else if (direction === ResizeDirection.TOP) {
                    onChange(boundSize(value - event.movementY));
                }
            }
        }, onMouseUp: (event) => {
            event.currentTarget.blur();
            isDragging.current = false;
            if (direction === ResizeDirection.RIGHT) {
                onChange(boundSize(value + event.movementX));
            }
            else if (direction === ResizeDirection.TOP) {
                onChange(boundSize(value - event.movementY));
            }
        } }));
}
exports.ResizeHandle = ResizeHandle;
//# sourceMappingURL=resize-handle.js.map