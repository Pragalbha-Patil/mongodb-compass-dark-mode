"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Variant = void 0;
const react_1 = __importDefault(require("react"));
const path_1 = __importDefault(require("path"));
const emotion_1 = require("@leafygreen-ui/emotion");
const palette_1 = require("@leafygreen-ui/palette");
const tokens_1 = require("@leafygreen-ui/tokens");
const use_theme_1 = require("../hooks/use-theme");
const leafygreen_1 = require("./leafygreen");
const { base: redBaseColor } = palette_1.uiColors.red;
const formItemHorizontalStyles = (0, emotion_1.css)({
    marginTop: tokens_1.spacing[2],
    marginBottom: tokens_1.spacing[2],
    marginRight: 'auto',
    marginLeft: 'auto',
    display: 'flex',
});
const formItemVerticalStyles = (0, emotion_1.css)({
    margin: '5px auto 20px',
});
const removeFileLineStyles = (0, emotion_1.css)({
    display: 'flex',
    flexDirection: 'row',
});
const removeFileButtonStyles = (0, emotion_1.css)({
    marginLeft: tokens_1.spacing[1],
});
const buttonStyles = (0, emotion_1.css)({
    width: '100%',
});
const errorMessageStyles = (0, emotion_1.css)({
    color: `${redBaseColor} !important`,
});
const labelHorizontalStyles = (0, emotion_1.css)({
    width: '90%',
    paddingRight: tokens_1.spacing[3],
});
const optionalLabelStyles = (0, emotion_1.css)({
    color: palette_1.uiColors.gray.base,
    marginTop: tokens_1.spacing[1],
    fontStyle: 'italic',
    fontWeight: 'normal',
    fontSize: 12,
});
const infoLinkStyles = (0, emotion_1.css)({
    '&:link, &:active, &:hover': {
        textDecoration: 'none',
    },
});
const labelIconStyles = (0, emotion_1.css)({
    display: 'inline-block',
    verticalAlign: 'middle',
    font: 'normal normal normal 14px/1 FontAwesome',
    fontSize: 'inherit',
    textRendering: 'auto',
    margin: '0 0 0 5px',
    cursor: 'pointer',
    color: '#bfbfbe',
    '&:link, &:active': {
        color: '#bfbfbe',
    },
    '&:link, &:active, &:hover': {
        textDecoration: 'none',
    },
    '&:hover': {
        color: '#fbb129',
    },
});
const disabledDescriptionLightStyles = (0, emotion_1.css)({
    color: palette_1.uiColors.gray.dark1,
});
const disabledDescriptionDarkStyles = (0, emotion_1.css)({
    color: palette_1.uiColors.gray.light1,
});
var Variant;
(function (Variant) {
    Variant["Horizontal"] = "HORIZONTAL";
    Variant["Vertical"] = "VERTICAL";
})(Variant = exports.Variant || (exports.Variant = {}));
function FileInput({ id, label, dataTestId, darkMode, onChange, disabled, multi = false, optional = false, optionalMessage, error = false, errorMessage, variant = Variant.Horizontal, showFileOnNewLine = false, link, description, values, }) {
    var _a, _b;
    const inputRef = react_1.default.useRef(null);
    const buttonText = react_1.default.useMemo(() => {
        if (Array.isArray(values) && values.length > 0) {
            return values.map((file) => path_1.default.basename(file)).join(', ');
        }
        return multi ? 'Select files...' : 'Select a file...';
    }, [values, multi]);
    const onFilesChanged = react_1.default.useCallback((evt) => {
        const fileList = Array.from(evt.currentTarget.files);
        const files = fileList.map((file) => {
            return file.path;
        });
        onChange(files);
    }, [onChange]);
    const renderDescription = () => {
        if (!link && !description) {
            return null;
        }
        if (!link) {
            return (react_1.default.createElement(leafygreen_1.Description, { "data-testid": 'file-input-description' }, description));
        }
        return (react_1.default.createElement(leafygreen_1.Link, { "data-testid": 'file-input-link', href: link, className: (0, emotion_1.cx)(description ? infoLinkStyles : labelIconStyles), hideExternalIcon: !description }, description !== null && description !== void 0 ? description : ''));
    };
    const applyTheme = ((_b = (_a = global === null || global === void 0 ? void 0 : global.process) === null || _a === void 0 ? void 0 : _a.env) === null || _b === void 0 ? void 0 : _b.COMPASS_LG_DARKMODE) === 'true';
    return (react_1.default.createElement("div", null,
        react_1.default.createElement("div", { className: (0, emotion_1.cx)({ [formItemHorizontalStyles]: variant === Variant.Horizontal }, { [formItemVerticalStyles]: variant === Variant.Vertical }) },
            react_1.default.createElement("div", { className: (0, emotion_1.cx)({
                    [labelHorizontalStyles]: variant === Variant.Horizontal,
                }) },
                react_1.default.createElement(leafygreen_1.Label, { htmlFor: `${id}_file_input`, disabled: disabled },
                    react_1.default.createElement("span", { className: (0, emotion_1.cx)({
                            [applyTheme && darkMode
                                ? disabledDescriptionDarkStyles
                                : disabledDescriptionLightStyles]: disabled,
                        }) }, label)),
                optional && (react_1.default.createElement("div", { className: optionalLabelStyles }, optionalMessage ? optionalMessage : 'Optional')),
                renderDescription()),
            react_1.default.createElement("input", { "data-testid": dataTestId !== null && dataTestId !== void 0 ? dataTestId : 'file-input', ref: inputRef, id: `${id}_file_input`, name: id, type: "file", multiple: multi, onChange: onFilesChanged, style: { display: 'none' }, key: values ? values.join(',') : 'empty' }),
            react_1.default.createElement(leafygreen_1.Button, { id: id, "data-testid": "file-input-button", className: buttonStyles, disabled: disabled, onClick: () => {
                    if (!disabled && inputRef.current) {
                        inputRef.current.click();
                    }
                }, title: "Select a file", leftGlyph: react_1.default.createElement(leafygreen_1.Icon, { glyph: "AddFile", title: null, fill: "currentColor" }) }, buttonText)),
        showFileOnNewLine &&
            values &&
            values.length > 0 &&
            values.map((value, index) => (react_1.default.createElement("div", { className: removeFileLineStyles, key: value },
                value,
                react_1.default.createElement(leafygreen_1.IconButton, { className: removeFileButtonStyles, "aria-label": "Remove file", onClick: () => {
                        const newValues = [...values];
                        newValues.splice(index, 1);
                        onChange(newValues);
                    } },
                    react_1.default.createElement(leafygreen_1.Icon, { glyph: "X" }))))),
        error && errorMessage && (react_1.default.createElement(leafygreen_1.Label, { "data-testid": 'file-input-error', className: errorMessageStyles, htmlFor: '' }, errorMessage))));
}
exports.default = (0, use_theme_1.withTheme)(FileInput);
//# sourceMappingURL=file-input.js.map