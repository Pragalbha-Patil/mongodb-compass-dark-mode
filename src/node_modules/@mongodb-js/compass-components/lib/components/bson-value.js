"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.UnknownValue = exports.SymbolValue = exports.DBRefValue = exports.KeyValue = exports.TimestampValue = exports.RegExpValue = exports.StringValue = exports.NumberValue = exports.DateValue = exports.CodeValue = exports.BinaryValue = exports.ObjectIdValue = exports.hasCustomColor = exports.VALUE_COLOR_BY_TYPE = void 0;
const react_1 = __importStar(require("react"));
const bson_1 = require("bson");
const emotion_1 = require("@leafygreen-ui/emotion");
function truncate(str, length = 70) {
    const truncated = str.slice(0, length);
    return length < str.length ? `${truncated}â€¦` : str;
}
exports.VALUE_COLOR_BY_TYPE = {
    Int32: '#145a32',
    Double: '#1e8449',
    Decimal128: '#229954',
    Date: 'firebrick',
    Boolean: 'purple',
    String: 'steelblue',
    ObjectId: 'orangered',
};
function hasCustomColor(type) {
    return type in exports.VALUE_COLOR_BY_TYPE;
}
exports.hasCustomColor = hasCustomColor;
const bsonValue = (0, emotion_1.css)({
    whiteSpace: 'nowrap',
    overflow: 'hidden',
    textOverflow: 'ellipsis',
});
const bsonValuePrewrap = (0, emotion_1.css)({
    whiteSpace: 'pre-wrap',
});
function getStyles(type) {
    return (0, emotion_1.cx)(bsonValue, type === 'String' && bsonValuePrewrap, hasCustomColor(type) &&
        (0, emotion_1.css)({
            color: exports.VALUE_COLOR_BY_TYPE[type],
        }), `element-value element-value-is-${type.toLowerCase()}`);
}
const nonSelectable = (0, emotion_1.css)({
    userSelect: 'none',
});
const ObjectIdValue = ({ value }) => {
    const stringifiedValue = (0, react_1.useMemo)(() => {
        return String(value);
    }, [value]);
    return (react_1.default.createElement("div", { className: getStyles('ObjectId'), title: stringifiedValue },
        react_1.default.createElement("span", { className: nonSelectable }, "ObjectId('"),
        stringifiedValue,
        react_1.default.createElement("span", { className: nonSelectable }, "')")));
};
exports.ObjectIdValue = ObjectIdValue;
const BinaryValue = ({ value }) => {
    const { stringifiedValue, title } = (0, react_1.useMemo)(() => {
        if (value.sub_type === bson_1.Binary.SUBTYPE_ENCRYPTED) {
            return {
                stringifiedValue: '*********',
                title: 'Encrypted',
            };
        }
        if (value.sub_type === bson_1.Binary.SUBTYPE_UUID) {
            return { stringifiedValue: `UUID('${value.toUUID().toHexString()}')` };
        }
        return {
            stringifiedValue: `Binary('${truncate(value.toString('base64'), 100)}', ${value.sub_type})`,
        };
    }, [value]);
    return (react_1.default.createElement("div", { className: getStyles('Binary'), title: title !== null && title !== void 0 ? title : stringifiedValue }, stringifiedValue));
};
exports.BinaryValue = BinaryValue;
const CodeValue = ({ value, }) => {
    const stringifiedValue = (0, react_1.useMemo)(() => {
        return `Code('${String(value.code)}'${value.scope ? `, ${JSON.stringify(value.scope)}` : ''})`;
    }, [value.code, value.scope]);
    return (react_1.default.createElement("div", { className: getStyles('Code'), title: stringifiedValue }, stringifiedValue));
};
exports.CodeValue = CodeValue;
const DateValue = ({ value, }) => {
    const stringifiedValue = (0, react_1.useMemo)(() => {
        try {
            return new Date(value).toISOString().replace('Z', '+00:00');
        }
        catch (_a) {
            return String(value);
        }
    }, [value]);
    return (react_1.default.createElement("div", { className: getStyles('Date'), title: stringifiedValue }, stringifiedValue));
};
exports.DateValue = DateValue;
const NumberValue = ({ type, value }) => {
    const stringifiedValue = (0, react_1.useMemo)(() => {
        return String(value.valueOf());
    }, [value]);
    return (react_1.default.createElement("div", { className: getStyles(type), title: stringifiedValue }, stringifiedValue));
};
exports.NumberValue = NumberValue;
const StringValue = ({ value }) => {
    const truncatedValue = (0, react_1.useMemo)(() => {
        return truncate(value, 70);
    }, [value]);
    return (react_1.default.createElement("div", { className: getStyles('String'), title: value },
        "\"",
        truncatedValue,
        "\""));
};
exports.StringValue = StringValue;
const RegExpValue = ({ value }) => {
    const stringifiedValue = (0, react_1.useMemo)(() => {
        return `/${value.pattern}/${value.options}`;
    }, [value.pattern, value.options]);
    return (react_1.default.createElement("div", { className: getStyles('BSONRegExp'), title: stringifiedValue }, stringifiedValue));
};
exports.RegExpValue = RegExpValue;
const TimestampValue = ({ value }) => {
    const stringifiedValue = (0, react_1.useMemo)(() => {
        return `Timestamp({ t: ${value.getHighBits()}, i: ${value.getLowBits()} })`;
    }, [value]);
    return (react_1.default.createElement("div", { className: getStyles('Timestamp'), title: stringifiedValue }, stringifiedValue));
};
exports.TimestampValue = TimestampValue;
const KeyValue = ({ type }) => {
    const stringifiedValue = (0, react_1.useMemo)(() => {
        return `${type}()`;
    }, [type]);
    return (react_1.default.createElement("div", { className: getStyles(type), title: stringifiedValue }, stringifiedValue));
};
exports.KeyValue = KeyValue;
const DBRefValue = ({ value, }) => {
    const stringifiedValue = (0, react_1.useMemo)(() => {
        return `DBRef('${value.collection}', '${String(value.oid)}'${(value === null || value === void 0 ? void 0 : value.db) ? `, '${value.db}'` : ''})`;
    }, [value.collection, value.oid, value.db]);
    return (react_1.default.createElement("div", { className: getStyles('DBRef'), title: stringifiedValue }, stringifiedValue));
};
exports.DBRefValue = DBRefValue;
const SymbolValue = ({ value }) => {
    const stringifiedValue = (0, react_1.useMemo)(() => {
        return `Symbol('${String(value)}')`;
    }, [value]);
    return (react_1.default.createElement("div", { className: getStyles('Symbol'), title: stringifiedValue }, stringifiedValue));
};
exports.SymbolValue = SymbolValue;
const UnknownValue = ({ type, value }) => {
    const stringifiedValue = (0, react_1.useMemo)(() => {
        return String(value);
    }, [value]);
    return (react_1.default.createElement("div", { className: getStyles(type), title: stringifiedValue }, stringifiedValue));
};
exports.UnknownValue = UnknownValue;
const BSONValue = (props) => {
    switch (props.type) {
        case 'ObjectId':
            return react_1.default.createElement(exports.ObjectIdValue, { value: props.value });
        case 'Date':
            return react_1.default.createElement(exports.DateValue, { value: props.value });
        case 'Binary':
            return react_1.default.createElement(exports.BinaryValue, { value: props.value });
        case 'Int32':
        case 'Double':
            return react_1.default.createElement(exports.NumberValue, { type: props.type, value: props.value });
        case 'String':
            return react_1.default.createElement(exports.StringValue, { value: props.value });
        case 'BSONRegExp':
            return react_1.default.createElement(exports.RegExpValue, { value: props.value });
        case 'Code':
            return react_1.default.createElement(exports.CodeValue, { value: props.value });
        case 'MinKey':
        case 'MaxKey':
            return react_1.default.createElement(exports.KeyValue, { type: props.type });
        case 'DBRef':
            return react_1.default.createElement(exports.DBRefValue, { value: props.value });
        case 'Timestamp':
            return react_1.default.createElement(exports.TimestampValue, { value: props.value });
        case 'BSONSymbol':
            return react_1.default.createElement(exports.SymbolValue, { value: props.value });
        case 'Object':
        case 'Array':
            return react_1.default.createElement(exports.UnknownValue, { type: props.type, value: props.type });
        default:
            return (react_1.default.createElement(exports.UnknownValue, { type: props.type, value: props.value }));
    }
};
exports.default = BSONValue;
//# sourceMappingURL=bson-value.js.map