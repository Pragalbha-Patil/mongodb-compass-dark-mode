"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = __importStar(require("react"));
const tokens_1 = require("@leafygreen-ui/tokens");
const emotion_1 = require("@leafygreen-ui/emotion");
const palette_1 = require("@leafygreen-ui/palette");
const utils_1 = require("@react-aria/utils");
const leafygreen_1 = require("./leafygreen");
const compass_font_sizes_1 = require("../compass-font-sizes");
const buttonStyles = (0, emotion_1.css)({
    fontWeight: 'bold',
    fontSize: compass_font_sizes_1.defaultFontSize,
    display: 'flex',
    alignItems: 'center',
    border: 'none',
    background: 'none',
    borderRadius: '6px',
    boxShadow: 'none',
    transition: 'box-shadow 150ms ease-in-out',
    '&:hover': {
        cursor: 'pointer',
    },
    '&:focus-visible': {
        outline: 'none',
        boxShadow: `0 0 0 3px ${palette_1.uiColors.focus}`,
    },
});
const containerStyles = (0, emotion_1.css)({
    marginTop: tokens_1.spacing[3],
    display: 'flex',
    alignItems: 'center',
});
const buttonIconStyles = (0, emotion_1.css)({
    marginRight: tokens_1.spacing[1],
});
function Accordion(props) {
    const [open, setOpen] = (0, react_1.useState)(false);
    const regionId = (0, utils_1.useId)('region-');
    const labelId = (0, utils_1.useId)('label-');
    return (react_1.default.createElement(react_1.default.Fragment, null,
        react_1.default.createElement("div", { className: containerStyles },
            react_1.default.createElement("button", { "data-testid": props['data-testid'], className: buttonStyles, id: labelId, type: "button", "aria-expanded": open ? 'true' : 'false', "aria-controls": regionId, onClick: () => {
                    setOpen((currentOpen) => !currentOpen);
                } },
                react_1.default.createElement(leafygreen_1.Icon, { className: buttonIconStyles, glyph: open ? 'ChevronDown' : 'ChevronRight' }),
                props.text)),
        open && (react_1.default.createElement("div", { role: "region", "aria-labelledby": labelId, id: regionId }, props.children))));
}
exports.default = Accordion;
//# sourceMappingURL=accordion.js.map