import React from 'react';
export declare type SortOrder = 1 | -1;
declare type SortState<T> = {
    name: T | null;
    order: SortOrder;
};
declare type SortOptions = {
    isDisabled?: boolean;
};
declare type Unwrap<T extends ArrayLike<unknown>> = T extends ArrayLike<infer V> ? V : never;
export declare function useSortControls<T extends string>(items: readonly {
    name: T;
    label: string;
}[], options?: SortOptions): [React.ReactElement, SortState<Unwrap<typeof items>['name']>];
export declare function useSortedItems<T extends Record<string, unknown>>(items: T[], { name, order, }: {
    name: keyof T | null;
    order: SortOrder;
}, sortFn?: Partial<{
    [key in keyof T]: (a: T[key], b: T[key], order: SortOrder) => number;
}> | null): T[];
export {};
//# sourceMappingURL=use-sort.d.ts.map