"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = __importDefault(require("react"));
const react_2 = require("@testing-library/react");
const user_event_1 = __importDefault(require("@testing-library/user-event"));
const chai_1 = require("chai");
const use_virtual_grid_1 = require("./use-virtual-grid");
const TestGrid = ({ rowCount = 5, colCount = 3, onFocusMove = () => {
}, defaultCurrentTabbable, }) => {
    const [arrowNavigationProps, currentTabbable] = (0, use_virtual_grid_1.useVirtualGridArrowNavigation)({
        rowCount,
        colCount,
        itemsCount: rowCount * colCount,
        defaultCurrentTabbable,
        onFocusMove,
    });
    return (react_1.default.createElement("div", { role: "grid", "aria-rowcount": rowCount, ...arrowNavigationProps }, Array.from({ length: rowCount }, (_, row) => (react_1.default.createElement("div", { key: row, role: "row", "aria-rowindex": row + 1 }, Array.from({ length: colCount }, (_, col) => {
        const idx = row * colCount + col;
        return (react_1.default.createElement("div", { role: "cell", "data-vlist-item-idx": idx, tabIndex: currentTabbable === idx ? 0 : -1 },
            row + 1,
            "-",
            col + 1));
    }))))));
};
describe('virtual grid keyboard navigation', function () {
    let originalRequestAnimationFrame;
    before(function () {
        originalRequestAnimationFrame = globalThis.requestAnimationFrame;
        globalThis.requestAnimationFrame = (fn) => fn();
    });
    after(function () {
        globalThis.requestAnimationFrame = originalRequestAnimationFrame;
    });
    afterEach(react_2.cleanup);
    it('should move focus to the first tabbable element on focus', function () {
        (0, react_2.render)(react_1.default.createElement(TestGrid, null));
        user_event_1.default.tab();
        (0, chai_1.expect)(react_2.screen.getByText('1-1')).to.eq(document.activeElement);
    });
    describe('Right Arrow', function () {
        it('should move focus one cell to the right', function () {
            (0, react_2.render)(react_1.default.createElement(TestGrid, null));
            user_event_1.default.tab();
            (0, chai_1.expect)(react_2.screen.getByText('1-1')).to.eq(document.activeElement);
            user_event_1.default.keyboard('{arrowright}');
            (0, chai_1.expect)(react_2.screen.getByText('1-2')).to.eq(document.activeElement);
        });
        it('when focus is on the right-most cell in the row, should move focus to the first cell in the following row', function () {
            (0, react_2.render)(react_1.default.createElement(TestGrid, { defaultCurrentTabbable: 2 }));
            user_event_1.default.tab();
            (0, chai_1.expect)(react_2.screen.getByText('1-3')).to.eq(document.activeElement);
            user_event_1.default.keyboard('{arrowright}');
            (0, chai_1.expect)(react_2.screen.getByText('2-1')).to.eq(document.activeElement);
        });
        it('when focus is on the last cell in the grid, focus should not move', function () {
            (0, react_2.render)(react_1.default.createElement(TestGrid, { defaultCurrentTabbable: 14 }));
            user_event_1.default.tab();
            (0, chai_1.expect)(react_2.screen.getByText('5-3')).to.eq(document.activeElement);
            user_event_1.default.keyboard('{arrowright}');
            (0, chai_1.expect)(react_2.screen.getByText('5-3')).to.eq(document.activeElement);
        });
    });
    describe('Left Arrow', function () {
        it('should move focus one cell to the left', function () {
            (0, react_2.render)(react_1.default.createElement(TestGrid, { defaultCurrentTabbable: 1 }));
            user_event_1.default.tab();
            (0, chai_1.expect)(react_2.screen.getByText('1-2')).to.eq(document.activeElement);
            user_event_1.default.keyboard('{arrowleft}');
            (0, chai_1.expect)(react_2.screen.getByText('1-1')).to.eq(document.activeElement);
        });
        it('when focus is on the left-most cell in the row, should move focus to the last cell in the previous row', function () {
            (0, react_2.render)(react_1.default.createElement(TestGrid, { defaultCurrentTabbable: 3 }));
            user_event_1.default.tab();
            (0, chai_1.expect)(react_2.screen.getByText('2-1')).to.eq(document.activeElement);
            user_event_1.default.keyboard('{arrowleft}');
            (0, chai_1.expect)(react_2.screen.getByText('1-3')).to.eq(document.activeElement);
        });
        it('when focus is on the first cell in the grid, focus should not move', function () {
            (0, react_2.render)(react_1.default.createElement(TestGrid, null));
            user_event_1.default.tab();
            (0, chai_1.expect)(react_2.screen.getByText('1-1')).to.eq(document.activeElement);
            user_event_1.default.keyboard('{arrowleft}');
            (0, chai_1.expect)(react_2.screen.getByText('1-1')).to.eq(document.activeElement);
        });
    });
    describe('Down Arrow', function () {
        it('should move focus to the next logical row', function () {
            (0, react_2.render)(react_1.default.createElement(TestGrid, null));
            user_event_1.default.tab();
            (0, chai_1.expect)(react_2.screen.getByText('1-1')).to.eq(document.activeElement);
            user_event_1.default.keyboard('{arrowdown}');
            (0, chai_1.expect)(react_2.screen.getByText('2-1')).to.eq(document.activeElement);
        });
        it('when focus is in the last logical row, focus should not move', function () {
            (0, react_2.render)(react_1.default.createElement(TestGrid, { defaultCurrentTabbable: 12 }));
            user_event_1.default.tab();
            (0, chai_1.expect)(react_2.screen.getByText('5-1')).to.eq(document.activeElement);
            user_event_1.default.keyboard('{arrowdown}');
            (0, chai_1.expect)(react_2.screen.getByText('5-1')).to.eq(document.activeElement);
        });
        it('when there is only one logical row, focus moves to the next cell', function () {
            (0, react_2.render)(react_1.default.createElement(TestGrid, { rowCount: 1 }));
            user_event_1.default.tab();
            (0, chai_1.expect)(react_2.screen.getByText('1-1')).to.eq(document.activeElement);
            user_event_1.default.keyboard('{arrowdown}');
            (0, chai_1.expect)(react_2.screen.getByText('1-2')).to.eq(document.activeElement);
        });
    });
    describe('Up Arrow', function () {
        it('should move focus to the previous logical row', function () {
            (0, react_2.render)(react_1.default.createElement(TestGrid, { defaultCurrentTabbable: 3 }));
            user_event_1.default.tab();
            (0, chai_1.expect)(react_2.screen.getByText('2-1')).to.eq(document.activeElement);
            user_event_1.default.keyboard('{arrowup}');
            (0, chai_1.expect)(react_2.screen.getByText('1-1')).to.eq(document.activeElement);
        });
        it('when focus is in the first logical row, focus should not move', function () {
            (0, react_2.render)(react_1.default.createElement(TestGrid, { defaultCurrentTabbable: 1 }));
            user_event_1.default.tab();
            (0, chai_1.expect)(react_2.screen.getByText('1-2')).to.eq(document.activeElement);
            user_event_1.default.keyboard('{arrowup}');
            (0, chai_1.expect)(react_2.screen.getByText('1-2')).to.eq(document.activeElement);
        });
        it('when there is only one logical row, should move focus to the previous cell', function () {
            (0, react_2.render)(react_1.default.createElement(TestGrid, { rowCount: 1, defaultCurrentTabbable: 1 }));
            user_event_1.default.tab();
            (0, chai_1.expect)(react_2.screen.getByText('1-2')).to.eq(document.activeElement);
            user_event_1.default.keyboard('{arrowup}');
            (0, chai_1.expect)(react_2.screen.getByText('1-1')).to.eq(document.activeElement);
        });
    });
    describe('Page Down', function () {
        it('should move focus 3 rows down', function () {
            (0, react_2.render)(react_1.default.createElement(TestGrid, null));
            user_event_1.default.tab();
            (0, chai_1.expect)(react_2.screen.getByText('1-1')).to.eq(document.activeElement);
            user_event_1.default.keyboard('{pagedown}');
            (0, chai_1.expect)(react_2.screen.getByText('4-1')).to.eq(document.activeElement);
        });
        it('when focus is in the last row, focus should not move', function () {
            (0, react_2.render)(react_1.default.createElement(TestGrid, { defaultCurrentTabbable: 12 }));
            user_event_1.default.tab();
            (0, chai_1.expect)(react_2.screen.getByText('5-1')).to.eq(document.activeElement);
            user_event_1.default.keyboard('{pagedown}');
            (0, chai_1.expect)(react_2.screen.getByText('5-1')).to.eq(document.activeElement);
        });
    });
    describe('Page Up', function () {
        it('should move focus 3 rows up', function () {
            (0, react_2.render)(react_1.default.createElement(TestGrid, { defaultCurrentTabbable: 9 }));
            user_event_1.default.tab();
            (0, chai_1.expect)(react_2.screen.getByText('4-1')).to.eq(document.activeElement);
            user_event_1.default.keyboard('{pageup}');
            (0, chai_1.expect)(react_2.screen.getByText('1-1')).to.eq(document.activeElement);
        });
        it('when focus is in the first row, focus should not move', function () {
            (0, react_2.render)(react_1.default.createElement(TestGrid, null));
            user_event_1.default.tab();
            (0, chai_1.expect)(react_2.screen.getByText('1-1')).to.eq(document.activeElement);
            user_event_1.default.keyboard('{pageup}');
            (0, chai_1.expect)(react_2.screen.getByText('1-1')).to.eq(document.activeElement);
        });
    });
    describe('Home', function () {
        it('should move focus to the first cell in the row that contains focus', function () {
            (0, react_2.render)(react_1.default.createElement(TestGrid, { defaultCurrentTabbable: 4 }));
            user_event_1.default.tab();
            (0, chai_1.expect)(react_2.screen.getByText('2-2')).to.eq(document.activeElement);
            user_event_1.default.keyboard('{home}');
            (0, chai_1.expect)(react_2.screen.getByText('2-1')).to.eq(document.activeElement);
        });
    });
    describe('End', function () {
        it('should move focus to the last cell in the row that contains focus', function () {
            (0, react_2.render)(react_1.default.createElement(TestGrid, { defaultCurrentTabbable: 4 }));
            user_event_1.default.tab();
            (0, chai_1.expect)(react_2.screen.getByText('2-2')).to.eq(document.activeElement);
            user_event_1.default.keyboard('{end}');
            (0, chai_1.expect)(react_2.screen.getByText('2-3')).to.eq(document.activeElement);
        });
    });
    describe('Control + Home', function () {
        it('should move focus to the first cell in the first row', function () {
            (0, react_2.render)(react_1.default.createElement(TestGrid, { defaultCurrentTabbable: 4 }));
            user_event_1.default.tab();
            (0, chai_1.expect)(react_2.screen.getByText('2-2')).to.eq(document.activeElement);
            user_event_1.default.keyboard('{ctrl}{home}{/ctrl}');
            (0, chai_1.expect)(react_2.screen.getByText('1-1')).to.eq(document.activeElement);
        });
    });
    describe('Control + End', function () {
        it('should move focus to the last cell in the last row', function () {
            (0, react_2.render)(react_1.default.createElement(TestGrid, { defaultCurrentTabbable: 4 }));
            user_event_1.default.tab();
            (0, chai_1.expect)(react_2.screen.getByText('2-2')).to.eq(document.activeElement);
            user_event_1.default.keyboard('{ctrl}{end}{/ctrl}');
            (0, chai_1.expect)(react_2.screen.getByText('5-3')).to.eq(document.activeElement);
        });
    });
    it('should keep focus on the element that was interacted with', function () {
        (0, react_2.render)(react_1.default.createElement(TestGrid, null));
        (0, chai_1.expect)(document.body).to.eq(document.activeElement);
        user_event_1.default.click(react_2.screen.getByText('2-3'));
        (0, chai_1.expect)(react_2.screen.getByText('2-3')).to.eq(document.activeElement);
    });
});
//# sourceMappingURL=use-virtual-grid.test.js.map