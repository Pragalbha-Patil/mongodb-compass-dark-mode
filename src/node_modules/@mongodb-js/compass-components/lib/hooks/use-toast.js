"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.useToast = exports.ToastArea = void 0;
const react_1 = __importStar(require("react"));
const __1 = require("..");
const __2 = require("..");
const ToastContext = (0, react_1.createContext)({
    openToast: () => {
    },
    closeToast: () => {
    },
});
const toastStyles = (0, __1.css)({
    button: {
        position: 'absolute',
    },
});
const ToastArea = ({ children }) => {
    const [toasts, setToasts] = (0, react_1.useState)({});
    const timeouts = (0, react_1.useRef)({});
    (0, react_1.useEffect)(() => {
        return () => {
            Object.values(timeouts).forEach(clearTimeout);
        };
    }, [timeouts]);
    const clearTimeoutRef = (0, react_1.useCallback)((id) => {
        clearTimeout(timeouts.current[id]);
        delete timeouts.current[id];
    }, [timeouts]);
    const setTimeoutRef = (0, react_1.useCallback)((id, callback, timeout) => {
        clearTimeoutRef(id);
        timeouts.current[id] = setTimeout(callback, timeout);
    }, [timeouts, clearTimeoutRef]);
    const closeToast = (0, react_1.useCallback)((toastId) => {
        clearTimeoutRef(toastId);
        setToasts((prevToasts) => {
            const newToasts = { ...prevToasts };
            delete newToasts[toastId];
            return newToasts;
        });
    }, [setToasts, clearTimeoutRef]);
    const openToast = (0, react_1.useCallback)((toastId, toastProperties) => {
        clearTimeoutRef(toastId);
        if (toastProperties.timeout) {
            setTimeoutRef(toastId, () => {
                closeToast(toastId);
            }, toastProperties.timeout);
        }
        setToasts((prevToasts) => ({
            ...prevToasts,
            [toastId]: {
                ...toastProperties,
            },
        }));
    }, [setToasts, setTimeoutRef, clearTimeoutRef, closeToast]);
    return (react_1.default.createElement(ToastContext.Provider, { value: { closeToast, openToast } },
        react_1.default.createElement(react_1.default.Fragment, null, children),
        react_1.default.createElement(react_1.default.Fragment, null, Object.entries(toasts).map(([id, { title, body, variant, progress }]) => (react_1.default.createElement(__2.Toast, { className: toastStyles, key: id, title: title, body: body, variant: variant, progress: progress, open: true, close: () => closeToast(id) }))))));
};
exports.ToastArea = ToastArea;
function useToast(namespace) {
    const { openToast: openGlobalToast, closeToast: closeGlobalToast } = (0, react_1.useContext)(ToastContext);
    const openToast = (0, react_1.useCallback)((toastId, toastProperties) => {
        openGlobalToast(`${namespace}--${toastId}`, toastProperties);
    }, [namespace, openGlobalToast]);
    const closeToast = (0, react_1.useCallback)((toastId) => {
        closeGlobalToast(`${namespace}--${toastId}`);
    }, [namespace, closeGlobalToast]);
    return {
        openToast,
        closeToast,
    };
}
exports.useToast = useToast;
//# sourceMappingURL=use-toast.js.map