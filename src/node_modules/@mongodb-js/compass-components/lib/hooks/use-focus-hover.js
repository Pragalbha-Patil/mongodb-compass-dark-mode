"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.useHoverState = exports.useFocusState = exports.FocusState = void 0;
const interactions_1 = require("@react-aria/interactions");
const utils_1 = require("@react-aria/utils");
const react_1 = require("react");
var FocusState;
(function (FocusState) {
    FocusState["NoFocus"] = "NoFocus";
    FocusState["FocusVisible"] = "FocusVisible";
    FocusState["Focus"] = "Focus";
    FocusState["FocusWithinVisible"] = "FocusWithinVisible";
    FocusState["FocusWithin"] = "FocusWithin";
})(FocusState = exports.FocusState || (exports.FocusState = {}));
function getFocusState(isFocused, isFocusWithin, isFocusVisible) {
    return isFocused && isFocusVisible
        ? FocusState.FocusVisible
        : isFocused
            ? FocusState.Focus
            : isFocusWithin && isFocusVisible
                ? FocusState.FocusWithinVisible
                : isFocusWithin
                    ? FocusState.FocusWithin
                    : FocusState.NoFocus;
}
function useFocusState() {
    const focusStateRef = (0, react_1.useRef)(FocusState.NoFocus);
    const [isFocused, setIsFocused] = (0, react_1.useState)(false);
    const [isFocusWithin, setIsFocusWithin] = (0, react_1.useState)(false);
    const { isFocusVisible } = (0, interactions_1.useFocusVisible)();
    const { focusWithinProps } = (0, interactions_1.useFocusWithin)({
        onFocusWithinChange: setIsFocusWithin,
    });
    const { focusProps } = (0, interactions_1.useFocus)({
        onFocusChange: setIsFocused,
    });
    const mergedProps = (0, react_1.useMemo)(() => {
        return (0, utils_1.mergeProps)(focusProps, focusWithinProps);
    }, [focusProps, focusWithinProps]);
    focusStateRef.current = getFocusState(isFocused, isFocusWithin, isFocusVisible);
    return [mergedProps, focusStateRef.current, focusStateRef];
}
exports.useFocusState = useFocusState;
function useHoverState() {
    const [isHovered, setIsHovered] = (0, react_1.useState)(false);
    const hoverProps = {
        onMouseEnter() {
            setIsHovered(true);
        },
        onMouseLeave() {
            setIsHovered(false);
        },
    };
    return [hoverProps, isHovered];
}
exports.useHoverState = useHoverState;
//# sourceMappingURL=use-focus-hover.js.map