{"version":3,"file":"index.js","sources":["../../src/ConfirmationModal.tsx"],"sourcesContent":["import React, { useMemo, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { css, cx } from '@leafygreen-ui/emotion';\nimport Button, { Variant as ButtonVariant } from '@leafygreen-ui/button';\nimport Modal, { Footer } from '@leafygreen-ui/modal';\nimport { uiColors } from '@leafygreen-ui/palette';\nimport TextInput from '@leafygreen-ui/text-input';\n\nconst Mode = {\n  Dark: 'dark',\n  Light: 'light',\n};\n\ntype Mode = typeof Mode[keyof typeof Mode];\n\nexport const Variant = {\n  Default: ButtonVariant.Primary,\n  Danger: ButtonVariant.Danger,\n} as const;\n\nexport type Variant = typeof Variant[keyof typeof Variant];\n\nconst titleStyle = css`\n  font-size: 24px;\n  font-weight: bold;\n  line-height: 25px;\n  margin-bottom: 10px;\n`;\n\nconst titleColors = {\n  [Mode.Light]: css`\n    color: ${uiColors.gray.dark2};\n  `,\n  [Mode.Dark]: css`\n    color: ${uiColors.gray.light2};\n  `,\n};\n\nconst baseModalStyle = css`\n  width: 600px;\n  padding: initial;\n`;\n\nconst contentStyle = css`\n  font-family: Akzidenz, ‘Helvetica Neue’, Helvetica, Arial, sans-serif;\n  font-size: 14px;\n  line-height: 20px;\n  letter-spacing: 0;\n  padding: 36px;\n`;\n\nconst contentColors = {\n  [Mode.Light]: css`\n    color: ${uiColors.gray.dark1};\n  `,\n  [Mode.Dark]: css`\n    color: ${uiColors.white};\n  `,\n};\n\nconst textEntryInputStyle = css`\n  width: 300px;\n  margin-top: 14px;\n`;\n\nconst buttonStyle = css`\n  margin: 0 2px;\n\n  &:first-of-type {\n    margin: 0 0 0 4px;\n  }\n\n  &:last-of-type {\n    margin: 0 4px 0 0;\n  }\n`;\n\ninterface ConfirmationModalProps {\n  title: string;\n  children: React.ReactNode;\n  open?: boolean;\n  onConfirm?: () => void;\n  onCancel?: () => void;\n  className?: string;\n  buttonText: string;\n  variant?: Variant;\n  requiredInputText?: string;\n  submitDisabled?: boolean;\n  darkMode?: boolean;\n}\n\nconst ConfirmationModal = ({\n  children,\n  title,\n  requiredInputText,\n  buttonText,\n  submitDisabled = false,\n  variant = Variant.Default,\n  onConfirm,\n  onCancel,\n  darkMode,\n  ...modalProps\n}: ConfirmationModalProps) => {\n  const [confirmEnabled, setConfirmEnabled] = useState(!requiredInputText);\n  const mode = darkMode ? Mode.Dark : Mode.Light;\n\n  const textEntryConfirmation = useMemo(() => {\n    setConfirmEnabled(!requiredInputText);\n\n    let textEntryConfirmation = null;\n\n    if (requiredInputText) {\n      const onInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        setConfirmEnabled(event.target.value === requiredInputText);\n      };\n      textEntryConfirmation = (\n        <TextInput\n          label={`Type \"${requiredInputText}\" to confirm your action`}\n          className={textEntryInputStyle}\n          onChange={onInputChange}\n          // eslint-disable-next-line jsx-a11y/no-autofocus\n          autoFocus\n          darkMode={darkMode}\n        ></TextInput>\n      );\n    }\n\n    return textEntryConfirmation;\n  }, [requiredInputText, darkMode]);\n\n  return (\n    <Modal\n      {...modalProps}\n      contentClassName={baseModalStyle}\n      setOpen={onCancel}\n      darkMode={darkMode}\n    >\n      <div className={cx(contentStyle, contentColors[mode])}>\n        <h1 className={cx(titleStyle, titleColors[mode])}>{title}</h1>\n        {children}\n        {textEntryConfirmation}\n      </div>\n      <Footer darkMode={darkMode}>\n        <Button\n          variant={variant}\n          disabled={!confirmEnabled || submitDisabled}\n          onClick={onConfirm}\n          className={buttonStyle}\n          darkMode={darkMode}\n        >\n          {buttonText}\n        </Button>\n        <Button onClick={onCancel} className={buttonStyle} darkMode={darkMode}>\n          Cancel\n        </Button>\n      </Footer>\n    </Modal>\n  );\n};\n\nConfirmationModal.displayName = 'ConfirmationModal';\n\nConfirmationModal.propTypes = {\n  title: PropTypes.string.isRequired,\n  open: PropTypes.bool,\n  onConfirm: PropTypes.func,\n  onCancel: PropTypes.func,\n  children: PropTypes.node,\n  className: PropTypes.string,\n  buttonText: PropTypes.string,\n  variant: PropTypes.oneOf(Object.values(Variant)),\n  requiredInputText: PropTypes.string,\n};\n\nexport default ConfirmationModal;\n"],"names":["_templateObject","_templateObject2","_templateObject3","_titleColors","_templateObject4","_templateObject5","_templateObject6","_templateObject7","_contentColors","_templateObject8","_templateObject9","_excluded","Mode","Variant","Default","ButtonVariant","Primary","Danger","titleStyle","css","_taggedTemplateLiteral","titleColors","_defineProperty","uiColors","gray","dark2","light2","baseModalStyle","contentStyle","contentColors","dark1","white","textEntryInputStyle","buttonStyle","ConfirmationModal","_ref","children","title","requiredInputText","buttonText","_ref$submitDisabled","submitDisabled","_ref$variant","variant","onConfirm","onCancel","darkMode","modalProps","_objectWithoutProperties","_useState2","_slicedToArray","useState","confirmEnabled","setConfirmEnabled","mode","textEntryConfirmation","useMemo","___EmotionJSX","TextInput","label","concat","className","onChange","event","target","value","autoFocus","Modal","_extends","contentClassName","setOpen","cx","Footer","Button","disabled","onClick","displayName","propTypes","PropTypes","string","isRequired","open","bool","func","node","oneOf","Object","values"],"mappings":"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"}