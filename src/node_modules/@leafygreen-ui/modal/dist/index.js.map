{"version":3,"file":"index.js","sources":["../src/Footer.tsx","../../../node_modules/facepaint/dist/index.es.js","../src/Modal.tsx"],"sourcesContent":["import React from 'react';\nimport { css, cx } from '@leafygreen-ui/emotion';\nimport { uiColors } from '@leafygreen-ui/palette';\n\nconst footerStyle = css`\n  position: relative;\n  bottom: 0;\n  left: 0;\n  width: 100%;\n  display: flex;\n  justify-content: right;\n  flex-direction: row-reverse;\n  padding: 16px 24px;\n  border-top: 1px solid ${uiColors.gray.light2};\n`;\n\ninterface FooterProps {\n  children: React.ReactNode;\n  className?: string;\n  darkMode?: boolean;\n}\n\nconst Footer = ({ children, className, darkMode }: FooterProps) => {\n  return (\n    <div\n      className={cx(\n        footerStyle,\n        css`\n          border-top: 1px solid\n            ${!darkMode ? uiColors.gray.light2 : uiColors.gray.dark2};\n        `,\n        className,\n      )}\n    >\n      {children}\n    </div>\n  );\n};\n\nFooter.displayName = 'Footer';\n\nexport default Footer;\n","/* eslint-disable no-param-reassign */\nvar index = function (breakpoints) {\n  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n      literal = _ref.literal,\n      overlap = _ref.overlap;\n\n  var mq = literal ? breakpoints : ['&'].concat(breakpoints);\n\n  function flatten(obj) {\n    if (typeof obj !== 'object' || obj == null) {\n      return [];\n    }\n\n    if (Array.isArray(obj)) {\n      return obj.map(flatten);\n    }\n\n    var slots = {};\n    var objects = {};\n    var props = {};\n    Object.keys(obj).forEach(function (key) {\n      // Check if value is an array, but skip if it looks like a selector.\n      // key.indexOf('&') === 0\n\n      var item = obj[key];\n      if (!Array.isArray(item) && literal) item = [item];\n\n      if ((literal || Array.isArray(item)) && key.charCodeAt(0) !== 38) {\n        var prior = void 0;\n        item.forEach(function (v, index) {\n          // Optimize by removing duplicated media query entries\n          // when they are explicitly known to overlap.\n          if (overlap && prior === v) {\n            return;\n          }\n\n          if (v == null) {\n            // Do not create entries for undefined values as this will\n            // generate empty media media quries\n            return;\n          }\n\n          prior = v;\n\n          if (index === 0 && !literal) {\n            props[key] = v;\n          } else if (slots[mq[index]] === undefined) {\n            var _slots$mq$index;\n\n            slots[mq[index]] = (_slots$mq$index = {}, _slots$mq$index[key] = v, _slots$mq$index);\n          } else {\n            slots[mq[index]][key] = v;\n          }\n        });\n      } else if (typeof item === 'object') {\n        objects[key] = flatten(item);\n      } else {\n        props[key] = item;\n      }\n    });\n\n    // Ensure that all slots and then child objects are pushed to the end\n    mq.forEach(function (el) {\n      if (slots[el]) {\n        props[el] = slots[el];\n      }\n    });\n    Object.assign(props, objects);\n    return props;\n  }\n\n  return function () {\n    for (var _len = arguments.length, values = Array(_len), _key = 0; _key < _len; _key++) {\n      values[_key] = arguments[_key];\n    }\n\n    return values.map(flatten);\n  };\n};\n\nexport default index;\n//# sourceMappingURL=index.es.js.map\n","import React, { SetStateAction, useCallback } from 'react';\nimport PropTypes from 'prop-types';\nimport FocusTrap from 'focus-trap-react';\nimport { Transition } from 'react-transition-group';\nimport { transparentize } from 'polished';\nimport facepaint from 'facepaint';\nimport Portal from '@leafygreen-ui/portal';\nimport XIcon from '@leafygreen-ui/icon/dist/X';\nimport IconButton from '@leafygreen-ui/icon-button';\nimport { useEscapeKey, useIdAllocator } from '@leafygreen-ui/hooks';\nimport { uiColors } from '@leafygreen-ui/palette';\nimport { css, cx } from '@leafygreen-ui/emotion';\n\nconst Mode = {\n  Dark: 'dark',\n  Light: 'light',\n};\n\ntype Mode = typeof Mode[keyof typeof Mode];\n\nexport const ModalSize = {\n  Small: 'small',\n  Default: 'default',\n  Large: 'large',\n} as const;\n\nexport type ModalSize = typeof ModalSize[keyof typeof ModalSize];\n\n// breakpoints for different screen sizes\nconst small = '767px'; // mobile screens, from 0px - 767px\nconst medium = '768px'; // tablet screens, from 768px - 1024px\nconst large = '1025px'; // laptops/desktop screens, from 1025px and above\n\nexport const mq = facepaint([\n  `@media only screen and (max-width: ${small})`,\n  `@media only screen and (min-width: ${medium})`,\n  `@media only screen and (min-width: ${large})`,\n]);\n\nconst defaultHorizontalSpacing = 18;\nconst defaultVerticalSpacing = 64;\n\nconst backdrop = css`\n  background-color: ${transparentize(0.4, uiColors.black)};\n  overflow-y: auto;\n  position: fixed;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  opacity: 0;\n  transition: opacity 150ms ease-in-out;\n`;\n\nconst visibleBackdrop = css`\n  opacity: 1;\n`;\n\nconst scrollContainer = css`\n  position: absolute;\n  min-height: 100%;\n  width: 100%;\n  padding: ${defaultVerticalSpacing}px ${defaultHorizontalSpacing}px;\n  overflow-y: auto;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n`;\n\nconst modalContentStyle = css`\n  transition: all 150ms ease-in-out;\n  margin: auto;\n  max-height: calc(100% - ${defaultVerticalSpacing}px);\n  padding: 32px;\n  border-radius: 7px;\n  box-shadow: 0 5px 15px ${transparentize(0.4, uiColors.black)};\n  position: relative;\n  pointer-events: all;\n  transform: translate3d(0, -16px, 0);\n  opacity: 0;\n\n  &:focus {\n    outline: none;\n  }\n`;\n\nconst modeStyles: Record<Mode, string> = {\n  [Mode.Light]: css`\n    color: ${uiColors.gray.dark3};\n    background-color: ${uiColors.white};\n  `,\n  [Mode.Dark]: css`\n    color: ${uiColors.white};\n    background-color: ${uiColors.gray.dark3};\n  `,\n};\n\nconst visibleModalContentStyle = css`\n  transform: translate3d(0, 0, 0);\n  opacity: 1;\n`;\n\nconst modalSizes: { readonly [K in ModalSize]: string } = {\n  small: css`\n    width: 400px;\n  `,\n\n  default: css`\n    width: 600px;\n  `,\n\n  large: css`\n    ${mq({\n      width: ['720px', '720px', '960px'],\n    })}\n  `,\n};\n\nconst closeButton = css`\n  position: absolute;\n  cursor: pointer;\n  // x-icon should be 16px from edge. IconButton is 28x28 and Icon is 16x16\n  // so there's already (28 - 16) / 2 = 6px of spacing. 16 - 6 = 10.\n  right: 10px;\n  top: 10px;\n`;\n\nconst buttonColors = {\n  [Mode.Light]: css`\n    color: ${uiColors.gray.dark1};\n\n    &:hover {\n      color: ${uiColors.gray.dark3};\n    }\n  `,\n  [Mode.Dark]: css`\n    color: ${uiColors.gray.base};\n\n    &:hover {\n      color: ${uiColors.gray.base};\n    }\n  `,\n};\n\ninterface ModalProps {\n  /**\n   * Content that will appear inside of the Modal component.\n   */\n  children: React.ReactNode;\n\n  /**\n   * Determines the open state of the modal\n   * @default: `false`\n   */\n  open?: boolean;\n\n  /**\n   * Specifies the size of the Modal.\n   *\n   * default: `default`\n   */\n  size?: ModalSize;\n\n  /**\n   * Callback to change the open state of the Modal.\n   *\n   */\n  setOpen?: (open: boolean) => void | React.Dispatch<SetStateAction<boolean>>;\n\n  /**\n   * Callback to determine whether or not Modal should close when user tries to close it.\n   *\n   */\n  shouldClose?: () => boolean;\n\n  /**\n   * className applied to root div.\n   */\n  className?: string;\n\n  /**\n   * className applied to overlay div.\n   * Disclaimer: This prop may be deprecated in future versions of Modal\n   */\n  contentClassName?: string;\n\n  /**\n   * By default, when a focus trap is activated the first element in the focus trap's tab order will receive focus.\n   * With this option you can specify a different element to receive that initial focus.\n   * Selector string (which will be passed to document.querySelector() to find the DOM node)\n   */\n  initialFocus?: string;\n\n  darkMode?: boolean;\n}\n\n/**\n * # Modal\n *\n *  Modals place content on top of main window.\n *\n```\n<Modal\n  open\n  size=\"large\"\n  setOpen={setOpen}\n  shouldClose={() => console.log('Modal is closing now!')}\n  >\n  Modal content!\n</Modal>\n```\n * @param props.open Boolean to describe whether or not Modal is open.\n * @param props.size String to determine size of Modal. ['small', 'default', 'large']\n * @param props.setOpen Callback to change the open state of Modal.\n * @param props.children Content to appear inside of Modal container.\n * @param props.shouldClose Callback to determine whether or not Modal should close when user tries to close it.\n * @param props.className className applied to container div.\n * @param props.contentClassName className applied to overlay div.\n * @param props.closeOnBackdropClick Determines whether or not a Modal should close when a user clicks outside the modal.\n * @param props.initialFocus By default, when a focus trap is activated the first element in the focus trap's tab order will receive focus. With this option you can specify a different element to receive that initial focus. Selector string (which will be passed to document.querySelector() to find the DOM node).\n */\nfunction Modal({\n  open = false,\n  size = ModalSize.Default,\n  setOpen = () => {},\n  shouldClose = () => true,\n  darkMode = false,\n  children,\n  className,\n  contentClassName,\n  initialFocus,\n  ...rest\n}: ModalProps) {\n  const mode = darkMode ? Mode.Dark : Mode.Light;\n\n  const nodeRef = React.useRef(null);\n\n  const handleClose = useCallback(() => {\n    if (setOpen && shouldClose()) {\n      setOpen(false);\n    }\n  }, [setOpen, shouldClose]);\n\n  const id = useIdAllocator({ prefix: 'modal' });\n\n  useEscapeKey(handleClose, { enabled: open });\n\n  const focusTrapOptions = initialFocus\n    ? {\n        initialFocus: `#${id} ${initialFocus}`,\n      }\n    : {};\n\n  return (\n    <Transition\n      in={open}\n      timeout={150}\n      mountOnEnter\n      unmountOnExit\n      nodeRef={nodeRef}\n    >\n      {(state: string) => (\n        <Portal>\n          <div\n            {...rest}\n            id={id}\n            ref={nodeRef}\n            className={cx(className, backdrop, {\n              [visibleBackdrop]: state === 'entered',\n            })}\n          >\n            <FocusTrap focusTrapOptions={focusTrapOptions}>\n              <div className={scrollContainer}>\n                <div\n                  aria-modal=\"true\"\n                  role=\"dialog\"\n                  tabIndex={-1}\n                  className={cx(\n                    modalContentStyle,\n                    modeStyles[mode],\n                    modalSizes[size],\n                    {\n                      [visibleModalContentStyle]: state === 'entered',\n                    },\n                    contentClassName,\n                  )}\n                >\n                  {children}\n                  <IconButton\n                    onClick={handleClose}\n                    aria-label=\"Close modal\"\n                    className={cx(closeButton, buttonColors[mode])}\n                    darkMode={darkMode}\n                  >\n                    <XIcon />\n                  </IconButton>\n                </div>\n              </div>\n            </FocusTrap>\n          </div>\n        </Portal>\n      )}\n    </Transition>\n  );\n}\n\nModal.displayName = 'Modal';\n\nModal.propTypes = {\n  open: PropTypes.bool,\n  size: PropTypes.string,\n  children: PropTypes.node,\n  shouldClose: PropTypes.func,\n  className: PropTypes.string,\n  setOpen: PropTypes.func,\n};\n\nexport default Modal;\n"],"names":["_templateObject","_templateObject2","footerStyle","css","_taggedTemplateLiteral","uiColors","gray","light2","Footer","_ref","children","className","darkMode","___EmotionJSX","cx","dark2","displayName","_templateObject3","_templateObject4","_templateObject5","_templateObject6","_modeStyles","_templateObject7","_templateObject8","_templateObject9","_templateObject10","_templateObject11","_templateObject12","_templateObject13","_buttonColors","_excluded","Mode","ModalSize","Small","Default","Large","mq","breakpoints","arguments","length","undefined","literal","overlap","concat","flatten","obj","Array","isArray","map","slots","objects","props","Object","keys","forEach","key","item","charCodeAt","prior","v","index","_slots$mq$index","el","assign","_len","values","_key","facepaint","backdrop","transparentize","black","visibleBackdrop","scrollContainer","modalContentStyle","modeStyles","_defineProperty","dark3","white","visibleModalContentStyle","modalSizes","small","default","large","width","closeButton","buttonColors","dark1","base","Modal","_ref$open","open","_ref$size","size","_ref$setOpen","setOpen","_ref$shouldClose","shouldClose","_ref$darkMode","contentClassName","initialFocus","rest","_objectWithoutProperties","mode","nodeRef","React","useRef","handleClose","useCallback","id","useIdAllocator","prefix","useEscapeKey","enabled","focusTrapOptions","Transition","in","timeout","mountOnEnter","unmountOnExit","state","Portal","_extends","ref","FocusTrap","aria-modal","role","tabIndex","IconButton","onClick","aria-label","XIcon","propTypes","PropTypes","bool","string","node","func"],"mappings":"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"}