/// <reference types="react" />
declare const Variant: {
    readonly Primary: "primary";
    readonly PrimaryOutline: "primaryOutline";
    readonly Default: "default";
    readonly Danger: "danger";
    readonly DangerOutline: "dangerOutline";
};
declare type Variant = typeof Variant[keyof typeof Variant];
declare const Size: {
    XSmall: string;
    Small: string;
    Default: string;
    Large: string;
};
declare type Size = typeof Size[keyof typeof Size];
declare const Mode: {
    readonly Light: "light";
    readonly Dark: "dark";
};
declare type Mode = typeof Mode[keyof typeof Mode];
declare type FontSize = 14 | 16;
interface ButtonProps {
    variant?: Variant;
    darkMode?: boolean;
    baseFontSize?: FontSize;
    size?: Size;
    disabled?: boolean;
    className?: string;
    children?: React.ReactNode;
    leftGlyph?: React.ReactElement;
    rightGlyph?: React.ReactElement;
    href?: string;
}
export { Variant, Size, Mode, FontSize, ButtonProps };
//# sourceMappingURL=types.d.ts.map