{"version":3,"file":"index.js","sources":["../../src/Box.tsx"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\ntype Override<T, U> = Omit<T, keyof U> & U;\ntype Override2<T, U, V> = Override<Override<T, U>, V>;\n\ntype BoxDefault<\n  Default extends React.ElementType = 'div',\n  ExtraProps = {}\n> = Override2<\n  React.ComponentPropsWithRef<Default>,\n  {\n    as?: never;\n    href?: never;\n  },\n  ExtraProps\n>;\n\ntype BoxAnchorDefault<ExtraProps = {}> = Override2<\n  React.ComponentPropsWithRef<'a'>,\n  {\n    as?: never;\n    href: string;\n  },\n  ExtraProps\n>;\n\ntype BoxIntrinsic<\n  TElement extends keyof JSX.IntrinsicElements = keyof JSX.IntrinsicElements,\n  ExtraProps = {}\n> = Override2<\n  React.ComponentPropsWithRef<TElement>,\n  {\n    as: TElement;\n  },\n  ExtraProps\n>;\n\ntype BoxComponent<TProps = {}, ExtraProps = {}> = Override2<\n  React.PropsWithRef<TProps>,\n  {\n    as: React.ComponentType<TProps>;\n  },\n  ExtraProps\n>;\n\nexport type BoxProps<\n  Default extends React.ElementType = 'div',\n  ExtraProps = {}\n> =\n  | BoxAnchorDefault<ExtraProps>\n  | BoxIntrinsic<keyof JSX.IntrinsicElements, ExtraProps>\n  | BoxComponent<{}, ExtraProps>\n  | BoxDefault<Default, ExtraProps>;\n\nfunction InlineBox(props: BoxDefault, ref: React.Ref<any>): JSX.Element;\nfunction InlineBox(props: BoxAnchorDefault, ref: React.Ref<any>): JSX.Element;\nfunction InlineBox<TElement extends keyof JSX.IntrinsicElements>(\n  props: BoxIntrinsic<TElement>,\n  ref: React.Ref<any>,\n): JSX.Element;\nfunction InlineBox<TProps>(\n  props: BoxComponent<TProps>,\n  ref: React.Ref<any>,\n): JSX.Element;\n\nfunction InlineBox(props: BoxProps, ref: React.Ref<any>) {\n  if (props.as != null) {\n    const { as: Component, ...rest } = props;\n    // @ts-expect-error\n    return <Component {...rest} ref={ref} />;\n  }\n\n  if (props.href != null) {\n    return <a {...props} ref={ref} />; //eslint-disable-line jsx-a11y/anchor-has-content\n  }\n\n  return <div {...props} ref={ref} />;\n}\n\nInlineBox.displayName = 'InlineBox';\n\n// @ts-expect-error\nconst Box = React.forwardRef(InlineBox) as typeof InlineBox;\n\nBox.displayName = 'Box';\n\n// @ts-expect-error\nBox.propTypes = {\n  as: PropTypes.oneOfType([\n    PropTypes.elementType,\n    PropTypes.element,\n    PropTypes.func,\n  ]),\n  href: PropTypes.string,\n};\n\nexport default Box;\n\nexport interface ExtendableBox<\n  ExtraProps,\n  Default extends React.ElementType = 'div'\n> extends Pick<\n    React.FunctionComponent<BoxProps<Default, ExtraProps>>,\n    'displayName' | 'propTypes'\n  > {\n  (props: BoxDefault<Default, ExtraProps>): JSX.Element | null;\n  (props: BoxAnchorDefault<ExtraProps>): JSX.Element | null;\n  <TElement extends keyof JSX.IntrinsicElements>(\n    props: BoxIntrinsic<TElement, ExtraProps>,\n  ): JSX.Element | null;\n  <TProps>(props: BoxComponent<TProps, ExtraProps>): JSX.Element | null;\n}\n"],"names":["InlineBox","props","ref","as","Component","rest","_objectWithoutProperties","___EmotionJSX","_extends","href","displayName","Box","React","forwardRef","propTypes","PropTypes","oneOfType","elementType","element","func","string"],"mappings":"upBAMA,SAASA,EAAUC,EAAOC,GACxB,GAAgB,MAAZD,EAAME,GAAY,CACpB,IAAIC,EAAYH,EAAME,GAClBE,EAAOC,EAAyBL,EAAO,CAAC,OAG5C,OAAOM,EAAcH,EAAWI,EAAS,GAAIH,EAAM,CACjDH,IAAKA,KAIT,OAAkB,MAAdD,EAAMQ,KACDF,EAAc,IAAKC,EAAS,GAAIP,EAAO,CAC5CC,IAAKA,KAIFK,EAAc,MAAOC,EAAS,GAAIP,EAAO,CAC9CC,IAAKA,KAITF,EAAUU,YAAc,YAErB,IAACC,EAAMC,EAAMC,WAAWb,GAC3BW,EAAID,YAAc,MAElBC,EAAIG,UAAY,CACdX,GAAIY,EAAUC,UAAU,CAACD,EAAUE,YAAaF,EAAUG,QAASH,EAAUI,OAC7EV,KAAMM,EAAUK"}