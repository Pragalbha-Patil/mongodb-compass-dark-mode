{"version":3,"file":"index.js","sources":["../src/VisuallyHidden.tsx","../src/prefersReducedMotion.tsx","../src/useAccessibleForm.ts","../src/validateAriaLabelProps.tsx"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { HTMLElementProps } from '@leafygreen-ui/lib';\nimport { css, cx } from '@leafygreen-ui/emotion';\n\nconst visuallyHidden = css`\n  clip: rect(0, 0, 0, 0);\n  clip-path: inset(50%);\n  height: 1px;\n  width: 1px;\n  margin: -1px;\n  overflow: hidden;\n  padding: 0;\n  position: absolute;\n`;\n\nfunction VisuallyHidden({\n  children,\n  className,\n  ...rest\n}: HTMLElementProps<'div'>) {\n  return (\n    <div {...rest} className={cx(visuallyHidden, className)}>\n      {children}\n    </div>\n  );\n}\n\nVisuallyHidden.displayName = 'VisuallyHidden';\n\nVisuallyHidden.propTypes = {\n  children: PropTypes.string,\n  className: PropTypes.string,\n};\n\nexport default VisuallyHidden;\n","import { css } from '@leafygreen-ui/emotion';\n\n/**\n * Returns an emotion CSS instance for rendering styles that respect\n * OS-level preferences for reduced motion.\n *\n * Use this function to remove scale, size, and positional transitions\n * for users with that preference set.\n * @param styles String of styles to render within media query.\n */\nexport default function prefersReducedMotion(styles: string) {\n  if (styles != null && typeof styles === 'string') {\n    return css`\n      @media (prefers-reduced-motion: reduce) {\n        ${styles}\n      }\n    `;\n  }\n\n  return '';\n}\n","import { useIdAllocator } from '@leafygreen-ui/hooks';\n\n/**\n * Hook that returns two sets of props that accessibly associate a label and its respective input element\n * @param id Describes the input element\n */\nconst useAccessibleForm = (idProp: string) => {\n  const inputId = useIdAllocator({ prefix: 'lgui-input', id: idProp });\n  const labelId = useIdAllocator({ prefix: 'lgui-label' });\n\n  const labelProps = {\n    id: labelId,\n    htmlFor: inputId,\n  };\n\n  const inputProps = {\n    id: inputId,\n    ['aria-labelledby']: labelId,\n  };\n\n  return { labelProps, inputProps };\n};\n\nexport default useAccessibleForm;\n","// Validate that either aria-label or aria-labelledby are present within props.\nexport function validateAriaLabelProps(\n  props: Record<string, any>,\n  componentName: string,\n): void {\n  if (!props['aria-label'] && !props['aria-labelledby']) {\n    console.error(\n      `For screen-reader accessibility, aria-label or aria-labelledby must be provided${\n        componentName ? ` to ${componentName}` : ''\n      }.`,\n    );\n  }\n}\n"],"names":["_templateObject","data","_taggedTemplateLiteral","visuallyHidden","css","VisuallyHidden","_ref","children","className","rest","_objectWithoutProperties","___EmotionJSX","_extends","cx","displayName","propTypes","PropTypes","string","styles","idProp","inputId","useIdAllocator","prefix","id","labelId","labelProps","htmlFor","inputProps","props","componentName","console","error","concat"],"mappings":"2zCAIA,SAASA,IACP,IAAIC,EAAOC,EAAuB,CAAC,uKAMnC,OAJAF,EAAkB,WAChB,OAAOC,GAGFA,EAOT,IAAIE,EAAiBC,MAAIJ,KAEzB,SAASK,EAAeC,GACtB,IAAIC,EAAWD,EAAKC,SAChBC,EAAYF,EAAKE,UACjBC,EAAOC,EAAyBJ,EAAM,CAAC,WAAY,cAEvD,OAAOK,MAAc,MAAOC,EAAS,GAAIH,EAAM,CAC7CD,UAAWK,KAAGV,EAAgBK,KAC5BD,GAGNF,EAAeS,YAAc,iBAC7BT,EAAeU,UAAY,CACzBR,SAAUS,UAAUC,OACpBT,UAAWQ,UAAUC,QC/BvB,SAASjB,IACP,IAAIC,EAAOC,EAAuB,CAAC,8DAA+D,oBAMlG,OAJAF,EAAkB,WAChB,OAAOC,GAGFA,4CAaM,SAA8BiB,GAC3C,OAAc,MAAVA,GAAoC,iBAAXA,EACpBd,MAAIJ,IAAmBkB,GAGzB,wBCpBe,SAA2BC,GACjD,UAAIC,EAAUC,iBAAe,CAC3BC,OAAQ,aACRC,GAAIJ,IAEFK,EAAUH,iBAAe,CAC3BC,OAAQ,eAWV,MAAO,CACLG,WAVe,CACfF,GAAIC,EACJE,QAASN,GASTO,cAJoBH,KAAnB,uBAF8B,CAC/BD,GAAIH,wHCpBD,SAAgCQ,EAAOC,GACvCD,EAAM,eAAkBA,EAAM,oBACjCE,QAAQC,MAAM,kFAAkFC,OAAOH,EAAgB,OAAOG,OAAOH,GAAiB,GAAI"}