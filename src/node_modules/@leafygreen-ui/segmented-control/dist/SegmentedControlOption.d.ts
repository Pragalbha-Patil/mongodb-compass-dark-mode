import React from 'react';
/**
 * Types
 */
export interface SegmentedControlOptionProps extends React.HTMLAttributes<HTMLDivElement> {
    /**
     * Can be text and/or an icon element
     */
    children: React.ReactNode;
    /**
     * The value of the option
     */
    value: string;
    /**
     * Toggles whether the option is disabled. Defaults to `false`
     */
    disabled?: boolean;
    /**
     * Render the option wrapped in another component. Typically used for router `Link` components.
     *
     * Default: `div`
     */
    as?: any;
    /**
     * Identifies the element(s) whose contents/presence is controlled by the segmented control.
     *
     * Required as a prop on the control, or on each individual option.
     */
    'aria-controls'?: string;
    /**
     * Styling prop
     */
    className?: string;
    /**
     * Internal. A unique identifier for the option
     */
    _id?: string;
    /**
     * Internal. Identifies whether the option is checked.
     */
    _checked?: boolean;
    /**
     * Internal. Identifies whether the option has focus
     */
    _focused?: boolean;
    /**
     * Internal. The index of the option
     */
    _index?: number;
    /**
     * Internal. Calls the onChange callback
     */
    _onClick?: (value: string) => void;
    /**
     * Internal. Fires on mouse in and out
     */
    _onHover?: (hovered: boolean) => void;
    /**
     * Any other props
     */
    [key: string]: any;
}
/**
 * Component
 */
declare const SegmentedControlOption: React.ForwardRefExoticComponent<Pick<SegmentedControlOptionProps, React.ReactText> & React.RefAttributes<HTMLDivElement>>;
export default SegmentedControlOption;
//# sourceMappingURL=SegmentedControlOption.d.ts.map