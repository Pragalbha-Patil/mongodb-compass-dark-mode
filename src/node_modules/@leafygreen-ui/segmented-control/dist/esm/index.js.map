{"version":3,"file":"index.js","sources":["../../src/useDynamicRefs.tsx","../../src/SegmentedControl.tsx","../../src/useEffectOnceOnMount.tsx","../../src/SegmentedControlOption.tsx"],"sourcesContent":["/**\n * From https://github.com/fitzmode/use-dynamic-refs/blob/master/src/index.tsx\n *\n * There's a bug in the original package\n *\n * Consider moving this to `/hooks`\n */\n\nimport * as React from 'react';\n\nconst map = new Map<string, React.RefObject<unknown>>();\n\nfunction setRef(): void;\nfunction setRef<T>(key: string): React.RefObject<T>;\n\nfunction setRef<T>(key?: string): React.RefObject<T> | void {\n  if (!key) return console.warn(`useDynamicRefs: Cannot set ref without key `);\n\n  if (map.get(key)) {\n    return map.get(key) as React.RefObject<T>;\n  }\n\n  const ref = React.createRef<T>();\n  map.set(key, ref);\n  return ref;\n}\n\nfunction getRef(): void;\nfunction getRef<T>(key: string): React.RefObject<T>;\n\nfunction getRef<T>(key?: string): React.RefObject<T> | undefined | void {\n  if (!key) return console.warn(`useDynamicRefs: Cannot get ref without key`);\n  return map.get(key) as React.RefObject<T>;\n}\n\nfunction useDynamicRefs<T>(): [\n  (key?: string) => void | React.RefObject<T>,\n  (key?: string) => void | React.RefObject<T>,\n] {\n  return [getRef, setRef];\n}\n\nexport default useDynamicRefs;\n","import React, { useCallback, useEffect, useMemo, useState } from 'react';\nimport { useIdAllocator } from '@leafygreen-ui/hooks';\nimport { cx, css } from '@leafygreen-ui/emotion';\nimport { createDataProp, isComponentType } from '@leafygreen-ui/lib';\nimport { uiColors } from '@leafygreen-ui/palette';\nimport { Overline } from '@leafygreen-ui/typography';\nimport { useUsingKeyboardContext } from '@leafygreen-ui/leafygreen-provider';\nimport useDynamicRefs from './useDynamicRefs';\nimport { Size, Mode } from './types';\nimport { once } from 'lodash';\nimport { useEffectOnceOnMount } from './useEffectOnceOnMount';\n\nconst selectionIndicatorDataAttr = createDataProp('selection-indicator');\nconst hoverIndicatorDataAttr = createDataProp('hover-indicator');\n\n/**\n * Styles\n */\nconst wrapperStyle = css`\n  display: flex;\n  gap: 8px;\n  align-items: center;\n  z-index: 0;\n`;\n\nconst labelStyle: {\n  [key in Mode]: string;\n} = {\n  light: css`\n    color: ${uiColors.gray.dark1};\n  `,\n  dark: css`\n    color: ${uiColors.gray.light1};\n  `,\n};\n\n// The border color is slightly different from the base gray for accessibility reasons\nconst selectionBorderColor = '#869499';\n\nconst frameStyleSize: {\n  [key in Size]: string;\n} = {\n  small: css`\n    --segment-gap: 1px;\n    --frame-padding: 0px;\n    --frame-border-radius: 4px;\n    --indicator-height: 100%;\n  `,\n  default: css`\n    --segment-gap: 5px;\n    --frame-padding: 3px;\n    --frame-border-radius: 6px;\n    --indicator-height: calc(100% - 2 * var(--frame-padding));\n  `,\n  large: css`\n    --segment-gap: 5px;\n    --frame-padding: 3px;\n    --frame-border-radius: 6px;\n    --indicator-height: calc(100% - 2 * var(--frame-padding));\n  `,\n};\n\nconst frameStyleMode: {\n  [key in Mode]: string;\n} = {\n  light: css`\n    --background-color: ${uiColors.gray.light3};\n    --border-color: transparent;\n    --border-width: 0px;\n    --inner-shadow: 0px 1px 2px rgba(0, 0, 0, 0.3) inset;\n    --outer-shadow: 0px 1px 1px #e7eeec;\n    --hover-background-color: ${uiColors.white};\n    --indicator-background-color: ${uiColors.gray.light2};\n    --indicator-border-color: ${selectionBorderColor};\n  `,\n  dark: css`\n    --background-color: ${uiColors.gray.dark3};\n    --border-color: ${uiColors.gray.dark1};\n    --border-width: 1px;\n    --inner-shadow: unset;\n    --outer-shadow: unset;\n    --hover-background-color: ${uiColors.gray.dark2};\n    --indicator-background-color: ${uiColors.gray.dark1};\n    --indicator-border-color: ${uiColors.gray.base};\n  `,\n};\n\nconst frameStyle = ({\n  mode = 'light',\n  size = 'default',\n}: {\n  mode: Mode;\n  size: Size;\n}) =>\n  cx(\n    frameStyleSize[size],\n    frameStyleMode[mode],\n    css`\n      position: relative;\n      display: grid;\n      grid-auto-flow: column;\n      grid-auto-columns: 1fr;\n      gap: var(--segment-gap);\n      align-items: center;\n      padding: var(--frame-padding);\n      border: var(--border-width) solid var(--border-color);\n      border-radius: var(--frame-border-radius);\n      background-color: var(--background-color);\n\n      &:focus {\n        outline: none;\n      }\n\n      // Frame shadow\n      &:after {\n        content: '';\n        position: absolute;\n        width: 100%;\n        height: 100%;\n        border-radius: inherit;\n        box-shadow: var(--inner-shadow), var(--outer-shadow);\n        z-index: 1;\n        pointer-events: none;\n      }\n    `,\n  );\n\nconst selectionIndicatorStyle = css`\n  position: absolute;\n  grid-column: 1/2; // position the selector in the grid until it gets positioned\n  width: 100%;\n  height: var(--indicator-height);\n  z-index: 2;\n  box-shadow: 0px 1px 2px rgba(6, 22, 33, 0.3);\n  border-radius: 4px;\n  border-width: 1px;\n  border-style: solid;\n  background-color: var(--indicator-background-color);\n  border-color: var(--indicator-border-color);\n  transition: transform 150ms ease-in-out;\n`;\n\nconst getDynamicSelectionStyle = (width: number, left: number) => {\n  return css`\n    grid-column: unset;\n    width: ${width}px;\n    transform: translateX(${left}px);\n  `;\n};\n\nconst hoverIndicatorStyle = css`\n  position: absolute;\n  height: var(--indicator-height);\n  width: 100%;\n  grid-column: unset;\n  border-radius: 4px;\n  background-color: var(--hover-background-color);\n  z-index: 0;\n  opacity: 0;\n`;\n\nconst getDynamicHoverStyle = (index: number | null) => {\n  if (index != null) {\n    return css`\n      opacity: 1;\n      grid-column: ${index + 1} / ${index + 2};\n    `;\n  }\n};\n\n/**\n * Types\n */\n\ninterface SCContext {\n  size: Size;\n  mode: Mode;\n  name: string;\n  followFocus: boolean;\n}\nexport const SegmentedControlContext = React.createContext<SCContext>({\n  size: 'default',\n  mode: 'light',\n  name: '',\n  followFocus: true,\n});\n\nexport interface SegmentedControlProps\n  extends Omit<React.HTMLAttributes<HTMLDivElement>, 'onChange'> {\n  /**\n   * Children must be SegmentedControlOptions\n   */\n  children: React.ReactNode;\n\n  /**\n   * Defines the size of the segmented control. Can be either `small`, `default`, or `large`\n   */\n  size?: Size;\n\n  /**\n   * Toggles dark mode\n   */\n  darkMode?: boolean;\n\n  /**\n   * Defines the default, or initial value of the component. Ignored if `value` is also provided.\n   */\n  defaultValue?: string;\n\n  /**\n   * Controls the value of the component.\n   * If provided, you must update the value in the `onChange` method,\n   * or other user actions (such as routing)\n   */\n  value?: string;\n\n  /**\n   * A text label to the left of the segmented control. Sets the `name` prop if none is provided.\n   */\n  label?: string;\n\n  /**\n   * Identifies the segmented control group to screen readers. Auto-generated if no `name` or `label` is provided.\n   *\n   * It's recommended for accessability to set this to a meaningful value.\n   */\n  name?: string;\n\n  /**\n   * Defines whether the selection should automatically follow focus.\n   * If set to true, the arrow keys can be used to switch selection,\n   * otherwise a keyboard user will need to press enter to make a selection.\n   *\n   * Default: `true`\n   */\n  followFocus?: boolean;\n\n  /**\n   * Identifies the element(s) whose contents/presence is controlled by the segmented control.\n   *\n   * Required as a prop on the control, or on each individual option.\n   */\n  'aria-controls'?: string;\n\n  /**\n   * Callback that gets called when a user makes a new selection.\n   */\n  onChange?: (value: string) => void;\n\n  /**\n   * Styling prop\n   */\n  className?: string;\n}\n\n/**\n * Component\n */\nconst SegmentedControl = React.forwardRef<\n  HTMLDivElement,\n  SegmentedControlProps\n>(function SegmentedControl(\n  {\n    children,\n    name: nameProp,\n    size = 'default',\n    darkMode = false,\n    defaultValue,\n    value: controlledValue,\n    onChange,\n    className,\n    label,\n    followFocus = true,\n    'aria-controls': ariaControls,\n    ...rest\n  }: SegmentedControlProps,\n  forwardedRef,\n) {\n  // TODO log warning if defaultValue is set but does not match any child value\n  const { usingKeyboard } = useUsingKeyboardContext();\n\n  const [getRef, setRef] = useDynamicRefs<HTMLDivElement>();\n\n  const mode = darkMode ? 'dark' : 'light';\n\n  const name = useIdAllocator({\n    prefix: 'segmented-control',\n    id: nameProp ?? label,\n  });\n\n  // If a value is given, then it's controlled\n  const isControlled = useMemo(() => controlledValue != null, [\n    controlledValue,\n  ]);\n\n  // Keep track of the value internally\n  const [internalValue, setInternalValue] = useState<string | undefined>(\n    defaultValue ?? controlledValue,\n  );\n\n  const [focusedOptionValue, setFocusedOptionValue] = useState<\n    string | undefined\n  >(defaultValue ?? controlledValue);\n\n  // If no default or controlled value is given, set it to the first option\n  useEffectOnceOnMount(() => {\n    const firstChild = React.Children.toArray(children)[0];\n\n    if (\n      !internalValue &&\n      isComponentType(firstChild, 'SegmentedControlOption')\n    ) {\n      setInternalValue(firstChild.props.value);\n      setFocusedOptionValue(firstChild.props.value);\n    }\n  });\n\n  // Handle value updates\n  const updateValue = useCallback(\n    (value: string) => {\n      if (internalValue !== value) {\n        setInternalValue(value);\n        onChange?.(value);\n      }\n    },\n    [internalValue, onChange],\n  );\n\n  /**\n   * Main render function.\n   * Add internal props to children passed in\n   */\n  const renderedChildren: React.ReactNode = useMemo(\n    () =>\n      React.Children.map(children, (child, index) => {\n        if (!isComponentType(child, 'SegmentedControlOption')) {\n          errorOnce(\n            `Error in Segmented Control: ${child} is not a SegmentedControlOption`,\n          );\n          return child;\n        }\n\n        // Ensure `aria-controls` is set\n        if (!ariaControls && !child.props['aria-controls']) {\n          warnOnce(\n            `The property \\`aria-controls\\` is required on each Segmented Control option, or on the Segmented Control parent.`,\n          );\n        }\n\n        const _id = child.props.id ?? `${name}-${index}`;\n\n        const _checked: boolean = isControlled\n          ? child.props.value === controlledValue || !!child.props.checked\n          : child.props.value === internalValue;\n\n        const _focused: boolean = child.props.value === focusedOptionValue;\n\n        const _onHover = (hovered: boolean) => {\n          if (hovered) setHoveredIndex(index);\n          else setHoveredIndex(null);\n        };\n\n        return React.cloneElement(child, {\n          _id,\n          _checked,\n          _focused,\n          _index: index,\n          'aria-controls': child.props['aria-controls'] ?? ariaControls,\n          _onClick: updateValue,\n          _onHover,\n          ref: setRef(`${name}-${index}`),\n        });\n      }),\n    [\n      children,\n      isControlled,\n      controlledValue,\n      internalValue,\n      focusedOptionValue,\n      name,\n      ariaControls,\n      updateValue,\n      setRef,\n    ],\n  );\n\n  // Maintain a list of child `id`s to link the `tablist` to individual `tab` elements\n  // See https://www.w3.org/TR/wai-aria-1.1/#tab\n  const childrenIdList: string = useMemo(() => {\n    if (renderedChildren) {\n      return React.Children.map(\n        renderedChildren as React.ReactElement,\n        child => child?.props?._id,\n      ).join(' ');\n    }\n\n    return '';\n  }, [renderedChildren]);\n\n  // Keep track of which element is hovered\n  const [hoveredIndex, setHoveredIndex] = useState<number | null>(null);\n\n  // Keep track of the index of the selected value\n  const selectedIndex = useMemo(\n    () =>\n      (React.Children.toArray(\n        renderedChildren,\n      ) as Array<React.ReactElement>).findIndex(child =>\n        isControlled\n          ? child.props.value === controlledValue\n          : child.props.value === internalValue,\n      ),\n    [controlledValue, isControlled, renderedChildren, internalValue],\n  );\n\n  /**\n   * Focus Management\n   */\n\n  // Keep track of the index of the focused value\n  const focusedIndex = useMemo(\n    () =>\n      (React.Children.toArray(\n        renderedChildren,\n      ) as Array<React.ReactElement>).findIndex(\n        child => child.props.value === focusedOptionValue,\n      ),\n    [renderedChildren, focusedOptionValue],\n  );\n\n  const updateFocusedIndex = (newIndex: number): void => {\n    const children = (React.Children.toArray(\n      renderedChildren,\n    ) as Array<React.ReactElement>).filter(child => !child.props.disabled);\n    const length = children.length;\n    newIndex =\n      newIndex >= length\n        ? newIndex % length\n        : newIndex < 0\n        ? length + newIndex\n        : newIndex;\n\n    const { value } = children[newIndex].props;\n    setFocusedOptionValue(value);\n  };\n\n  // When the value changes via click, we update the internal focus tracker so the correct element gets focused on tab press\n  useEffect(() => {\n    if (!usingKeyboard) {\n      setFocusedOptionValue(internalValue);\n    }\n  }, [internalValue, usingKeyboard]);\n\n  const handleKeyDown = (e: React.KeyboardEvent<HTMLDivElement>) => {\n    // Note: Arrow keys don't fire a keyPress event — need to use keyDown\n    e.stopPropagation();\n    // We only handle right and left arrow keys\n    // Up & down should be left to control scroll\n    switch (e.key) {\n      case 'ArrowRight':\n        updateFocusedIndex(focusedIndex + 1);\n        break;\n      case 'ArrowLeft':\n        updateFocusedIndex(focusedIndex - 1);\n        break;\n      default:\n        break;\n    }\n  };\n\n  /**\n   * Dynamic Styles\n   */\n\n  // Dynamically set the size & position of the selection indicator\n  const [selectionStyleDynamic, setSelectionStyle] = useState<string>('');\n  useEffect(() => {\n    const selectedRef = getRef(`${name}-${selectedIndex}`);\n\n    if (selectedRef && selectedRef.current) {\n      // The ref refers to the button element\n      const selectedElement = selectedRef.current;\n\n      if (selectedElement) {\n        const { offsetWidth: width, offsetLeft: left } = selectedElement;\n        setSelectionStyle(getDynamicSelectionStyle(width, left));\n      }\n    }\n  }, [getRef, name, selectedIndex, renderedChildren]);\n\n  // Dynamic hover styles\n  const hoverStyleDynamic = useMemo(() => {\n    return getDynamicHoverStyle(hoveredIndex);\n  }, [hoveredIndex]);\n\n  /**\n   * Return\n   */\n  return (\n    <SegmentedControlContext.Provider value={{ size, mode, name, followFocus }}>\n      <div className={cx(wrapperStyle, className)} {...rest}>\n        {label && <Overline className={labelStyle[mode]}>{label}</Overline>}\n\n        <div\n          role=\"tablist\"\n          aria-label={name}\n          aria-owns={childrenIdList}\n          className={cx(frameStyle({ mode, size }))}\n          ref={forwardedRef}\n          onKeyDownCapture={handleKeyDown}\n        >\n          {renderedChildren}\n          <div\n            {...selectionIndicatorDataAttr.prop}\n            className={cx(selectionIndicatorStyle, selectionStyleDynamic)}\n          />\n          <div\n            {...hoverIndicatorDataAttr.prop}\n            className={cx(hoverIndicatorStyle, hoverStyleDynamic)}\n          />\n        </div>\n      </div>\n    </SegmentedControlContext.Provider>\n  );\n});\n\nSegmentedControl.displayName = 'SegmentedControl';\n\nexport default SegmentedControl;\n\nconst errorOnce = once(console.error);\nconst warnOnce = once(console.warn);\n","import { useEffect, useRef } from 'react';\n\n/**\n * Runs an effect on the first render only\n * @param effect\n */\nexport function useEffectOnceOnMount(effect: React.EffectCallback): void {\n  const didComponentMount = useRef(false);\n\n  useEffect(() => {\n    if (!didComponentMount.current) {\n      didComponentMount.current = true;\n      effect();\n    }\n  }, [effect]);\n}\n","import React, { useContext, useEffect, useRef } from 'react';\nimport { css, cx } from '@leafygreen-ui/emotion';\nimport { uiColors } from '@leafygreen-ui/palette';\nimport InteractionRing from '@leafygreen-ui/interaction-ring';\nimport { useUsingKeyboardContext } from '@leafygreen-ui/leafygreen-provider';\nimport Box from '@leafygreen-ui/box';\nimport { Size, Mode } from './types';\nimport { SegmentedControlContext } from './SegmentedControl';\n\n/**\n * Styles\n */\n\nconst optionMode = (mode: Mode) => {\n  switch (mode) {\n    case 'light':\n      return css`\n        --base-text-color: ${uiColors.gray.dark1};\n        --base-background-color: transparent;\n        --base-shadow-color: transparent;\n        --hover-text-color: ${uiColors.gray.dark3};\n        --hover-background-color: ${uiColors.white};\n        --active-text-color: ${uiColors.gray.dark3};\n        --disabled-text-color: ${uiColors.gray.light1};\n      `;\n    case 'dark':\n      return css`\n        --base-text-color: ${uiColors.gray.light1};\n        --base-background-color: transparent;\n        --base-shadow-color: transparent;\n        --hover-text-color: ${uiColors.gray.light2};\n        --hover-background-color: ${uiColors.gray.dark2};\n        --active-text-color: ${uiColors.white};\n        --disabled-text-color: ${uiColors.gray.dark1};\n      `;\n  }\n};\n\nconst optionSize = (size: Size) => {\n  switch (size) {\n    case 'small':\n      return css`\n        --font-size: 12px;\n        --line-height: 16px;\n        --padding-block: 3px;\n        --padding-inline: 12px;\n        --text-transform: uppercase;\n        --font-weight: bold;\n        --divider-height: 12px;\n      `;\n    case 'large':\n      return css`\n        --font-size: 16px;\n        --line-height: 28px;\n        --padding-block: 4px;\n        --padding-inline: 12px;\n        --text-transform: none;\n        --font-weight: normal;\n        --divider-height: 20px;\n      `;\n    case 'default':\n      return css`\n        --font-size: 14px;\n        --line-height: 24px;\n        --padding-block: 3px;\n        --padding-inline: 12px;\n        --text-transform: none;\n        --font-weight: normal;\n        --divider-height: 18px;\n      `;\n  }\n};\n\nconst optionStyle = ({\n  mode = 'light',\n  size = 'default',\n}: {\n  mode: Mode;\n  size: Size;\n}) =>\n  cx(\n    optionMode(mode),\n    optionSize(size),\n    css`\n      position: relative;\n      display: flex;\n      width: 100%;\n      align-items: center;\n      justify-content: center;\n      z-index: 3;\n\n      --divider-background-color: ${uiColors.gray.light1};\n\n      &:first-child,\n      &[data-lg-checked='true'],\n      &[data-lg-checked='true'] + [data-lg-checked='false'] {\n        --divider-background-color: transparent;\n      }\n\n      /* \n      * Adds the divider line to unselected segments \n      */\n      &:before {\n        --divider-width: 1px;\n        content: '';\n        position: absolute;\n        height: var(--divider-height);\n        width: var(--divider-width);\n        left: calc(0px - (var(--segment-gap) + var(--divider-width)) / 2);\n        top: calc(\n          (\n              var(--line-height) + var(--padding-block) * 2 -\n                var(--divider-height)\n            ) / 2\n        );\n        transition: background-color 100ms ease-in-out;\n        background-color: var(--divider-background-color);\n      }\n    `,\n  );\n\nconst interactionRingStyle = css`\n  width: 100%;\n  z-index: 1;\n\n  /* disable the interaction ring hover state */\n  &:hover > [data-leafygreen-ui='interaction-ring'] {\n    box-shadow: none;\n  }\n`;\n\nconst boxStyle = css`\n  width: 100%;\n  text-decoration: none;\n`;\n\nconst buttonStyle = css`\n  display: inline-flex;\n  position: relative;\n  width: 100%;\n  height: 100%;\n  align-items: center;\n  justify-content: center;\n  padding: var(--padding-block) var(--padding-inline);\n  background-color: var(--base-background-color);\n  border-radius: 4px;\n  text-align: center;\n  font-size: var(--font-size);\n  line-height: var(--line-height);\n  text-transform: var(--text-transform, none);\n  font-weight: var(--font-weight);\n  color: var(--base-text-color);\n  box-shadow: 0px 1px 2px var(--base-shadow-color);\n  cursor: pointer;\n  transition: all 100ms ease-in-out;\n  text-decoration: none;\n  outline: none;\n  border: none;\n\n  &:hover {\n    color: var(--hover-text-color);\n  }\n\n  &[aria-selected='true'] {\n    color: var(--active-text-color);\n  }\n\n  &:disabled {\n    color: var(--disabled-text-color);\n    cursor: not-allowed;\n  }\n`;\n\nconst labelStyle = css`\n  display: inline-flex;\n  min-height: var(--line-height);\n  align-items: center;\n  gap: calc(var(--font-size) / 2);\n`;\n\n/**\n * Types\n */\nexport interface SegmentedControlOptionProps\n  extends React.HTMLAttributes<HTMLDivElement> {\n  /**\n   * Can be text and/or an icon element\n   */\n  children: React.ReactNode;\n\n  /**\n   * The value of the option\n   */\n  value: string;\n\n  /**\n   * Toggles whether the option is disabled. Defaults to `false`\n   */\n  disabled?: boolean;\n\n  /**\n   * Render the option wrapped in another component. Typically used for router `Link` components.\n   *\n   * Default: `div`\n   */\n  as?: any;\n\n  /**\n   * Identifies the element(s) whose contents/presence is controlled by the segmented control.\n   *\n   * Required as a prop on the control, or on each individual option.\n   */\n  'aria-controls'?: string;\n\n  /**\n   * Styling prop\n   */\n  className?: string;\n\n  /**\n   * Internal. A unique identifier for the option\n   */\n  _id?: string;\n\n  /**\n   * Internal. Identifies whether the option is checked.\n   */\n  _checked?: boolean;\n\n  /**\n   * Internal. Identifies whether the option has focus\n   */\n  _focused?: boolean;\n\n  /**\n   * Internal. The index of the option\n   */\n  _index?: number;\n\n  /**\n   * Internal. Calls the onChange callback\n   */\n  _onClick?: (value: string) => void;\n\n  /**\n   * Internal. Fires on mouse in and out\n   */\n  _onHover?: (hovered: boolean) => void;\n\n  /**\n   * Any other props\n   */\n  [key: string]: any;\n}\n\n/**\n * Component\n */\nconst SegmentedControlOption = React.forwardRef<\n  HTMLDivElement,\n  SegmentedControlOptionProps\n>(\n  (\n    {\n      value,\n      children,\n      disabled = false,\n      as,\n      className,\n      'aria-controls': ariaControls,\n      _id: id,\n      _checked: checked,\n      _focused: focused,\n      _index: index,\n      _onClick,\n      _onHover,\n      ...rest\n    }: SegmentedControlOptionProps,\n    forwardedRef,\n  ) => {\n    const { size, mode, followFocus } = useContext(SegmentedControlContext);\n    const { usingKeyboard } = useUsingKeyboardContext();\n\n    const onClick = () => {\n      _onClick?.(value);\n    };\n\n    const onMouseEnter = () => {\n      _onHover?.(true);\n    };\n\n    const onMouseLeave = () => {\n      _onHover?.(false);\n    };\n\n    const didComponentMount = useRef(false);\n    const buttonRef = useRef<HTMLButtonElement>(null);\n    useEffect(() => {\n      if (didComponentMount.current) {\n        if (usingKeyboard && focused) {\n          // Respond in the DOM when this option is given focus via keyboard\n          buttonRef?.current?.focus();\n\n          if (followFocus) {\n            // Used to ensure native click default events fire when using keyboard navigation\n            buttonRef?.current?.click();\n          }\n        }\n      }\n      didComponentMount.current = true;\n    }, [focused, followFocus, usingKeyboard]);\n\n    return (\n      <div\n        className={cx(optionStyle({ mode, size }), className)}\n        ref={forwardedRef}\n        data-lg-checked={checked}\n      >\n        <InteractionRing\n          darkMode={mode === 'dark'}\n          className={interactionRingStyle}\n        >\n          <Box as={as} tabIndex={-1} className={boxStyle} {...rest}>\n            <button\n              role=\"tab\"\n              id={id}\n              tabIndex={focused ? 0 : -1}\n              aria-selected={checked}\n              aria-controls={ariaControls}\n              disabled={disabled}\n              className={buttonStyle}\n              ref={buttonRef}\n              onClick={onClick}\n              onMouseEnter={onMouseEnter}\n              onMouseLeave={onMouseLeave}\n            >\n              <span className={labelStyle}>{children}</span>\n            </button>\n          </Box>\n        </InteractionRing>\n      </div>\n    );\n  },\n);\n\nSegmentedControlOption.displayName = 'SegmentedControlOption';\n\nexport default SegmentedControlOption;\n"],"names":["map","Map","setRef","key","console","warn","get","ref","React.createRef","set","getRef","useDynamicRefs","_templateObject","_templateObject2","_templateObject3","_templateObject4","_templateObject5","_templateObject6","_templateObject7","_templateObject8","_templateObject9","_templateObject10","_templateObject11","_templateObject12","_templateObject13","_excluded","selectionIndicatorDataAttr","createDataProp","hoverIndicatorDataAttr","wrapperStyle","css","_taggedTemplateLiteral","labelStyle","light","uiColors","gray","dark1","dark","light1","frameStyleSize","small","default","large","frameStyleMode","light3","white","light2","dark3","dark2","base","frameStyle","_ref","_ref$mode","mode","_ref$size","size","cx","selectionIndicatorStyle","hoverIndicatorStyle","SegmentedControlContext","React","createContext","name","followFocus","SegmentedControl","forwardRef","_ref2","forwardedRef","effect","didComponentMount","children","nameProp","_ref2$size","_ref2$darkMode","darkMode","defaultValue","controlledValue","value","onChange","className","label","_ref2$followFocus","ariaControls","rest","_objectWithoutProperties","usingKeyboard","useUsingKeyboardContext","_useDynamicRefs2","_slicedToArray","useIdAllocator","prefix","id","isControlled","useMemo","_useState2","useState","internalValue","setInternalValue","_useState4","focusedOptionValue","setFocusedOptionValue","firstChild","Children","toArray","isComponentType","props","useRef","useEffect","current","updateValue","useCallback","renderedChildren","child","index","_child$props$id","_child$props$ariaCon","errorOnce","concat","warnOnce","_id","_checked","checked","_focused","cloneElement","_index","aria-controls","_onClick","_onHover","hovered","setHoveredIndex","childrenIdList","_child$props","join","_useState6","hoveredIndex","selectedIndex","findIndex","focusedIndex","updateFocusedIndex","newIndex","filter","disabled","length","_useState8","selectionStyleDynamic","setSelectionStyle","selectedRef","selectedElement","width","offsetWidth","left","offsetLeft","getDynamicSelectionStyle","hoverStyleDynamic","getDynamicHoverStyle","___EmotionJSX","Provider","_extends","Overline","role","aria-label","aria-owns","onKeyDownCapture","e","stopPropagation","prop","displayName","once","error","optionStyle","optionMode","optionSize","interactionRingStyle","boxStyle","buttonStyle","SegmentedControlOption","_ref2$disabled","as","focused","_useContext","useContext","buttonRef","_buttonRef$current","_buttonRef$current2","focus","click","data-lg-checked","InteractionRing","Box","tabIndex","aria-selected","onClick","onMouseEnter","onMouseLeave"],"mappings":"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"}