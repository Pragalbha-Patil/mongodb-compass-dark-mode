import React from 'react';
import { Size, Mode } from './types';
/**
 * Types
 */
interface SCContext {
    size: Size;
    mode: Mode;
    name: string;
    followFocus: boolean;
}
export declare const SegmentedControlContext: React.Context<SCContext>;
export interface SegmentedControlProps extends Omit<React.HTMLAttributes<HTMLDivElement>, 'onChange'> {
    /**
     * Children must be SegmentedControlOptions
     */
    children: React.ReactNode;
    /**
     * Defines the size of the segmented control. Can be either `small`, `default`, or `large`
     */
    size?: Size;
    /**
     * Toggles dark mode
     */
    darkMode?: boolean;
    /**
     * Defines the default, or initial value of the component. Ignored if `value` is also provided.
     */
    defaultValue?: string;
    /**
     * Controls the value of the component.
     * If provided, you must update the value in the `onChange` method,
     * or other user actions (such as routing)
     */
    value?: string;
    /**
     * A text label to the left of the segmented control. Sets the `name` prop if none is provided.
     */
    label?: string;
    /**
     * Identifies the segmented control group to screen readers. Auto-generated if no `name` or `label` is provided.
     *
     * It's recommended for accessability to set this to a meaningful value.
     */
    name?: string;
    /**
     * Defines whether the selection should automatically follow focus.
     * If set to true, the arrow keys can be used to switch selection,
     * otherwise a keyboard user will need to press enter to make a selection.
     *
     * Default: `true`
     */
    followFocus?: boolean;
    /**
     * Identifies the element(s) whose contents/presence is controlled by the segmented control.
     *
     * Required as a prop on the control, or on each individual option.
     */
    'aria-controls'?: string;
    /**
     * Callback that gets called when a user makes a new selection.
     */
    onChange?: (value: string) => void;
    /**
     * Styling prop
     */
    className?: string;
}
/**
 * Component
 */
declare const SegmentedControl: React.ForwardRefExoticComponent<SegmentedControlProps & React.RefAttributes<HTMLDivElement>>;
export default SegmentedControl;
//# sourceMappingURL=SegmentedControl.d.ts.map