{"version":3,"file":"index.js","sources":["../src/Tooltip.tsx","../src/tooltipUtils.tsx"],"sourcesContent":["import React, { useEffect, useCallback, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { transparentize } from 'polished';\nimport debounce from 'lodash/debounce';\nimport Popover, {\n  PopoverProps,\n  Align as PopoverAlign,\n  Justify,\n  ElementPosition,\n} from '@leafygreen-ui/popover';\nimport {\n  useEventListener,\n  useEscapeKey,\n  useIdAllocator,\n} from '@leafygreen-ui/hooks';\nimport { css, cx } from '@leafygreen-ui/emotion';\nimport { uiColors } from '@leafygreen-ui/palette';\nimport { fontFamilies } from '@leafygreen-ui/tokens';\nimport { HTMLElementProps, isComponentType } from '@leafygreen-ui/lib';\nimport { useBaseFontSize } from '@leafygreen-ui/leafygreen-provider';\nimport { isComponentGlyph } from '@leafygreen-ui/icon';\nimport { notchPositionStyles } from './tooltipUtils';\n\n// The typographic styles below are largely copied from the Body component.\n// We can't use the Body component here due to it rendering a paragraph tag,\n// Which would conflict with any children passed to it containing a div.\nconst baseTypeStyle = css`\n  margin: unset;\n  font-family: ${fontFamilies.default};\n  color: ${uiColors.gray.dark3};\n  font-weight: 400;\n`;\n\nconst typeScale1 = css`\n  font-size: 14px;\n  line-height: 20px;\n  letter-spacing: 0px;\n`;\n\nconst typeScale2 = css`\n  font-size: 16px;\n  line-height: 24px;\n  letter-spacing: 0px;\n`;\n\nexport const TriggerEvent = {\n  Hover: 'hover',\n  Click: 'click',\n} as const;\n\ntype TriggerEvent = typeof TriggerEvent[keyof typeof TriggerEvent];\n\nexport const Mode = {\n  Light: 'light',\n  Dark: 'dark',\n} as const;\n\nexport type Mode = typeof Mode[keyof typeof Mode];\n\nexport const Align = {\n  Top: PopoverAlign.Top,\n  Bottom: PopoverAlign.Bottom,\n  Left: PopoverAlign.Left,\n  Right: PopoverAlign.Right,\n} as const;\n\nexport type Align = typeof Align[keyof typeof Align];\n\nexport { Justify };\n\nconst baseStyles = css`\n  padding: 14px 16px;\n  border-radius: 3px;\n  box-shadow: 0px 2px 4px -1px ${transparentize(0.8, uiColors.black)};\n  cursor: default;\n  overflow-wrap: break-word;\n`;\n\nconst positionRelative = css`\n  position: relative;\n`;\n\nconst colorSet = {\n  [Mode.Dark]: {\n    tooltip: css`\n      background-color: ${uiColors.gray.dark3};\n      color: ${uiColors.gray.light1};\n    `,\n    children: css`\n      color: ${uiColors.gray.light1};\n    `,\n    notch: css`\n      background-color: ${uiColors.gray.dark3};\n      box-shadow: 2px 2px 4px ${transparentize(0.9, uiColors.black)};\n    `,\n  },\n\n  [Mode.Light]: {\n    tooltip: css`\n      background-color: ${uiColors.gray.light3};\n      color: ${uiColors.gray.dark2};\n      border: 1px solid ${uiColors.gray.light2};\n    `,\n    children: css`\n      color: ${uiColors.gray.dark2};\n    `,\n    notch: css`\n      background-color: ${uiColors.gray.light3};\n      border: 1px solid ${uiColors.gray.light2};\n      box-shadow: 2px 2px 4px ${transparentize(0.9, uiColors.black)};\n    `,\n  },\n};\n\ninterface PopoverFunctionParameters {\n  align: Align;\n  justify: Justify;\n  referenceElPos: ElementPosition;\n}\n\ntype ModifiedPopoverProps = Omit<PopoverProps, 'active'>;\n\nexport type TooltipProps = Omit<\n  HTMLElementProps<'div'>,\n  keyof ModifiedPopoverProps\n> &\n  ModifiedPopoverProps & {\n    /**\n     * A slot for the element used to trigger the `Tooltip`.\n     */\n    trigger?: React.ReactElement | Function;\n\n    /**\n     * Determines if a `hover` or `click` event will trigger the opening of a `Tooltip`.\n     * @default: 'hover'\n     */\n    triggerEvent?: TriggerEvent;\n\n    /**\n     * Controls component and determines the open state of the `Tooltip`\n     * @default: `false`\n     */\n    open?: boolean;\n\n    /**\n     * Callback to change the open state of the `Tooltip`.\n     */\n    setOpen?: React.Dispatch<React.SetStateAction<boolean>>;\n\n    /**\n     * Whether the `Tooltip` will appear in dark mode.\n     * @default: false\n     */\n    darkMode?: boolean;\n\n    /**\n     * id given to `Tooltip` content.\n     */\n    id?: string;\n\n    /**\n     * Callback to determine whether or not `Tooltip` should close when user tries to close it.\n     *\n     */\n    shouldClose?: () => boolean;\n\n    /**\n     * Enables Tooltip to trigger based on the event specified by `triggerEvent`.\n     * @default: true\n     */\n    enabled?: boolean;\n  };\n\nconst stopClickPropagation = (evt: React.MouseEvent) => {\n  evt.stopPropagation();\n};\n\n/**\n * # Tooltip\n *\n * Tooltip component\n *\n * ```\n<Tooltip\n  align='top'\n  justify='start'\n  trigger={<button>trigger</button>}\n  triggerEvent='hover'\n>\n  I am an uncontrolled Tooltip!\n</Tooltip>\n```\n * @param props.children Content to appear inside of Tooltip.\n * @param props.open Boolean to describe whether or not Tooltip is open.\n * @param props.setOpen Callback to change the open state of the Tooltip.\n * @param props.darkMode Whether the Tooltip will apepar in dark mode.\n * @param props.className Classname applied to Tooltip.\n * @param props.align Alignment of Tooltip relative to trigger: `top`, `bottom`, `left`, `right`.\n * @param props.justify Justification of Tooltip relative to trigger: `start`, `middle`, `end`.\n * @param props.trigger Trigger element can be ReactNode or function.\n * @param props.triggerEvent Whether the Tooltip should be triggered by a `click` or `hover`.\n * @param props.id id given to Tooltip content.\n * @param props.usePortal Determines whether or not Tooltip will be Portaled\n * @param props.portalClassName Classname applied to root element of the portal.\n */\nfunction Tooltip({\n  open: controlledOpen,\n  setOpen: controlledSetOpen,\n  className,\n  children,\n  trigger,\n  triggerEvent = TriggerEvent.Hover,\n  darkMode = false,\n  enabled = true,\n  align = 'top',\n  justify = 'start',\n  spacing = 12,\n  id,\n  shouldClose,\n  usePortal = true,\n  portalClassName,\n  portalContainer,\n  scrollContainer,\n  popoverZIndex,\n  refEl,\n  ...rest\n}: TooltipProps) {\n  const isControlled = typeof controlledOpen === 'boolean';\n  const [uncontrolledOpen, uncontrolledSetOpen] = useState(false);\n  const size = useBaseFontSize();\n  const open = isControlled ? controlledOpen : uncontrolledOpen;\n  // typescript is not recognizing isControlled checks that controlledSetOpen exists\n  const setOpen =\n    isControlled && controlledSetOpen ? controlledSetOpen : uncontrolledSetOpen;\n\n  const [tooltipNode, setTooltipNode] = useState<HTMLDivElement | null>(null);\n\n  const existingId = id ?? tooltipNode?.id;\n  const tooltipId = useIdAllocator({ prefix: 'tooltip', id: existingId });\n\n  useEffect(() => {\n    // If consumer is using Icon or Glyph component as trigger, the tooltip will not be visible as these components do not render their children\n    if (\n      (trigger && isComponentType(trigger, 'Icon')) ||\n      isComponentGlyph(trigger)\n    ) {\n      console.warn(\n        'Using a LeafyGreenUI Icon or Glyph component as a trigger will not render a Tooltip, as these components do not render their children. To use, please wrap your trigger element in another HTML tag.',\n      );\n    }\n  }, [trigger]);\n\n  const handleClose = useCallback(() => {\n    if (typeof shouldClose !== 'function' || shouldClose()) {\n      setOpen(false);\n    }\n  }, [setOpen, shouldClose]);\n\n  const createTriggerProps = useCallback(\n    (triggerEvent: TriggerEvent, triggerProps?: any) => {\n      switch (triggerEvent) {\n        case TriggerEvent.Hover:\n          return {\n            onMouseEnter: debounce((e: MouseEvent) => {\n              triggerHandler('onMouseEnter', e);\n              setOpen(true);\n            }, 35),\n            onMouseLeave: debounce((e: MouseEvent) => {\n              triggerHandler('onMouseLeave', e);\n              handleClose();\n            }, 35),\n            onFocus: (e: MouseEvent) => {\n              triggerHandler('onFocus', e);\n              setOpen(true);\n            },\n            onBlur: (e: MouseEvent) => {\n              triggerHandler('onBlur', e);\n              handleClose();\n            },\n          };\n        case TriggerEvent.Click:\n        default:\n          return {\n            onClick: (e: MouseEvent) => {\n              // ensure that we don't close the tooltip when content inside tooltip is clicked\n              if (e.target !== tooltipNode) {\n                triggerHandler('onClick', e);\n                setOpen((curr: boolean) => !curr);\n              }\n            },\n          };\n      }\n\n      function triggerHandler(handler: string, e: MouseEvent): void {\n        // call any click handlers already on the trigger\n        if (\n          triggerProps &&\n          triggerProps[handler] &&\n          typeof triggerProps[handler] == 'function'\n        )\n          triggerProps[handler](e);\n      }\n    },\n    [handleClose, setOpen, tooltipNode],\n  );\n\n  useEscapeKey(handleClose, { enabled: open });\n\n  const handleBackdropClick = useCallback(\n    (e: MouseEvent) => {\n      /**\n       * Close the tooltip iff the clicked target (e.target) is NOT the tooltip element\n       *\n       * This handler is added to the document.\n       * No need to check whether the click target is the trigger node\n       * since clicks on that element are stopped from propogating by the <Popover>\n       */\n      if (tooltipNode && !tooltipNode.contains(e.target as HTMLElement)) {\n        handleClose();\n      }\n    },\n    [handleClose, tooltipNode],\n  );\n\n  useEventListener('click', handleBackdropClick, {\n    enabled: open && triggerEvent === 'click',\n  });\n\n  const popoverProps = {\n    refEl,\n    popoverZIndex,\n    ...(usePortal\n      ? {\n          spacing,\n          usePortal,\n          portalClassName,\n          portalContainer,\n          scrollContainer,\n        }\n      : { spacing, usePortal }),\n  };\n\n  const mode = darkMode ? Mode.Dark : Mode.Light;\n\n  const active = enabled && open;\n\n  const tooltip = (\n    <Popover\n      key=\"tooltip\"\n      active={active}\n      align={align}\n      justify={justify}\n      adjustOnMutation={true}\n      onClick={stopClickPropagation}\n      {...popoverProps}\n    >\n      {({ align, justify, referenceElPos }: PopoverFunctionParameters) => {\n        const {\n          notchContainer: notchContainerStyle,\n          notch: notchStyle,\n          tooltip: tooltipNotchStyle,\n        } = notchPositionStyles(align, justify, referenceElPos);\n\n        return (\n          <div\n            {...rest}\n            role=\"tooltip\"\n            id={tooltipId}\n            className={cx(\n              baseStyles,\n              tooltipNotchStyle,\n              colorSet[mode].tooltip,\n              className,\n            )}\n            ref={setTooltipNode}\n          >\n            <div\n              className={cx(\n                baseTypeStyle,\n                size === 16 ? typeScale2 : typeScale1,\n                colorSet[mode].children,\n              )}\n            >\n              {children}\n            </div>\n\n            <div className={notchContainerStyle}>\n              <div className={cx(notchStyle, colorSet[mode].notch)} />\n            </div>\n          </div>\n        );\n      }}\n    </Popover>\n  );\n\n  if (trigger) {\n    if (typeof trigger === 'function') {\n      return trigger({\n        ...createTriggerProps(triggerEvent),\n        className: positionRelative,\n        'aria-describedby': active ? tooltipId : undefined,\n        children: tooltip,\n      });\n    }\n\n    return React.cloneElement(trigger, {\n      ...createTriggerProps(triggerEvent, trigger.props),\n      'aria-describedby': active ? tooltipId : undefined,\n      children: (\n        <>\n          {trigger.props.children}\n          {tooltip}\n        </>\n      ),\n      className: cx(positionRelative, trigger.props.className),\n    });\n  }\n\n  return tooltip;\n}\n\nTooltip.displayName = 'Tooltip';\n\nTooltip.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  align: PropTypes.oneOf(Object.values(Align)),\n  justify: PropTypes.oneOf(Object.values(Justify)),\n  trigger: PropTypes.oneOfType([PropTypes.node, PropTypes.func]),\n  triggerEvent: PropTypes.oneOf(Object.values(TriggerEvent)),\n  darkMode: PropTypes.bool,\n  enabled: PropTypes.bool,\n  open: PropTypes.bool,\n  setOpen: PropTypes.func,\n  id: PropTypes.string,\n  shouldClose: PropTypes.func,\n  usePortal: PropTypes.bool,\n  portalClassName: PropTypes.string,\n};\n\nexport default Tooltip;\n","import { css } from '@leafygreen-ui/emotion';\nimport { Align, Justify } from '@leafygreen-ui/popover';\nimport clamp from 'lodash/clamp';\n\nexport function notchPositionStyles(\n  align: Align,\n  justify: Justify,\n  triggerRect: DOMRect | ClientRect | null,\n) {\n  if (!align || !justify || !triggerRect) {\n    return {\n      notchContainer: '',\n      notch: '',\n      tooltip: '',\n    };\n  }\n\n  const containerSize = 20;\n  const notchSize = 10;\n  const notchOverlap = -notchSize / 2;\n\n  type Styles = 'left' | 'right' | 'top' | 'bottom' | 'margin';\n  const notchStyleObj: Partial<Record<Styles, string>> = {};\n  const containerStyleObj: Partial<Record<Styles, string>> = {};\n\n  // The bounds used to clamp the notchOffset value\n  const notchOffsetLowerBound = 5;\n\n  // This number is somewhat \"magical\", but adjusted for the Tooltip alignment.\n  // Calculating the exact value needed here requires setting a ref on the Tooltip content wrapper, and getting the height / width of it. The problem was that the height / width changes when the open prop is set, causing the notch to lose its positioning before the tooltip transitions out in some cases.\n  let notchOffsetUpperBound = notchOffsetLowerBound * 2;\n\n  // The un-clamped value that would exactly center the tooltip notch relative to the trigger.\n  let notchOffsetActual: number;\n\n  // The clamped value that makes a best-attempt to center the notch relative to the trigger,\n  // while also ensuring that the notch is positioned within the bounds of the tooltip itself,\n  // and still has the appearance of an alignment.\n  let notchOffset = 0;\n\n  // Boolean derived from the notchOffsetActual and notchOffsetLowerBound that determines if the trigger\n  // is small enough to make a transformation of the tooltip itself necessary.\n  let transformPosition: boolean;\n\n  // When the trigger is smaller than the minimum offset we require to position the notch over the trigger,\n  // we calculate a transformation to apply to the entire tooltip so that the notch centers on that element.\n  // This is particularly important for things like icons, and icon buttons where without this transformation,\n  // the tooltip's notch could be positioned entirely off of the trigger.\n  let tooltipOffsetTransform = '';\n\n  switch (align) {\n    case 'top':\n    case 'bottom':\n      notchOffsetUpperBound = notchOffsetLowerBound * 3;\n      notchOffsetActual = triggerRect.width / 2 - containerSize / 2;\n      notchOffset = clamp(\n        notchOffsetActual,\n        notchOffsetLowerBound,\n        notchOffsetUpperBound,\n      );\n      transformPosition = notchOffsetActual <= notchOffsetLowerBound;\n\n      notchStyleObj.left = '0px';\n      notchStyleObj.right = '0px';\n\n      if (align === 'top') {\n        containerStyleObj.top = 'calc(100% - 1px)';\n        notchStyleObj.top = `${notchOverlap}px`;\n      } else {\n        containerStyleObj.bottom = 'calc(100% - 1px)';\n        notchStyleObj.bottom = `${notchOverlap}px`;\n      }\n\n      switch (justify) {\n        case Justify.Start:\n          containerStyleObj.left = `${notchOffset}px`;\n\n          if (transformPosition) {\n            tooltipOffsetTransform = `translateX(-${\n              notchOffsetLowerBound - notchOffsetActual\n            }px)`;\n          }\n\n          break;\n\n        case Justify.Middle:\n        case Justify.Fit:\n          containerStyleObj.left = '0px';\n          containerStyleObj.right = '0px';\n          break;\n\n        case Justify.End:\n          containerStyleObj.right = `${notchOffset}px`;\n\n          if (transformPosition) {\n            tooltipOffsetTransform = `translateX(${\n              notchOffsetLowerBound - notchOffsetActual\n            }px)`;\n          }\n\n          break;\n      }\n\n      break;\n\n    case 'left':\n    case 'right':\n      notchOffsetUpperBound = notchOffsetLowerBound * 2;\n      notchOffsetActual = triggerRect.height / 2 - containerSize / 2;\n      notchOffset = clamp(\n        notchOffsetActual,\n        notchOffsetLowerBound,\n        notchOffsetUpperBound,\n      );\n      transformPosition = notchOffsetActual <= notchOffsetLowerBound;\n\n      notchStyleObj.top = '0px';\n      notchStyleObj.bottom = '0px';\n\n      if (align === 'left') {\n        notchStyleObj.left = `${notchOverlap}px`;\n        containerStyleObj.left = '100%';\n      } else {\n        notchStyleObj.right = `${notchOverlap}px`;\n        containerStyleObj.right = '100%';\n      }\n\n      switch (justify) {\n        case Justify.Start:\n          containerStyleObj.top = `${notchOffset}px`;\n\n          if (transformPosition) {\n            tooltipOffsetTransform = `translateY(-${\n              notchOffsetLowerBound - notchOffsetActual\n            }px)`;\n          }\n\n          break;\n\n        case Justify.Middle:\n        case Justify.Fit:\n          containerStyleObj.top = '0px';\n          containerStyleObj.bottom = '0px';\n          break;\n\n        case Justify.End:\n          containerStyleObj.bottom = `${notchOffset}px`;\n\n          if (transformPosition) {\n            tooltipOffsetTransform = `translateY(${\n              notchOffsetLowerBound - notchOffsetActual\n            }px)`;\n          }\n\n          break;\n      }\n\n      break;\n  }\n\n  return {\n    notchContainer: css`\n      position: absolute;\n      width: ${containerSize}px;\n      height: ${containerSize}px;\n      overflow: hidden;\n      margin: auto;\n      pointer-events: none;\n      ${css(containerStyleObj)};\n    `,\n    notch: css`\n      ${css(notchStyleObj)};\n      position: absolute;\n      transform: rotate(45deg);\n      width: ${notchSize}px;\n      height: ${notchSize}px;\n      margin: auto;\n    `,\n    tooltip: css`\n      min-width: ${notchOffset * 2 + containerSize}px;\n      transform: ${tooltipOffsetTransform};\n    `,\n  };\n}\n"],"names":["_colorSet","_templateObject3","data","_taggedTemplateLiteral","_templateObject2","_templateObject","_templateObject11","_templateObject10","_templateObject9","_templateObject8","_templateObject7","_templateObject6","_templateObject5","_templateObject4","baseTypeStyle","css","fontFamilies","default","uiColors","gray","dark3","typeScale1","typeScale2","TriggerEvent","Hover","Click","Mode","Align","Top","PopoverAlign","Bottom","Left","Right","baseStyles","transparentize","black","positionRelative","colorSet","_defineProperty","tooltip","light1","children","notch","light3","dark2","light2","stopClickPropagation","evt","stopPropagation","Tooltip","_ref","controlledOpen","open","controlledSetOpen","setOpen","className","trigger","_ref$triggerEvent","triggerEvent","_ref$darkMode","darkMode","_ref$enabled","enabled","_ref$align","align","_ref$justify","justify","_ref$spacing","spacing","id","shouldClose","_ref$usePortal","usePortal","portalClassName","portalContainer","scrollContainer","popoverZIndex","refEl","rest","_objectWithoutProperties","isControlled","_useState2","_slicedToArray","useState","uncontrolledOpen","uncontrolledSetOpen","size","useBaseFontSize","_useState4","tooltipNode","setTooltipNode","existingId","tooltipId","useIdAllocator","prefix","useEffect","isComponentType","isComponentGlyph","console","warn","handleClose","useCallback","createTriggerProps","triggerProps","onMouseEnter","debounce","e","triggerHandler","onMouseLeave","onFocus","onBlur","onClick","target","curr","handler","useEscapeKey","handleBackdropClick","contains","useEventListener","popoverProps","_objectSpread","mode","active","___EmotionJSX","Popover","_extends","key","adjustOnMutation","_ref2","_notchPositionStyles","triggerRect","notchContainer","notchOffsetActual","transformPosition","notchStyleObj","containerStyleObj","notchOffsetUpperBound","notchOffsetLowerBound","notchOffset","tooltipOffsetTransform","width","containerSize","clamp","left","right","top","concat","bottom","Justify","Start","Middle","Fit","End","height","notchPositionStyles","referenceElPos","notchContainerStyle","notchStyle","tooltipNotchStyle","role","cx","ref","aria-describedby","undefined","React","cloneElement","props","Fragment","displayName","propTypes","PropTypes","node","string","oneOf","Object","values","oneOfType","func","bool"],"mappings":"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"}