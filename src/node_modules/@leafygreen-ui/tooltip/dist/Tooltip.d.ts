import React from 'react';
import PropTypes from 'prop-types';
import { PopoverProps, Justify } from '@leafygreen-ui/popover';
import { HTMLElementProps } from '@leafygreen-ui/lib';
export declare const TriggerEvent: {
    readonly Hover: "hover";
    readonly Click: "click";
};
declare type TriggerEvent = typeof TriggerEvent[keyof typeof TriggerEvent];
export declare const Mode: {
    readonly Light: "light";
    readonly Dark: "dark";
};
export declare type Mode = typeof Mode[keyof typeof Mode];
export declare const Align: {
    readonly Top: "top";
    readonly Bottom: "bottom";
    readonly Left: "left";
    readonly Right: "right";
};
export declare type Align = typeof Align[keyof typeof Align];
export { Justify };
declare type ModifiedPopoverProps = Omit<PopoverProps, 'active'>;
export declare type TooltipProps = Omit<HTMLElementProps<'div'>, keyof ModifiedPopoverProps> & ModifiedPopoverProps & {
    /**
     * A slot for the element used to trigger the `Tooltip`.
     */
    trigger?: React.ReactElement | Function;
    /**
     * Determines if a `hover` or `click` event will trigger the opening of a `Tooltip`.
     * @default: 'hover'
     */
    triggerEvent?: TriggerEvent;
    /**
     * Controls component and determines the open state of the `Tooltip`
     * @default: `false`
     */
    open?: boolean;
    /**
     * Callback to change the open state of the `Tooltip`.
     */
    setOpen?: React.Dispatch<React.SetStateAction<boolean>>;
    /**
     * Whether the `Tooltip` will appear in dark mode.
     * @default: false
     */
    darkMode?: boolean;
    /**
     * id given to `Tooltip` content.
     */
    id?: string;
    /**
     * Callback to determine whether or not `Tooltip` should close when user tries to close it.
     *
     */
    shouldClose?: () => boolean;
    /**
     * Enables Tooltip to trigger based on the event specified by `triggerEvent`.
     * @default: true
     */
    enabled?: boolean;
};
/**
 * # Tooltip
 *
 * Tooltip component
 *
 * ```
<Tooltip
  align='top'
  justify='start'
  trigger={<button>trigger</button>}
  triggerEvent='hover'
>
  I am an uncontrolled Tooltip!
</Tooltip>
```
 * @param props.children Content to appear inside of Tooltip.
 * @param props.open Boolean to describe whether or not Tooltip is open.
 * @param props.setOpen Callback to change the open state of the Tooltip.
 * @param props.darkMode Whether the Tooltip will apepar in dark mode.
 * @param props.className Classname applied to Tooltip.
 * @param props.align Alignment of Tooltip relative to trigger: `top`, `bottom`, `left`, `right`.
 * @param props.justify Justification of Tooltip relative to trigger: `start`, `middle`, `end`.
 * @param props.trigger Trigger element can be ReactNode or function.
 * @param props.triggerEvent Whether the Tooltip should be triggered by a `click` or `hover`.
 * @param props.id id given to Tooltip content.
 * @param props.usePortal Determines whether or not Tooltip will be Portaled
 * @param props.portalClassName Classname applied to root element of the portal.
 */
declare function Tooltip({ open: controlledOpen, setOpen: controlledSetOpen, className, children, trigger, triggerEvent, darkMode, enabled, align, justify, spacing, id, shouldClose, usePortal, portalClassName, portalContainer, scrollContainer, popoverZIndex, refEl, ...rest }: TooltipProps): any;
declare namespace Tooltip {
    var displayName: string;
    var propTypes: {
        children: PropTypes.Requireable<PropTypes.ReactNodeLike>;
        className: PropTypes.Requireable<string>;
        align: PropTypes.Requireable<import("polished/lib/types/sideKeyword").SideKeyword>;
        justify: PropTypes.Requireable<Justify>;
        trigger: PropTypes.Requireable<string | number | boolean | {} | PropTypes.ReactElementLike | PropTypes.ReactNodeArray>;
        triggerEvent: PropTypes.Requireable<TriggerEvent>;
        darkMode: PropTypes.Requireable<boolean>;
        enabled: PropTypes.Requireable<boolean>;
        open: PropTypes.Requireable<boolean>;
        setOpen: PropTypes.Requireable<(...args: any[]) => any>;
        id: PropTypes.Requireable<string>;
        shouldClose: PropTypes.Requireable<(...args: any[]) => any>;
        usePortal: PropTypes.Requireable<boolean>;
        portalClassName: PropTypes.Requireable<string>;
    };
}
export default Tooltip;
//# sourceMappingURL=Tooltip.d.ts.map