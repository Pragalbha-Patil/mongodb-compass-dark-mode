{"version":3,"file":"index.js","sources":["../src/TableContext.tsx","../src/HeaderRow.tsx","../src/TableHead.tsx","../src/SortContext.tsx","../src/TableBody.tsx","../src/FontSizeContext.tsx","../src/DarkModeContext.tsx","../src/Table.tsx","../src/styles.tsx","../src/Cell.tsx","../src/Row.tsx","../src/TableHeader.tsx"],"sourcesContent":["import React, {\n  createContext,\n  useContext,\n  useMemo,\n  useReducer,\n  useEffect,\n} from 'react';\n\nconst TableActionTypes = {\n  RegisterColumn: 'REGISTER_COLUMN_INFO',\n  SetHasNestedRows: 'SET_HAS_NESTED_ROWS',\n  SetHasRowSpan: 'SET_HAS_ROW_SPAN',\n  SetData: 'SET_DATA',\n} as const;\n\ntype TableActionTypes = typeof TableActionTypes[keyof typeof TableActionTypes];\n\nexport { TableActionTypes };\n\ninterface ActionPayload {\n  [TableActionTypes.RegisterColumn]: {\n    dataType?: DataType;\n    index: number;\n  };\n  [TableActionTypes.SetData]: Array<any>;\n  [TableActionTypes.SetHasRowSpan]: boolean;\n  [TableActionTypes.SetHasNestedRows]: boolean;\n}\n\ntype ActionMap<A extends Record<string, any>> = {\n  [Key in keyof A]: A[Key] extends undefined\n    ? {\n        type: Key;\n      }\n    : {\n        type: Key;\n        payload: A[Key];\n      };\n};\n\ntype Action = ActionMap<ActionPayload>[keyof ActionMap<ActionPayload>];\n\ntype Dispatch = (action: Action) => void;\n\nconst DataType = {\n  Number: 'number',\n  Weight: 'weight',\n  ZipCode: 'zipCode',\n  String: 'string',\n  Date: 'date',\n} as const;\n\ntype DataType = typeof DataType[keyof typeof DataType];\n\nexport { DataType };\n\nexport interface State {\n  data: Array<any>;\n  columnInfo?: Record<number, { dataType?: DataType }>;\n  hasNestedRows?: boolean;\n  hasRowSpan?: boolean;\n}\n\ninterface TableProviderInterface {\n  children: React.ReactNode;\n  data: Array<any>;\n}\n\ninterface ContextInterface {\n  state: State;\n  dispatch: Dispatch;\n}\n\nconst TableContext = createContext<ContextInterface>({\n  state: {\n    data: [],\n  },\n  dispatch: () => {},\n});\n\nexport function reducer(state: State, action: Action): State {\n  switch (action.type) {\n    case TableActionTypes.SetHasRowSpan:\n      return {\n        ...state,\n        hasRowSpan: action.payload,\n      };\n\n    case TableActionTypes.SetHasNestedRows:\n      return {\n        ...state,\n        hasNestedRows: action.payload,\n      };\n\n    case TableActionTypes.RegisterColumn:\n      return {\n        ...state,\n        columnInfo: {\n          ...state.columnInfo,\n          [action.payload.index]: {\n            dataType: action.payload.dataType,\n          },\n        },\n      };\n\n    case TableActionTypes.SetData:\n      return {\n        ...state,\n        data: action.payload,\n      };\n\n    default:\n      return state;\n  }\n}\n\nexport function TableProvider({ children, data }: TableProviderInterface) {\n  const initialState: State = {\n    data,\n    hasNestedRows: false,\n  };\n\n  const [state, dispatch] = useReducer(reducer, initialState);\n\n  useEffect(() => {\n    dispatch({\n      type: TableActionTypes.SetData,\n      payload: data,\n    });\n  }, [data]);\n\n  const contextValue = useMemo(() => {\n    return { state, dispatch };\n  }, [state, dispatch]);\n\n  return (\n    <TableContext.Provider value={contextValue}>\n      {children}\n    </TableContext.Provider>\n  );\n}\n\nexport function useTableContext() {\n  return useContext(TableContext);\n}\n","import React from 'react';\nimport { HTMLElementProps } from '@leafygreen-ui/lib';\n\nexport type HeaderRowProps = HTMLElementProps<'tr', never>;\n\nexport type HeaderRowElement = React.ReactComponentElement<typeof HeaderRow>;\n\nfunction HeaderRow({ children, className, ...rest }: HeaderRowProps) {\n  return (\n    <tr {...rest} className={className} data-testid=\"leafygreen-ui-header-row\">\n      {children}\n    </tr>\n  );\n}\n\nHeaderRow.displayName = 'HeaderRow';\n\nexport default HeaderRow;\n","import React from 'react';\nimport HeaderRow, { HeaderRowElement } from './HeaderRow';\nimport { TableProps } from './Table';\nimport { TableHeaderElement } from './TableHeader';\nimport { isComponentType } from '@leafygreen-ui/lib';\n\ntype TableHeaderProps<Shape> = Pick<TableProps<Shape>, 'columns'>;\n\nfunction TableHead<Shape>({ columns = [] }: TableHeaderProps<Shape>) {\n  const usingHeaderRow = React.useRef(false);\n\n  function createCols(array: Array<React.ReactNode>): React.ReactNode {\n    return array.map((child, index) => {\n      const tableHeaderCommonProps = {\n        key: index,\n        index,\n      };\n\n      if (isComponentType<HeaderRowElement>(child, 'HeaderRow')) {\n        usingHeaderRow.current = true;\n\n        const { children } = child?.props;\n\n        return React.cloneElement(child, {\n          children: createCols(React.Children.toArray(children)),\n        });\n      }\n\n      if (isComponentType<TableHeaderElement>(child, 'TableHeader')) {\n        return React.cloneElement(child, tableHeaderCommonProps);\n      }\n\n      return child;\n    });\n  }\n\n  const columnArray: Array<React.ReactElement> =\n    // @ts-expect-error Property 'type' does not exist on type '{}'.ts(2339)\n    columns.type === React.Fragment ||\n    isComponentType<HeaderRowElement>(columns, 'HeaderRow')\n      ? React.Children.toArray((columns as React.ReactElement).props.children)\n      : (columns as Array<any>);\n\n  const cols = createCols(columnArray);\n\n  if (usingHeaderRow.current) {\n    return <thead>{cols}</thead>;\n  }\n\n  return (\n    <thead>\n      <HeaderRow>{cols}</HeaderRow>\n    </thead>\n  );\n}\n\nexport default TableHead;\n","import React, { createContext, useContext, useMemo, useState } from 'react';\n\nexport type SortDirection = 'asc' | 'desc';\n\ninterface Sort {\n  columnId: number;\n  direction: SortDirection;\n  accessorValue?: (data: any) => string;\n  compareFn?: (a: any, b: any, direction: SortDirection) => number;\n  handleSort?: (direction: SortDirection) => void;\n}\n\ninterface ContextInterface {\n  sort?: Sort;\n  setSort: React.Dispatch<React.SetStateAction<Sort | undefined>>;\n}\n\nconst SortContext = createContext<ContextInterface>({\n  sort: undefined,\n  setSort: () => {},\n});\n\nexport function SortProvider({ children }: { children: React.ReactNode }) {\n  const [sort, setSort] = useState<Sort | undefined>(undefined);\n\n  const contextValue = useMemo(() => {\n    return { sort, setSort };\n  }, [sort, setSort]);\n\n  return (\n    <SortContext.Provider value={contextValue}>{children}</SortContext.Provider>\n  );\n}\n\nexport function useSortContext() {\n  return useContext(SortContext);\n}\n\nconst alphanumericCollator = new Intl.Collator(undefined, {\n  numeric: true,\n  sensitivity: 'base',\n});\n\nexport const getDataComparisonFunction = <T extends {}>({\n  direction,\n  accessorValue,\n  compareFn,\n}: {\n  direction: SortDirection;\n  accessorValue?: (data: T) => string;\n  compareFn?: (a: T, b: T, dir: SortDirection) => number;\n}) => {\n  if (accessorValue) {\n    return (a: T, b: T) => {\n      const aVal = accessorValue(a);\n      const bVal = accessorValue(b);\n\n      if (direction !== 'desc') {\n        return alphanumericCollator.compare(aVal, bVal);\n      }\n\n      return alphanumericCollator.compare(bVal, aVal);\n    };\n  }\n\n  if (compareFn) {\n    return (a: T, b: T) => compareFn(a, b, direction);\n  }\n\n  console.error(\n    'Error getting Table data comparison function. Please supply either an `accessorValue` or `compareFn`',\n  );\n};\n","import React, { useMemo, useCallback } from 'react';\nimport { useTableContext } from './TableContext';\nimport { getDataComparisonFunction, useSortContext } from './SortContext';\nimport { TableProps } from './Table';\n\ntype TableBodyProps<Shape> = Pick<TableProps<Shape>, 'children'>;\n\n/**\n * Hook that avoids re-rendering children when the data used to\n * render them hasn't changed, even if their ordering has changed.\n */\nfunction useRenderedChildren<Datum>(\n  data: Array<Datum>,\n  renderFunction: React.FunctionComponent<Datum>,\n  compareFn?: (a: Datum, b: Datum) => number,\n): Array<React.ReactNode> {\n  const resultMap = useMemo(() => {\n    const resultMap = new Map<Datum, React.ReactNode>();\n    data.forEach((datum, index) =>\n      resultMap.set(\n        datum,\n        <React.Fragment key={index}>{renderFunction(datum)}</React.Fragment>,\n      ),\n    );\n    return resultMap;\n  }, [data, renderFunction]);\n\n  return useMemo(() => {\n    if (!compareFn) {\n      return Array.from(resultMap.values());\n    }\n\n    return [...data].sort(compareFn).map(datum => resultMap.get(datum));\n  }, [data, resultMap, compareFn]);\n}\n\nfunction TableBody<Shape>({ children }: TableBodyProps<Shape>) {\n  const {\n    state: { data },\n  } = useTableContext();\n\n  const { sort } = useSortContext();\n\n  const compareFn = useMemo(() => {\n    if (sort) {\n      const { direction, accessorValue, compareFn } = sort;\n\n      if (compareFn) {\n        return getDataComparisonFunction({ direction, compareFn });\n      }\n\n      if (accessorValue) {\n        return getDataComparisonFunction({ direction, accessorValue });\n      }\n    }\n  }, [sort]);\n\n  const renderFunction = useCallback(datum => children({ datum }), [children]);\n\n  const rows = useRenderedChildren(data, renderFunction, compareFn);\n\n  return <tbody>{rows}</tbody>;\n}\n\nTableBody.displayName = 'TableBody';\n\nexport default TableBody;\n","import React, { createContext, useContext } from 'react';\n\ntype BaseFontSize = 14 | 16;\n\ninterface FontSizeProviderInterface {\n  baseFontSize: BaseFontSize;\n  children: React.ReactNode;\n}\n\nconst FontSizeContext = createContext<BaseFontSize>(14);\n\nexport function FontSizeProvider({\n  children,\n  baseFontSize,\n}: FontSizeProviderInterface) {\n  return (\n    <FontSizeContext.Provider value={baseFontSize}>\n      {children}\n    </FontSizeContext.Provider>\n  );\n}\n\nexport function useFontSizeContext() {\n  return useContext(FontSizeContext);\n}\n","import React, { createContext, useContext } from 'react';\n\ninterface DarkModeProviderInterface {\n  darkMode: boolean;\n  children: React.ReactNode;\n}\n\nconst DarkModeContext = createContext<boolean>(false);\n\nexport function DarkModeProvider({\n  children,\n  darkMode,\n}: DarkModeProviderInterface) {\n  return (\n    <DarkModeContext.Provider value={darkMode}>\n      {children}\n    </DarkModeContext.Provider>\n  );\n}\n\nexport function useDarkModeContext() {\n  return useContext(DarkModeContext);\n}\n","import React from 'react';\nimport debounce from 'lodash/debounce';\nimport { transparentize } from 'polished';\nimport { HTMLElementProps } from '@leafygreen-ui/lib';\nimport { cx, css } from '@leafygreen-ui/emotion';\nimport { uiColors } from '@leafygreen-ui/palette';\nimport {\n  useIsomorphicLayoutEffect,\n  useViewportSize,\n} from '@leafygreen-ui/hooks';\nimport { useBaseFontSize } from '@leafygreen-ui/leafygreen-provider';\nimport { HeaderRowProps } from './HeaderRow';\nimport { TableHeaderProps } from './TableHeader';\nimport { TableProvider } from './TableContext';\nimport TableHead from './TableHead';\nimport TableBody from './TableBody';\nimport { SortProvider } from './SortContext';\nimport { FontSizeProvider } from './FontSizeContext';\nimport { DarkModeProvider } from './DarkModeContext';\n\nconst lmShadowColor = transparentize(0.7, uiColors.black);\nconst dmShadowColor = transparentize(0.2, uiColors.black);\n\nconst containerStyle = css`\n  position: relative;\n  max-width: 100%;\n`;\n\nconst tableStyles = css`\n  border-collapse: collapse;\n  box-sizing: border-box;\n  width: 100%;\n`;\n\nconst shadow = css`\n  position: absolute;\n  top: 0;\n  bottom: 0;\n  width: 16px;\n  overflow: hidden;\n  pointer-events: none;\n\n  &:after {\n    opacity: 0;\n    content: '';\n    position: absolute;\n    top: 0;\n    bottom: 0;\n    width: 16px;\n    border-radius: 100%;\n    transition: opacity 150ms ease-in-out;\n  }\n`;\n\nconst leftShadow = (darkMode: boolean) => css`\n  left: 0;\n\n  &:after {\n    right: 100%;\n    box-shadow: 4px 0 4px ${darkMode ? dmShadowColor : lmShadowColor};\n  }\n`;\n\nconst rightShadow = (darkMode: boolean) => css`\n  right: 0;\n\n  &:after {\n    left: 100%;\n    box-shadow: -4px 0 4px ${darkMode ? dmShadowColor : lmShadowColor};\n  }\n`;\n\nconst showScroll = css`\n  &:after {\n    opacity: 1;\n  }\n`;\n\nconst ScrollState = {\n  None: 'none',\n  Left: 'left',\n  Right: 'right',\n  Both: 'both',\n} as const;\n\ntype ScrollState = typeof ScrollState[keyof typeof ScrollState];\n\ninterface TableRowInterface<Shape = {}> {\n  datum: Shape;\n}\n\nexport interface TableProps<Shape> extends HTMLElementProps<'table', never> {\n  data: Array<Shape>;\n  columns:\n    | Array<React.ReactElement<HeaderRowProps | TableHeaderProps<Shape>>>\n    | React.ReactFragment;\n\n  children: (TableRowArgs: TableRowInterface<Shape>) => JSX.Element;\n  baseFontSize?: 14 | 16;\n  darkMode?: boolean;\n}\n\nexport default function Table<Shape>({\n  columns = [],\n  data: dataProp = [],\n  children,\n  className,\n  baseFontSize: baseFontSizeProp,\n  darkMode = false,\n  ...rest\n}: TableProps<Shape>) {\n  const [scrollState, setScrollState] = React.useState<ScrollState>(\n    ScrollState.None,\n  );\n  const divRef = React.useRef<HTMLDivElement>(null);\n  const viewportSize = useViewportSize();\n\n  const providerFontSize = useBaseFontSize();\n  const normalizedProviderFontSize =\n    providerFontSize === 14 || providerFontSize === 16 ? providerFontSize : 14;\n  const baseFontSize = baseFontSizeProp ?? normalizedProviderFontSize;\n\n  useIsomorphicLayoutEffect(() => {\n    const divNode = divRef.current;\n\n    if (divNode == null) {\n      return;\n    }\n\n    if (divNode.scrollWidth > divNode.clientWidth) {\n      setScrollState(ScrollState.Right);\n    } else if (\n      viewportSize != null &&\n      divNode.getBoundingClientRect().width <= viewportSize.width\n    ) {\n      setScrollState(ScrollState.None);\n    }\n  }, [viewportSize]);\n\n  const handleScroll = (e: React.UIEvent) => {\n    const {\n      scrollWidth,\n      clientWidth: elementWidth,\n    } = e.target as HTMLDivElement;\n    const isScrollable = scrollWidth > elementWidth;\n\n    if (isScrollable) {\n      const scrollPosition = (e.target as HTMLDivElement).scrollLeft;\n      const maxPosition = scrollWidth - elementWidth;\n\n      if (scrollPosition > 0 && scrollPosition < maxPosition) {\n        setScrollState(ScrollState.Both);\n      } else if (scrollPosition > 0) {\n        setScrollState(ScrollState.Left);\n      } else if (scrollPosition < maxPosition) {\n        setScrollState(ScrollState.Right);\n      }\n    }\n  };\n\n  const debounceScroll = debounce(handleScroll, 50, { leading: true });\n\n  const onScroll: React.EventHandler<React.UIEvent> = e => {\n    e.persist();\n    debounceScroll(e);\n  };\n\n  const showLeft =\n    scrollState === ScrollState.Left || scrollState === ScrollState.Both;\n  const showRight =\n    scrollState === ScrollState.Right || scrollState === ScrollState.Both;\n\n  return (\n    <div className={containerStyle}>\n      <div\n        className={cx(shadow, leftShadow(darkMode), {\n          [showScroll]: showLeft,\n        })}\n      />\n      <div\n        className={cx(shadow, rightShadow(darkMode), {\n          [showScroll]: showRight,\n        })}\n      />\n\n      <div\n        ref={divRef}\n        onScroll={onScroll}\n        className={cx(\n          css`\n            overflow-x: auto;\n          `,\n        )}\n      >\n        <table\n          cellSpacing=\"0\"\n          cellPadding=\"0\"\n          className={cx(\n            tableStyles,\n            css`\n              border-bottom: 1px solid\n                ${darkMode ? uiColors.gray.dark1 : uiColors.gray.light2};\n            `,\n            className,\n          )}\n          {...rest}\n        >\n          <TableProvider data={dataProp}>\n            <SortProvider>\n              <FontSizeProvider baseFontSize={baseFontSize}>\n                <DarkModeProvider darkMode={darkMode}>\n                  <TableHead columns={columns} />\n                  <TableBody>{children}</TableBody>\n                </DarkModeProvider>\n              </FontSizeProvider>\n            </SortProvider>\n          </TableProvider>\n        </table>\n      </div>\n    </div>\n  );\n}\n","import { css } from '@leafygreen-ui/emotion';\n\nconst sharedStyles = css`\n  min-width: 40px;\n  padding: 8px 8px;\n  box-sizing: border-box;\n  vertical-align: middle;\n`;\n\nexport const getCommonCellStyles = (baseFontSize: 14 | 16) => {\n  if (baseFontSize === 14) {\n    return css`\n      ${sharedStyles}\n      font-size: 14px;\n      line-height: 20px;\n    `;\n  }\n\n  return css`\n    ${sharedStyles}\n    font-size: 16px;\n    line-height: 24px;\n  `;\n};\n","import React from 'react';\nimport { HTMLElementProps, createDataProp } from '@leafygreen-ui/lib';\nimport { css, cx } from '@leafygreen-ui/emotion';\nimport { getCommonCellStyles } from './styles';\nimport { useFontSizeContext } from './FontSizeContext';\n\nexport const tdInnerDiv = createDataProp('td-inner-div');\n\ninterface HeaderCellProps\n  extends HTMLElementProps<'th', HTMLTableHeaderCellElement> {\n  isHeader: true;\n}\n\ninterface TableCellProps extends HTMLElementProps<'td', HTMLTableCellElement> {\n  isHeader?: false;\n}\n\ntype CellProps = HeaderCellProps | TableCellProps;\n\nconst baseStyles = css`\n  line-height: 20px;\n  position: relative;\n`;\n\nconst thStyles = css`\n  font-weight: bold;\n`;\n\nconst innerDivStyles = css`\n  display: flex;\n  align-items: center;\n`;\n\nexport type CellElement = React.ReactComponentElement<typeof Cell>;\nconst Cell = React.forwardRef(\n  (\n    { children, className, isHeader = false, ...rest }: CellProps,\n    ref: React.Ref<any>,\n  ) => {\n    const Root = isHeader ? 'th' : 'td';\n\n    const baseFontSize = useFontSizeContext();\n\n    const props: Partial<CellProps> = {\n      ref,\n      className: cx(\n        getCommonCellStyles(baseFontSize),\n        baseStyles,\n        { [thStyles]: isHeader },\n        className,\n      ),\n    };\n\n    if (isHeader) {\n      props.scope = 'row';\n      props.role = 'rowheader';\n    }\n\n    return (\n      <Root {...props} {...rest}>\n        <div className={innerDivStyles} {...tdInnerDiv.prop}>\n          {children}\n        </div>\n      </Root>\n    );\n  },\n);\n\nCell.displayName = 'Cell';\n\nexport default Cell;\n","import React, { useState, useEffect, useRef, useMemo } from 'react';\nimport useSSR from 'use-ssr';\nimport { Transition } from 'react-transition-group';\nimport IconButton from '@leafygreen-ui/icon-button';\nimport ChevronRightIcon from '@leafygreen-ui/icon/dist/ChevronRight';\nimport ChevronDownIcon from '@leafygreen-ui/icon/dist/ChevronDown';\nimport { isComponentType, HTMLElementProps } from '@leafygreen-ui/lib';\nimport { css, cx } from '@leafygreen-ui/emotion';\nimport { uiColors } from '@leafygreen-ui/palette';\nimport { useIdAllocator } from '@leafygreen-ui/hooks';\nimport { useTableContext, TableActionTypes, DataType } from './TableContext';\nimport { CellElement, tdInnerDiv } from './Cell';\nimport { useDarkModeContext } from './DarkModeContext';\nimport { TransitionStatus } from 'react-transition-group/Transition';\n\n/**\n * Types & Constants\n */\nconst Mode = {\n  Light: 'light',\n  Dark: 'dark',\n} as const;\n\ntype Mode = typeof Mode[keyof typeof Mode];\n\nconst transitionTime = 200;\n\n/**\n * Styles\n */\nconst iconButtonMargin = css`\n  margin-right: 4px;\n  margin-left: -8px;\n`;\n\nconst modeStyles = {\n  [Mode.Light]: {\n    rowStyle: css`\n      --lg-table-row-border-color: ${uiColors.gray.light2};\n      color: ${uiColors.gray.dark2};\n    `,\n\n    altColor: css`\n      &:nth-of-type(even) {\n        background-color: ${uiColors.gray.light3};\n      }\n    `,\n\n    disabledStyle: css`\n      background-color: ${uiColors.gray.light2};\n      color: ${uiColors.gray.base};\n      cursor: not-allowed;\n      border-top: 1px solid ${uiColors.gray.light1};\n      border-bottom: 1px solid ${uiColors.gray.light1};\n    `,\n  },\n\n  [Mode.Dark]: {\n    rowStyle: css`\n      --lg-table-row-border-color: ${uiColors.gray.dark1};\n      background-color: ${uiColors.gray.dark3};\n      color: ${uiColors.gray.light3};\n    `,\n\n    altColor: css`\n      &:nth-of-type(even) {\n        background-color: ${uiColors.gray.dark2};\n      }\n    `,\n\n    disabledStyle: css`\n      background-color: ${uiColors.gray.dark1};\n      color: ${uiColors.gray.base};\n      cursor: not-allowed;\n      border-top: 1px solid ${uiColors.gray.base};\n      border-bottom: 1px solid ${uiColors.gray.base};\n    `,\n  },\n};\n\nconst rowStyle = css`\n  --lg-min-cell-height: 40px;\n  border-top: 1px solid var(--lg-table-row-border-color);\n\n  & > td > ${tdInnerDiv.selector} {\n    min-height: var(--lg-min-cell-height);\n    max-height: unset;\n  }\n`;\n\nconst hideRow = css`\n  opacity: 0;\n`;\n\nconst nestedRowInitialStyle = css`\n  transform-origin: 50% 0%;\n  border-color: var(--lg-table-row-border-color);\n  opacity: 0;\n  transition: ${transitionTime}ms ease-in-out;\n  transition-property: border-color, opacity;\n\n  & > td {\n    transition: ${transitionTime}ms ease-in-out;\n    transition-property: padding-block;\n\n    & > ${tdInnerDiv.selector} {\n      overflow: hidden;\n      transition: ${transitionTime}ms ease-in-out;\n      transition-property: min-height, max-height;\n    }\n  }\n`;\n\nconst hiddenRowStyles = css`\n  opacity: 0;\n  border-color: transparent;\n\n  & > td {\n    padding-block: 0;\n\n    & > ${tdInnerDiv.selector} {\n      min-height: 0px;\n      max-height: 0px;\n    }\n  }\n`;\n\nconst transitionStyles = (state: TransitionStatus, height?: number): string => {\n  switch (state) {\n    case 'entered':\n      return css`\n        opacity: 1;\n        & > td {\n          padding-block: 8px;\n\n          & > ${tdInnerDiv.selector} {\n            min-height: var(--lg-min-cell-height);\n            max-height: max(var(--lg-min-cell-height), ${height}px);\n          }\n        }\n      `;\n    default:\n      return hiddenRowStyles;\n  }\n};\n\nfunction styleColumn(index: string, dataType?: DataType) {\n  let justify;\n\n  if (dataType === DataType.Number) {\n    justify = 'flex-end';\n  } else {\n    justify = 'flex-start';\n  }\n\n  return css`\n    & td:nth-child(${index}) > div {\n      justify-content: ${justify};\n    }\n  `;\n}\n\nfunction getIndentLevelStyle(indentLevel: number) {\n  return css`\n    & > td:nth-child(1) {\n      padding-left: ${8 + indentLevel * 16}px;\n    }\n  `;\n}\n\ninterface RowProps extends HTMLElementProps<'tr', HTMLTableRowElement> {\n  expanded?: boolean;\n  disabled?: boolean;\n  indentLevel?: number;\n  isAnyAncestorCollapsed?: boolean;\n}\n\ntype RowElement = React.ReactComponentElement<\n  typeof Row,\n  React.ComponentPropsWithRef<typeof Row>\n>;\n\nconst Row = React.forwardRef(\n  (\n    {\n      expanded = false,\n      disabled = false,\n      indentLevel = 0,\n      isAnyAncestorCollapsed: isAnyAncestorCollapsedProp,\n      children,\n      className,\n      ...rest\n    }: RowProps,\n    ref: React.Ref<any>,\n  ) => {\n    const { isBrowser } = useSSR();\n    const {\n      state: { data, columnInfo, hasNestedRows, hasRowSpan },\n      dispatch: tableDispatch,\n    } = useTableContext();\n    const darkMode = useDarkModeContext();\n    const mode = darkMode ? Mode.Dark : Mode.Light;\n\n    const indexRef = useRef(useIdAllocator({ prefix: 'row' }));\n    const [isExpanded, setIsExpanded] = useState(expanded);\n    const nestedRowNodeRef = useRef<HTMLTableRowElement>(null);\n\n    const [nestedRowHeight, setNestedRowHeight] = useState(0);\n    useEffect(() => {\n      if (nestedRowNodeRef && nestedRowNodeRef.current) {\n        const innerSpan: HTMLSpanElement | null = nestedRowNodeRef.current.querySelector(\n          `${tdInnerDiv.selector} > span`,\n        );\n\n        if (innerSpan && innerSpan.offsetHeight) {\n          setNestedRowHeight(innerSpan.offsetHeight);\n        }\n      }\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [nestedRowNodeRef.current, isExpanded]);\n\n    useEffect(() => {\n      let shouldDispatchHasNestedRows = false;\n      let shouldDispatchHasRowSpan = false;\n\n      if (hasNestedRows && hasRowSpan) {\n        return;\n      }\n\n      React.Children.forEach(children, child => {\n        if (\n          isComponentType<RowElement>(child, 'Row') &&\n          !shouldDispatchHasNestedRows &&\n          !hasNestedRows\n        ) {\n          shouldDispatchHasNestedRows = true;\n        }\n\n        if (\n          isComponentType<CellElement>(child, 'Cell') &&\n          child.props.rowSpan &&\n          child.props.rowSpan > 1 &&\n          !hasRowSpan &&\n          !shouldDispatchHasRowSpan\n        ) {\n          shouldDispatchHasRowSpan = true;\n        }\n      });\n\n      if (\n        shouldDispatchHasNestedRows &&\n        hasNestedRows !== shouldDispatchHasNestedRows\n      ) {\n        tableDispatch({\n          type: TableActionTypes.SetHasNestedRows,\n          payload: true,\n        });\n      }\n\n      if (shouldDispatchHasRowSpan && hasRowSpan !== shouldDispatchHasRowSpan) {\n        tableDispatch({\n          type: TableActionTypes.SetHasRowSpan,\n          payload: true,\n        });\n      }\n    }, [children, hasNestedRows, hasRowSpan, tableDispatch, data]);\n\n    // Render any nested rows and their transition group\n    const { rowHasNestedRows, renderedTransitionGroup } = useMemo(() => {\n      const renderedNestedRows: Array<React.ReactElement> = [];\n      const rowHasNestedRows = React.Children.toArray(children).some(child =>\n        isComponentType<RowElement>(child, 'Row'),\n      );\n\n      const shouldTransitionGroupBeVisible =\n        isExpanded && !isAnyAncestorCollapsedProp;\n\n      // We don't need the transition group except on the client here, and rendering this bit on the server breaks rendering these rows.\n      const renderedTransitionGroup = isBrowser ? (\n        <Transition\n          in={shouldTransitionGroupBeVisible}\n          timeout={{\n            enter: 0,\n            exit: transitionTime,\n          }}\n          nodeRef={nestedRowNodeRef}\n        >\n          {state =>\n            React.Children.map(children, (child, index) => {\n              if (child != null && isComponentType<RowElement>(child, 'Row')) {\n                return React.cloneElement(child, {\n                  ref: nestedRowNodeRef,\n                  isAnyAncestorCollapsed:\n                    isAnyAncestorCollapsedProp || !isExpanded,\n                  indentLevel: indentLevel + 1,\n                  key: `${indexRef.current}-${indentLevel}-${index}`,\n                  className: cx(\n                    nestedRowInitialStyle,\n                    transitionStyles(state, nestedRowHeight),\n                    `transition-${state}`,\n                  ),\n                });\n              }\n            })\n          }\n        </Transition>\n      ) : (\n        renderedNestedRows\n      );\n\n      return { rowHasNestedRows, renderedNestedRows, renderedTransitionGroup };\n    }, [\n      children,\n      isExpanded,\n      isAnyAncestorCollapsedProp,\n      isBrowser,\n      indentLevel,\n      nestedRowHeight,\n    ]);\n\n    const renderedChildren = useMemo(() => {\n      const renderedChildren: Array<React.ReactElement> = [];\n\n      React.Children.forEach(children, (child, index) => {\n        if (isComponentType<CellElement>(child, 'Cell')) {\n          if (child.props.children == null) {\n            return null;\n          }\n\n          renderedChildren.push(\n            React.cloneElement(child, {\n              children: <span>{child.props.children}</span>,\n              key: `${indexRef.current}-${index}`,\n            }),\n          );\n        }\n      });\n\n      if (rowHasNestedRows) {\n        const Icon = isExpanded ? ChevronDownIcon : ChevronRightIcon;\n\n        const chevronButton = (\n          <IconButton\n            onClick={() => setIsExpanded(curr => !curr)}\n            aria-label={isExpanded ? 'Collapse row' : 'Expand row'}\n            aria-expanded={isExpanded}\n            className={iconButtonMargin}\n            darkMode={darkMode}\n          >\n            <Icon\n              aria-hidden\n              color={darkMode ? uiColors.gray.base : uiColors.gray.dark2}\n            />\n          </IconButton>\n        );\n        renderedChildren[0] = React.cloneElement(renderedChildren[0], {\n          children: (\n            <>\n              {chevronButton}\n              <span>{renderedChildren[0].props.children}</span>\n            </>\n          ),\n          key: `${indexRef.current}-${renderedChildren[0].props.children}`,\n        });\n      }\n\n      return renderedChildren;\n    }, [children, rowHasNestedRows, isExpanded, setIsExpanded, darkMode]);\n\n    const shouldAltRowColor =\n      data && data.length >= 10 && hasNestedRows != null && !hasNestedRows;\n\n    const alignmentStyles = columnInfo\n      ? Object.entries(columnInfo).map(([key, { dataType }]) =>\n          styleColumn(key, dataType),\n        )\n      : [''];\n\n    const rowClassName = cx(\n      rowStyle,\n      modeStyles[mode].rowStyle,\n      getIndentLevelStyle(indentLevel),\n      [...alignmentStyles],\n      {\n        // Hide the row until we can apply correct alignment to cells.\n        [hideRow]: !columnInfo,\n        [modeStyles[mode].altColor]: shouldAltRowColor,\n        [modeStyles[mode].disabledStyle]: disabled,\n      },\n      className,\n    );\n\n    return (\n      <>\n        <tr\n          role=\"row\"\n          className={rowClassName}\n          aria-disabled={disabled}\n          ref={ref}\n          key={indexRef.current}\n          {...rest}\n        >\n          {renderedChildren}\n        </tr>\n\n        {renderedTransitionGroup}\n      </>\n    );\n  },\n);\n\nRow.displayName = 'Row';\n\nexport default Row;\n","import React from 'react';\nimport SortAscendingIcon from '@leafygreen-ui/icon/dist/SortAscending';\nimport SortDescendingIcon from '@leafygreen-ui/icon/dist/SortDescending';\nimport UnsortedIcon from '@leafygreen-ui/icon/dist/Unsorted';\nimport IconButton from '@leafygreen-ui/icon-button';\nimport { css, cx } from '@leafygreen-ui/emotion';\nimport { uiColors } from '@leafygreen-ui/palette';\nimport { getCommonCellStyles } from './styles';\nimport { SortDirection, useSortContext } from './SortContext';\nimport { useFontSizeContext } from './FontSizeContext';\nimport { useTableContext, TableActionTypes, DataType } from './TableContext';\nimport { enforceExhaustive } from '@leafygreen-ui/lib';\nimport { useDarkModeContext } from './DarkModeContext';\n\nconst Mode = {\n  Light: 'light',\n  Dark: 'dark',\n} as const;\n\ntype Mode = typeof Mode[keyof typeof Mode];\n\nconst modeStyles = {\n  [Mode.Light]: {\n    thStyle: css`\n      border-color: ${uiColors.gray.light2};\n    `,\n    labelStyle: css`\n      color: ${uiColors.gray.dark2};\n    `,\n    glyphColor: css`\n      color: ${uiColors.blue.base};\n    `,\n  },\n\n  [Mode.Dark]: {\n    thStyle: css`\n      background-color: ${uiColors.gray.dark3};\n      border-color: ${uiColors.gray.dark1};\n    `,\n    labelStyle: css`\n      color: ${uiColors.gray.light3};\n    `,\n    glyphColor: css`\n      color: ${uiColors.blue.light1};\n    `,\n  },\n};\n\nconst thStyle = css`\n  border-width: 0px 1px 3px 1px;\n  border-style: solid;\n`;\n\nconst flexDisplay = css`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  min-height: 32px;\n`;\n\nconst labelStyle = css`\n  padding-right: 4px;\n`;\n\nconst glyphMap = {\n  unsorted: UnsortedIcon,\n  asc: SortDescendingIcon,\n  desc: SortAscendingIcon,\n} as const;\n\ntype NormalizedAccessor<T extends string | Function> = T extends string\n  ? <U>(data: U) => T extends keyof U ? U[T] : undefined\n  : T;\nexport function normalizeAccessor<T extends string | Function>(\n  accessor: T,\n): NormalizedAccessor<T> {\n  let accessorFn = accessor as NormalizedAccessor<T>;\n\n  if (typeof accessor === 'string') {\n    if (accessor.includes('.')) {\n      const accessorArr = accessor.split('.');\n\n      accessorFn = ((data: any) => {\n        return accessorArr.reduce((obj, access) => {\n          return obj[access];\n        }, data);\n      }) as NormalizedAccessor<T>;\n    } else {\n      accessorFn = ((data: any) => data[accessor]) as NormalizedAccessor<T>;\n    }\n  }\n\n  return accessorFn;\n}\n\ninterface TableHeaderInterface<Shape> {\n  /**\n   * The label of the column\n   */\n  label: React.ReactElement | string;\n\n  /**\n   * The index of the column\n   */\n  index?: number;\n\n  /**\n   * Callback fired when the header is clicked\n   */\n  onClick?: (\n    colId: number,\n    accessorValue: ((data: any) => string) | string,\n  ) => void;\n\n  /**\n   * A callback to define which property of the data structure to sort on\n   */\n  sortBy?: ((data: Shape) => string) | string;\n\n  /**\n   * A callback to provide more customization in column sorting.\n   * This callback has a similar signature to the Array.sort method,\n   * with the addition of a `direction` parameter, which has values `asc` or `desc`.\n   *\n   * Pin a row to the top by returning -1 if `a` matches, and 1 if `b` matches the desired row\n   */\n  compareFn?: (a: Shape, b: Shape, direction: SortDirection) => number;\n\n  /**\n   * A callback that gets called when a user initiates sort on the column.\n   * Internal sorting is disabled when this callback is provided.\n   */\n  handleSort?: (direction: SortDirection) => void;\n\n  /**\n   * The type of data as a `DataType`\n   */\n  dataType?: DataType;\n}\n\nexport type TableHeaderProps<Shape> = Omit<\n  React.ComponentPropsWithoutRef<'th'>,\n  keyof TableHeaderInterface<Shape>\n> &\n  TableHeaderInterface<Shape>;\n\nexport type TableHeaderElement = React.ReactComponentElement<\n  typeof TableHeader\n>;\n\nfunction TableHeader<Shape>({\n  label,\n  onClick,\n  index,\n  className,\n  dataType,\n  sortBy,\n  compareFn,\n  handleSort,\n  ...rest\n}: TableHeaderProps<Shape>) {\n  const { dispatch } = useTableContext();\n  const { sort, setSort } = useSortContext();\n  const baseFontSize = useFontSizeContext();\n  const darkMode = useDarkModeContext();\n\n  const mode = darkMode ? Mode.Dark : Mode.Light;\n\n  React.useEffect(() => {\n    if (typeof index === 'number') {\n      dispatch({\n        type: TableActionTypes.RegisterColumn,\n        payload: {\n          // Offsetting 0-index\n          index: index + 1,\n          dataType,\n        },\n      });\n    }\n  }, [index, dataType, dispatch]);\n\n  const normalizedAccessor = sortBy && normalizeAccessor(sortBy);\n  const isSortable = !!(sortBy || compareFn || handleSort);\n\n  const sortDirection = sort && sort.columnId === index ? sort.direction : null;\n  const glyph: 'unsorted' | SortDirection = sortDirection ?? 'unsorted';\n  const Glyph = glyphMap[glyph];\n\n  const sortRows = () => {\n    if (typeof index === 'number' && isSortable) {\n      const newDirection: SortDirection =\n        index === sort?.columnId\n          ? sort.direction === 'asc'\n            ? 'desc'\n            : 'asc'\n          : 'desc';\n\n      setSort(prevSort => {\n        return {\n          columnId: index,\n          direction: newDirection,\n          accessorValue: normalizedAccessor || undefined,\n          compareFn,\n        };\n      });\n\n      handleSort?.(newDirection);\n    }\n  };\n\n  let ariaSort: React.AriaAttributes['aria-sort'];\n\n  switch (sortDirection) {\n    case 'asc':\n      ariaSort = 'ascending';\n      break;\n    case 'desc':\n      ariaSort = 'descending';\n      break;\n    case null:\n      ariaSort = 'none';\n      break;\n    default:\n      enforceExhaustive(sortDirection);\n  }\n\n  return (\n    <th\n      role=\"columnheader\"\n      scope=\"col\"\n      aria-sort={ariaSort}\n      {...rest}\n      className={cx(\n        thStyle,\n        getCommonCellStyles(baseFontSize),\n        modeStyles[mode].thStyle,\n        className,\n      )}\n    >\n      <div className={flexDisplay}>\n        <span className={cx(labelStyle, modeStyles[mode].labelStyle)}>\n          {label}\n        </span>\n        {isSortable && (\n          <IconButton aria-label=\"sort\" onClick={sortRows} darkMode={darkMode}>\n            <Glyph\n              size=\"small\"\n              title={`${glyph}-${index}`}\n              className={cx({\n                [modeStyles[mode].glyphColor]:\n                  glyph === 'asc' || glyph === 'desc',\n              })}\n            />\n          </IconButton>\n        )}\n      </div>\n    </th>\n  );\n}\n\nTableHeader.displayName = 'TableHeader';\n\nexport default TableHeader;\n"],"names":["TableActionTypes","DataType","Number","Weight","ZipCode","String","Date","TableContext","createContext","state","data","dispatch","reducer","action","type","_objectSpread","hasRowSpan","payload","hasNestedRows","columnInfo","_defineProperty","index","dataType","TableProvider","_ref","children","initialState","_useReducer2","_slicedToArray","useReducer","useEffect","contextValue","useMemo","___EmotionJSX","Provider","value","useTableContext","useContext","_excluded","HeaderRow","className","rest","_objectWithoutProperties","_extends","data-testid","TableHead","_ref$columns","columns","usingHeaderRow","React","useRef","cols","createCols","array","map","child","tableHeaderCommonProps","key","isComponentType","current","props","cloneElement","Children","toArray","Fragment","displayName","SortContext","sort","undefined","setSort","SortProvider","_useState2","useState","useSortContext","alphanumericCollator","Intl","Collator","numeric","sensitivity","getDataComparisonFunction","_ref2","direction","accessorValue","compareFn","a","b","aVal","bVal","compare","console","error","TableBody","_compareFn","rows","renderFunction","resultMap","Map","forEach","datum","set","_toConsumableArray","get","Array","from","values","useRenderedChildren","useCallback","FontSizeContext","FontSizeProvider","baseFontSize","useFontSizeContext","DarkModeContext","DarkModeProvider","darkMode","useDarkModeContext","_templateObject","_templateObject2","_templateObject3","_templateObject4","_templateObject5","_templateObject6","_templateObject7","_templateObject8","lmShadowColor","transparentize","uiColors","black","dmShadowColor","containerStyle","css","_taggedTemplateLiteral","tableStyles","shadow","leftShadow","rightShadow","showScroll","ScrollState","sharedStyles","getCommonCellStyles","tdInnerDiv","createDataProp","baseStyles","thStyles","innerDivStyles","Cell","forwardRef","ref","_ref$isHeader","isHeader","Root","cx","scope","role","prop","_modeStyles","_templateObject9","_templateObject10","_templateObject11","_templateObject12","_templateObject13","_templateObject14","Mode","transitionTime","iconButtonMargin","modeStyles","rowStyle","gray","light2","dark2","altColor","light3","disabledStyle","base","light1","dark1","dark3","selector","hideRow","nestedRowInitialStyle","hiddenRowStyles","transitionStyles","height","Row","_cx","_ref$expanded","expanded","_ref$disabled","disabled","_ref$indentLevel","indentLevel","isAnyAncestorCollapsedProp","isAnyAncestorCollapsed","isBrowser","useSSR","_useTableContext","_useTableContext$stat","tableDispatch","mode","indexRef","useIdAllocator","prefix","isExpanded","setIsExpanded","nestedRowNodeRef","_useState4","nestedRowHeight","setNestedRowHeight","innerSpan","querySelector","concat","offsetHeight","shouldDispatchHasNestedRows","shouldDispatchHasRowSpan","rowSpan","_useMemo","renderedNestedRows","rowHasNestedRows","some","shouldTransitionGroupBeVisible","renderedTransitionGroup","Transition","in","timeout","enter","exit","nodeRef","renderedChildren","push","Icon","ChevronDownIcon","ChevronRightIcon","chevronButton","IconButton","onClick","curr","aria-label","aria-expanded","aria-hidden","color","shouldAltRowColor","length","alignmentStyles","Object","entries","_ref3","justify","styleColumn","rowClassName","getIndentLevelStyle","aria-disabled","thStyle","labelStyle","glyphColor","blue","flexDisplay","glyphMap","unsorted","UnsortedIcon","asc","SortDescendingIcon","desc","SortAscendingIcon","TableHeader","label","sortBy","handleSort","_useSortContext","ariaSort","normalizedAccessor","accessor","accessorFn","includes","accessorArr","split","reduce","obj","access","normalizeAccessor","isSortable","sortDirection","columnId","glyph","Glyph","enforceExhaustive","aria-sort","newDirection","prevSort","size","title","_ref$data","dataProp","baseFontSizeProp","_ref$darkMode","_React$useState2","scrollState","setScrollState","divRef","viewportSize","useViewportSize","providerFontSize","useBaseFontSize","useIsomorphicLayoutEffect","divNode","scrollWidth","clientWidth","getBoundingClientRect","width","debounceScroll","debounce","e","target","elementWidth","scrollPosition","scrollLeft","maxPosition","leading","showLeft","showRight","onScroll","persist","cellSpacing","cellPadding"],"mappings":"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"}