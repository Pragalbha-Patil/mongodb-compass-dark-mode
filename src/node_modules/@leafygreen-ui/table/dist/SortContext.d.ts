import React from 'react';
export declare type SortDirection = 'asc' | 'desc';
interface Sort {
    columnId: number;
    direction: SortDirection;
    accessorValue?: (data: any) => string;
    compareFn?: (a: any, b: any, direction: SortDirection) => number;
    handleSort?: (direction: SortDirection) => void;
}
interface ContextInterface {
    sort?: Sort;
    setSort: React.Dispatch<React.SetStateAction<Sort | undefined>>;
}
export declare function SortProvider({ children }: {
    children: React.ReactNode;
}): JSX.Element;
export declare function useSortContext(): ContextInterface;
export declare const getDataComparisonFunction: <T extends {}>({ direction, accessorValue, compareFn, }: {
    direction: SortDirection;
    accessorValue?: ((data: T) => string) | undefined;
    compareFn?: ((a: T, b: T, dir: SortDirection) => number) | undefined;
}) => ((a: T, b: T) => number) | undefined;
export {};
//# sourceMappingURL=SortContext.d.ts.map