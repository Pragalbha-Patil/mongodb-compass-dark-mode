import React from 'react';
declare const TableActionTypes: {
    readonly RegisterColumn: "REGISTER_COLUMN_INFO";
    readonly SetHasNestedRows: "SET_HAS_NESTED_ROWS";
    readonly SetHasRowSpan: "SET_HAS_ROW_SPAN";
    readonly SetData: "SET_DATA";
};
declare type TableActionTypes = typeof TableActionTypes[keyof typeof TableActionTypes];
export { TableActionTypes };
interface ActionPayload {
    [TableActionTypes.RegisterColumn]: {
        dataType?: DataType;
        index: number;
    };
    [TableActionTypes.SetData]: Array<any>;
    [TableActionTypes.SetHasRowSpan]: boolean;
    [TableActionTypes.SetHasNestedRows]: boolean;
}
declare type ActionMap<A extends Record<string, any>> = {
    [Key in keyof A]: A[Key] extends undefined ? {
        type: Key;
    } : {
        type: Key;
        payload: A[Key];
    };
};
declare type Action = ActionMap<ActionPayload>[keyof ActionMap<ActionPayload>];
declare type Dispatch = (action: Action) => void;
declare const DataType: {
    readonly Number: "number";
    readonly Weight: "weight";
    readonly ZipCode: "zipCode";
    readonly String: "string";
    readonly Date: "date";
};
declare type DataType = typeof DataType[keyof typeof DataType];
export { DataType };
export interface State {
    data: Array<any>;
    columnInfo?: Record<number, {
        dataType?: DataType;
    }>;
    hasNestedRows?: boolean;
    hasRowSpan?: boolean;
}
interface TableProviderInterface {
    children: React.ReactNode;
    data: Array<any>;
}
interface ContextInterface {
    state: State;
    dispatch: Dispatch;
}
export declare function reducer(state: State, action: Action): State;
export declare function TableProvider({ children, data }: TableProviderInterface): JSX.Element;
export declare function useTableContext(): ContextInterface;
//# sourceMappingURL=TableContext.d.ts.map