{"version":3,"file":"index.js","sources":["../src/TextArea.tsx"],"sourcesContent":["import React, { useState } from 'react';\nimport { Either, HTMLElementProps } from '@leafygreen-ui/lib';\nimport PropTypes from 'prop-types';\nimport { css, cx } from '@leafygreen-ui/emotion';\nimport InteractionRing from '@leafygreen-ui/interaction-ring';\nimport { uiColors } from '@leafygreen-ui/palette';\nimport { spacing, fontFamilies } from '@leafygreen-ui/tokens';\nimport { useIdAllocator, useValidation } from '@leafygreen-ui/hooks';\nimport { Description, Label } from '@leafygreen-ui/typography';\n\nexport const State = {\n  None: 'none',\n  Error: 'error',\n} as const;\n\nexport type State = typeof State[keyof typeof State];\n\nconst Mode = {\n  Light: 'light',\n  Dark: 'dark',\n} as const;\n\ntype Mode = typeof Mode[keyof typeof Mode];\n\nconst containerStyles = css`\n  display: flex;\n  flex-direction: column;\n`;\n\nconst textAreaStyle = css`\n  width: 100%;\n  min-height: ${spacing[6]}px;\n  resize: none;\n  border-radius: 4px;\n  margin: 0;\n  padding: 10px 12px 1px 12px;\n  font-size: 14px;\n  font-weight: normal;\n  font-family: ${fontFamilies.default};\n  line-height: 16px;\n  z-index: 1;\n  border: 1px solid;\n  transition: border-color 150ms ease-in-out;\n\n  &:focus {\n    outline: none;\n  }\n\n  &:disabled {\n    cursor: not-allowed;\n  }\n`;\n\nconst errorMessageStyle = css`\n  font-size: 14px;\n  height: 20px;\n  padding-top: 4px;\n  font-weight: normal;\n`;\n\ninterface ColorSets {\n  defaultBorder: string;\n  textArea: string;\n  errorBorder: string;\n  errorMessage: string;\n}\n\nconst colorSets: Record<Mode, ColorSets> = {\n  [Mode.Light]: {\n    defaultBorder: css`\n      border-color: ${uiColors.gray.light1};\n    `,\n    textArea: css`\n      color: ${uiColors.gray.dark3};\n      background-color: ${uiColors.white};\n      border-color: ${uiColors.gray.light1};\n\n      &:focus {\n        border-color: ${uiColors.white}; // same as background color\n      }\n\n      &:disabled {\n        color: ${uiColors.gray.base};\n        background-color: ${uiColors.gray.light2};\n      }\n    `,\n    errorBorder: css`\n      border-color: ${uiColors.red.base};\n    `,\n    errorMessage: css`\n      color: ${uiColors.red.base};\n    `,\n  },\n  [Mode.Dark]: {\n    defaultBorder: css`\n      border-color: #394f5a;\n    `,\n\n    textArea: css`\n      color: ${uiColors.white};\n      background-color: #394f5a;\n      border-color: #394f5a;\n\n      &:focus {\n        border-color: #394f5a; // same as background color\n      }\n\n      &:disabled {\n        color: ${uiColors.gray.dark1};\n        background-color: #263843;\n      }\n    `,\n\n    errorBorder: css`\n      border-color: #ef8d6f;\n    `,\n\n    errorMessage: css`\n      color: #ef8d6f;\n    `,\n  },\n};\n\ntype BaseTextAreaProps = HTMLElementProps<'textarea', HTMLTextAreaElement> & {\n  id?: string;\n  darkMode?: boolean;\n  label?: string | null;\n  description?: string;\n  state?: State;\n  errorMessage?: string;\n  handleValidation?: (value: string) => void;\n  /**\n   * Callback to be executed when the input stops being focused.\n   */\n  onBlur?: React.FocusEventHandler<HTMLTextAreaElement>;\n\n  /**\n   * Callback to be executed when the value of the input field changes.\n   */\n  onChange?: React.ChangeEventHandler<HTMLTextAreaElement>;\n};\n\ntype AriaLabels = 'label' | 'aria-labelledby';\ntype TextAreaProps = Either<BaseTextAreaProps, AriaLabels>;\n\nconst TextArea: React.ComponentType<\n  React.PropsWithRef<TextAreaProps>\n> = React.forwardRef(function TextArea(\n  {\n    label,\n    description,\n    className,\n    errorMessage,\n    darkMode = false,\n    disabled = false,\n    state = State.None,\n    id: idProp,\n    value: controlledValue,\n    onChange,\n    onBlur,\n    handleValidation,\n    'aria-labelledby': ariaLabelledby,\n    ...rest\n  }: TextAreaProps,\n  forwardedRef: React.Ref<HTMLTextAreaElement>,\n) {\n  const id = useIdAllocator({ prefix: 'textarea', id: idProp });\n  const mode = darkMode ? Mode.Dark : Mode.Light;\n\n  const isControlled = typeof controlledValue === 'string';\n  const [uncontrolledValue, setValue] = useState('');\n  const value = isControlled ? controlledValue : uncontrolledValue;\n\n  // Validation\n  const validation = useValidation<HTMLTextAreaElement>(handleValidation);\n\n  const onBlurHandler: React.FocusEventHandler<HTMLTextAreaElement> = e => {\n    if (onBlur) {\n      onBlur(e);\n    }\n\n    validation.onBlur(e);\n  };\n\n  const onValueChange: React.ChangeEventHandler<HTMLTextAreaElement> = e => {\n    if (onChange) {\n      onChange(e);\n    }\n\n    if (!isControlled) {\n      setValue(e.target.value);\n    }\n\n    validation.onChange(e);\n  };\n\n  if (!label && !ariaLabelledby) {\n    console.error(\n      'For screen-reader accessibility, label or aria-labelledby must be provided to TextArea.',\n    );\n  }\n\n  return (\n    <div className={cx(containerStyles, className)}>\n      {label && (\n        <Label darkMode={darkMode} htmlFor={id} disabled={disabled}>\n          {label}\n        </Label>\n      )}\n      {description && (\n        <Description darkMode={darkMode}>{description}</Description>\n      )}\n      <InteractionRing\n        darkMode={darkMode}\n        disabled={disabled}\n        ignoreKeyboardContext={true}\n      >\n        <textarea\n          {...rest}\n          ref={forwardedRef}\n          title={label != null ? label : undefined}\n          id={id}\n          className={cx(textAreaStyle, colorSets[mode].textArea, {\n            [colorSets[mode].errorBorder]: state === State.Error,\n            [css`\n              background-color: #5a3c3b;\n            `]: state === State.Error && darkMode,\n          })}\n          disabled={disabled}\n          onChange={onValueChange}\n          onBlur={onBlurHandler}\n          value={value}\n        />\n      </InteractionRing>\n      {!disabled && state === State.Error && errorMessage && (\n        <div className={cx(errorMessageStyle, colorSets[mode].errorMessage)}>\n          <label>{errorMessage}</label>\n        </div>\n      )}\n    </div>\n  );\n});\n\nTextArea.displayName = 'TextArea';\n\nTextArea.propTypes = {\n  id: PropTypes.string,\n  darkMode: PropTypes.bool,\n  label: PropTypes.string,\n  description: PropTypes.string,\n  errorMessage: PropTypes.string,\n  state: PropTypes.oneOf(Object.values(State)),\n};\n\nexport default TextArea;\n"],"names":["_templateObject","_templateObject2","_templateObject3","_templateObject4","_templateObject5","_templateObject6","_templateObject7","_templateObject8","_templateObject9","_templateObject10","_templateObject11","_colorSets","_templateObject12","_excluded","State","None","Error","Mode","containerStyles","css","_taggedTemplateLiteral","textAreaStyle","spacing","fontFamilies","default","errorMessageStyle","colorSets","_defineProperty","defaultBorder","uiColors","gray","light1","textArea","dark3","white","base","light2","errorBorder","red","errorMessage","dark1","TextArea","React","forwardRef","_ref","forwardedRef","_cx","label","description","className","_ref$darkMode","darkMode","_ref$disabled","disabled","_ref$state","state","idProp","id","controlledValue","value","onChange","onBlur","handleValidation","ariaLabelledby","rest","_objectWithoutProperties","useIdAllocator","prefix","mode","isControlled","_useState2","_slicedToArray","useState","uncontrolledValue","setValue","validation","useValidation","console","error","___EmotionJSX","cx","Label","htmlFor","Description","InteractionRing","ignoreKeyboardContext","_extends","ref","title","undefined","e","target","displayName","propTypes","PropTypes","string","bool","oneOf","Object","values"],"mappings":"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"}