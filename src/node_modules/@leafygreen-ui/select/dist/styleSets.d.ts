export declare const Mode: {
    readonly Dark: "dark";
    readonly Light: "light";
};
export declare type Mode = typeof Mode[keyof typeof Mode];
interface ColorSet {
    label: {
        base: string;
        disabled: string;
    };
    description: string;
    border: {
        base: string;
        open: string;
    };
    text: {
        base: string;
        deselected: string;
        disabled: string;
    };
    menu: {
        shadow: string;
    };
    option: {
        group: {
            label: string;
            border: string;
        };
        background: {
            base: string;
            hovered: string;
            focused: string;
        };
        text: {
            base: string;
            selected: string;
            disabled: string;
            focused: string;
        };
        icon: {
            base: string;
            selected: string;
            disabled: string;
        };
        indicator: {
            focused: string;
        };
    };
}
export declare const colorSets: Record<Mode, ColorSet>;
export declare const Size: {
    readonly XSmall: "xsmall";
    readonly Small: "small";
    readonly Default: "default";
    readonly Large: "large";
};
export declare type Size = typeof Size[keyof typeof Size];
interface SizeSet {
    height: number;
    text: number;
    label: {
        text: number;
        lineHeight: number;
    };
    description: {
        text: number;
        lineHeight: number;
    };
    option: {
        text: number;
    };
    warningIcon: number;
}
export declare const sizeSets: Record<Size, SizeSet>;
export declare const mobileSizeSet: SizeSet;
export declare const State: {
    readonly None: "none";
    readonly Error: "error";
};
export declare type State = typeof State[keyof typeof State];
export {};
//# sourceMappingURL=styleSets.d.ts.map