import React from 'react';
import PropTypes from 'prop-types';
import { OneOf } from '@leafygreen-ui/lib';
import { PopoverProps } from '@leafygreen-ui/popover';
import { Size, State } from './styleSets';
export declare type Props = {
    children: React.ReactNode;
    className?: string;
    id?: string;
    darkMode?: boolean;
    size?: Size;
    disabled?: boolean;
    description?: string;
    placeholder?: string;
    name?: string;
    allowDeselect?: boolean;
    errorMessage?: string;
    state?: State;
    __INTERNAL__menuButtonSlot__?: React.ForwardRefExoticComponent<React.RefAttributes<unknown>>;
} & Omit<PopoverProps, 'active' | 'spacing'> & (// Uncontrolled
({
    defaultValue?: string;
    value?: undefined;
} & {
    onChange?: (value: string, event: React.MouseEvent | KeyboardEvent | React.KeyboardEvent) => void;
    readOnly?: false;
}) | ({
    value: string;
    defaultValue?: undefined;
} & ({
    onChange: (value: string, event: React.MouseEvent | KeyboardEvent | React.KeyboardEvent) => void;
    readOnly?: false;
} | {
    readOnly: true;
    onChange?: undefined;
}))) & OneOf<{
    label: string;
}, {
    'aria-labelledby': string;
}>;
declare function Select({ children, darkMode, size, disabled, allowDeselect, placeholder, className, id: idProp, label, 'aria-labelledby': ariaLabelledby, description, name, defaultValue, value, onChange, readOnly, usePortal, portalContainer, scrollContainer, portalClassName, popoverZIndex, errorMessage, state, __INTERNAL__menuButtonSlot__, }: Props): JSX.Element;
declare namespace Select {
    var displayName: string;
    var propTypes: {
        label: PropTypes.Requireable<string>;
        'aria-labelledby': PropTypes.Requireable<string>;
        description: PropTypes.Requireable<string>;
        placeholder: PropTypes.Requireable<string>;
        className: PropTypes.Requireable<string>;
        darkMode: PropTypes.Requireable<boolean>;
        size: PropTypes.Requireable<Size>;
        disabled: PropTypes.Requireable<boolean>;
        id: PropTypes.Requireable<string>;
        value: PropTypes.Requireable<string>;
        defaultValue: PropTypes.Requireable<string>;
        onChange: PropTypes.Requireable<(...args: any[]) => any>;
        readOnly: PropTypes.Requireable<boolean>;
        errorMessage: PropTypes.Requireable<string>;
        state: PropTypes.Requireable<State>;
    };
}
export default Select;
//# sourceMappingURL=Select.d.ts.map