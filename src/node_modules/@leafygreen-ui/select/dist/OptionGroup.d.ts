import React from 'react';
import PropTypes from 'prop-types';
import Option from './Option';
export declare type ReactEmpty = null | undefined | false | '';
export interface InternalProps {
    className: string | undefined;
    label: string;
    children: React.ReactNode;
}
export declare function InternalOptionGroup({ className, label, children, }: InternalProps): JSX.Element;
export declare namespace InternalOptionGroup {
    var displayName: string;
}
interface Props {
    className?: string;
    label: string;
    disabled?: boolean;
    children: React.ReactFragment | React.ReactComponentElement<typeof Option> | Array<React.ReactComponentElement<typeof Option> | React.ReactFragment | ReactEmpty>;
}
declare function OptionGroup(_: Props): JSX.Element;
declare namespace OptionGroup {
    var displayName: string;
    var propTypes: {
        children: PropTypes.Validator<PropTypes.ReactElementLike | (string | boolean | PropTypes.ReactElementLike | null | undefined)[]>;
        className: PropTypes.Requireable<string>;
        label: PropTypes.Validator<string>;
        disabled: PropTypes.Requireable<boolean>;
    };
}
export default OptionGroup;
export declare type OptionGroupElement = React.ReactComponentElement<typeof OptionGroup>;
//# sourceMappingURL=OptionGroup.d.ts.map