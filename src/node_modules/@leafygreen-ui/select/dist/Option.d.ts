import React from 'react';
import PropTypes from 'prop-types';
import { LGGlyph } from '@leafygreen-ui/icon/src/types';
declare type GlyphElement = React.ReactElement<LGGlyph.ComponentProps> & {
    type?: {
        isGlyph?: boolean;
    };
};
export declare type ReactEmpty = null | undefined | false | '';
export interface InternalProps {
    children: React.ReactNode;
    className: string | undefined;
    glyph: GlyphElement | undefined;
    selected: boolean;
    focused: boolean;
    disabled: boolean;
    onClick: React.MouseEventHandler;
    onFocus: React.FocusEventHandler;
    isDeselection: boolean;
    hasGlyphs: boolean;
    triggerScrollIntoView: boolean;
}
export declare function InternalOption({ children, className, glyph, selected, focused, disabled, onClick, onFocus, isDeselection, triggerScrollIntoView, hasGlyphs, }: InternalProps): JSX.Element;
export declare namespace InternalOption {
    var displayName: string;
}
interface Props {
    className?: string;
    glyph?: GlyphElement;
    disabled?: boolean;
    value?: string;
    children: React.ReactText | Array<React.ReactText | ReactEmpty>;
}
declare function Option(_: Props): JSX.Element;
declare namespace Option {
    var displayName: string;
    var propTypes: {
        children: PropTypes.Validator<string | number | (string | number | boolean | null | undefined)[]>;
        className: PropTypes.Requireable<string>;
        glyph: PropTypes.Requireable<PropTypes.ReactElementLike>;
        value: PropTypes.Requireable<string>;
        disabled: PropTypes.Requireable<boolean>;
    };
}
export default Option;
export declare type OptionElement = Omit<React.ReactComponentElement<typeof Option>, 'props'> & {
    props: Props;
};
//# sourceMappingURL=Option.d.ts.map