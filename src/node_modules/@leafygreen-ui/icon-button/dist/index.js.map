{"version":3,"file":"index.js","sources":["../src/IconButton.tsx"],"sourcesContent":["import React from 'react';\nimport { css, cx } from '@leafygreen-ui/emotion';\nimport PropTypes from 'prop-types';\nimport Box, { ExtendableBox } from '@leafygreen-ui/box';\nimport { Either, isComponentType } from '@leafygreen-ui/lib';\nimport { uiColors } from '@leafygreen-ui/palette';\nimport { isComponentGlyph } from '@leafygreen-ui/icon';\nimport { validateAriaLabelProps } from '@leafygreen-ui/a11y';\n\nconst Mode = {\n  Light: 'light',\n  Dark: 'dark',\n} as const;\n\ntype Mode = typeof Mode[keyof typeof Mode];\n\nconst Size = {\n  Default: 'default',\n  Large: 'large',\n  XLarge: 'xlarge',\n} as const;\n\ntype Size = typeof Size[keyof typeof Size];\n\nexport { Size };\n\nconst removeButtonStyle = css`\n  border: none;\n  -webkit-appearance: unset;\n  padding: unset;\n`;\n\nconst baseIconButtonStyle = css`\n  display: inline-block;\n  border-radius: 100px;\n  color: ${uiColors.gray.base};\n  position: relative;\n  cursor: pointer;\n  flex-shrink: 0;\n  transition: color 150ms ease-in-out;\n\n  // Set background to fully-transparent white for cross-browser compatability with Safari\n  //\n  // Safari treats \"transparent\" values in CSS as transparent black instead of white\n  // which can make things render differently across browsers if not defined explicitly.\n  background-color: rgba(255, 255, 255, 0);\n\n  &:before {\n    content: '';\n    transition: 150ms all ease-in-out;\n    position: absolute;\n    top: 0;\n    bottom: 0;\n    left: 0;\n    right: 0;\n    border-radius: 100%;\n    opacity: 0;\n    transform: scale(0.8);\n  }\n\n  &:active:before,\n  &:hover:before,\n  &:focus:before {\n    opacity: 1;\n    transform: scale(1);\n  }\n\n  &:focus {\n    outline: none;\n  }\n`;\n\nconst iconButtonSizes = {\n  [Size.Default]: css`\n    height: 28px;\n    width: 28px;\n  `,\n  [Size.Large]: css`\n    height: 35px;\n    width: 35px;\n  `,\n  [Size.XLarge]: css`\n    height: 42px;\n    width: 42px;\n  `,\n} as const;\n\nconst iconButtonMode = {\n  [Mode.Light]: css`\n    &:active,\n    &:hover {\n      color: ${uiColors.gray.dark2};\n\n      &:before {\n        background-color: ${uiColors.gray.light2};\n      }\n    }\n\n    &:focus {\n      color: ${uiColors.blue.dark2};\n\n      &:before {\n        background-color: ${uiColors.blue.light2};\n      }\n    }\n  `,\n  [Mode.Dark]: css`\n    &:active,\n    &:hover {\n      color: ${uiColors.white};\n\n      &:before {\n        background-color: ${uiColors.gray.dark2};\n      }\n    }\n\n    &:focus {\n      color: ${uiColors.blue.light1};\n\n      &:before {\n        background-color: ${uiColors.blue.dark2};\n      }\n    }\n  `,\n};\n\nconst disabledStyle = {\n  [Mode.Light]: css`\n    color: ${uiColors.gray.light2};\n    pointer-events: none;\n    background-color: rgba(255, 255, 255, 0);\n\n    &:focus {\n      color: ${uiColors.gray.light2};\n      &:before {\n        background-color: ${uiColors.gray.light1};\n      }\n    }\n  `,\n\n  [Mode.Dark]: css`\n    color: ${uiColors.gray.dark2};\n    pointer-events: none;\n    background-color: rgba(255, 255, 255, 0);\n\n    &:focus {\n      color: ${uiColors.gray.dark2};\n\n      &:before {\n        background-color: ${uiColors.gray.dark1};\n      }\n    }\n  `,\n} as const;\n\nconst activeStyle = {\n  [Mode.Light]: css`\n    color: ${uiColors.gray.dark2};\n    background-color: ${uiColors.gray.light2};\n\n    &:before {\n      background-color: ${uiColors.gray.light2};\n    }\n  `,\n\n  [Mode.Dark]: css`\n    color: ${uiColors.white};\n    background-color: ${uiColors.gray.dark2};\n\n    &:before {\n      background-color: ${uiColors.gray.dark2};\n    }\n  `,\n} as const;\n\nconst iconStyle = css`\n  position: absolute;\n  top: 0;\n  bottom: 0;\n  left: 0;\n  right: 0;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n`;\n\n// Since applications can't yet tree-shake, we're duplicating this interface from the types in the namespaces within the Icon package rather than importing the Icon package.\ninterface IconProps extends React.SVGProps<SVGSVGElement> {\n  glyph: string;\n  size?: Size | number;\n  title?: string | null | boolean;\n}\ninterface BaseIconButtonProps\n  extends React.HTMLAttributes<HTMLButtonElement | HTMLAnchorElement> {\n  className?: string;\n  children?: React.ReactNode;\n  disabled?: boolean;\n  size?: Size;\n  darkMode?: boolean;\n  active?: boolean;\n  href?: string;\n  'aria-label'?: string;\n  'aria-labelledby'?: string;\n  onClick?: React.MouseEventHandler<HTMLButtonElement | HTMLAnchorElement>;\n}\n\ntype AriaLabels = 'aria-label' | 'aria-labelledby';\n\ntype AccessibleIconButtonProps = Either<BaseIconButtonProps, AriaLabels>;\n\nconst IconButton: ExtendableBox<\n  AccessibleIconButtonProps & { ref?: React.Ref<any> },\n  'button'\n> = React.forwardRef(\n  (\n    {\n      size = Size.Default,\n      darkMode = false,\n      disabled = false,\n      active = false,\n      className,\n      children,\n      ...rest\n    }: AccessibleIconButtonProps,\n    ref: React.Ref<any>,\n  ) => {\n    const mode = darkMode ? 'dark' : 'light';\n\n    // We do our own proptype validation here to ensure either 'aria-label' or 'aria-labelledby' are passed to the component.\n    validateAriaLabelProps(rest, 'IconButton');\n\n    const processedChildren = React.Children.map(children, child => {\n      if (!child) {\n        return null;\n      }\n\n      // Check to see if child is a LeafyGreen Icon or a LeafyGreen Glyph\n      // If so, we unset the title and rely on the aria-label prop to give\n      // information about the rendered content.\n      if (isComponentType(child, 'Icon') || isComponentGlyph(child)) {\n        const { size: childSize, title }: IconProps = child.props;\n\n        const newChildProps: Partial<IconProps> = {\n          size: childSize || size,\n        };\n\n        if (typeof title !== 'string' || title.length === 0) {\n          // Unsets the title within an icon since the button itself will have\n          // aria-label or aria-labelledby set.\n          newChildProps.title = false;\n        }\n\n        return React.cloneElement(child, newChildProps);\n      }\n\n      return child;\n    });\n\n    const iconButtonProps = {\n      ...rest,\n      ref,\n      tabIndex: 0,\n      // We don't set the `disabled` prop since we want the button to be focusable\n      ['aria-disabled']: disabled,\n      // Override any actions if it's disabled\n      href: disabled ? undefined : rest.href,\n      onClick: disabled ? undefined : rest.onClick,\n      className: cx(\n        removeButtonStyle,\n        baseIconButtonStyle,\n        iconButtonSizes[size],\n        iconButtonMode[mode],\n        {\n          [activeStyle[mode]]: active,\n          [disabledStyle[mode]]: disabled,\n        },\n        className,\n      ),\n    };\n\n    if (typeof rest.href === 'string') {\n      return (\n        <Box as=\"a\" {...iconButtonProps}>\n          <div className={iconStyle}>{processedChildren}</div>\n        </Box>\n      );\n    }\n\n    return (\n      <Box as=\"button\" {...iconButtonProps}>\n        <div className={iconStyle}>{processedChildren}</div>\n      </Box>\n    );\n  },\n);\n\nIconButton.displayName = 'IconButton';\n\n// @ts-ignore: https://github.com/DefinitelyTyped/DefinitelyTyped/issues/37660\nIconButton.propTypes = {\n  darkMode: PropTypes.bool,\n  size: PropTypes.oneOf(Object.values(Size)),\n  className: PropTypes.string,\n  children: PropTypes.node,\n  disabled: PropTypes.bool,\n  // @ts-ignore\n  href: PropTypes.string,\n  active: PropTypes.bool,\n};\n\nexport default IconButton;\n"],"names":["_templateObject","_templateObject2","_templateObject3","_templateObject4","_templateObject5","_iconButtonSizes","_templateObject6","_templateObject7","_iconButtonMode","_templateObject8","_templateObject9","_disabledStyle","_templateObject10","_templateObject11","_activeStyle","_templateObject12","_excluded","Mode","Size","Default","Large","XLarge","removeButtonStyle","css","_taggedTemplateLiteral","baseIconButtonStyle","uiColors","gray","base","iconButtonSizes","_defineProperty","iconButtonMode","dark2","light2","blue","white","light1","disabledStyle","dark1","activeStyle","iconStyle","IconButton","React","forwardRef","_ref","ref","_cx","_objectSpread2","_ref$size","size","_ref$darkMode","darkMode","_ref$disabled","disabled","_ref$active","active","className","children","rest","_objectWithoutProperties","mode","validateAriaLabelProps","processedChildren","Children","map","child","isComponentType","isComponentGlyph","_child$props","props","childSize","title","newChildProps","length","cloneElement","iconButtonProps","_objectSpread","tabIndex","undefined","href","onClick","cx","___EmotionJSX","Box","_extends","as","displayName","propTypes","PropTypes","bool","oneOf","Object","values","string","node"],"mappings":"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"}