/// <reference types="react" />
import PropTypes from 'prop-types';
import { Align, Justify, PopoverProps } from './types';
/**
 * # Popover
 *
 * React Component that handles positioning of content relative to another element.
 *
 * ```
<button>
  <Popover active={true}>Hello world!</Popover>
</button>
```
 * @param props.active Boolean to describe whether or not Popover is active.
 * @param props.spacing The spacing (in pixels) between the reference element, and the popover.
 * @param props.align Alignment of Popover component relative to another element: `top`, `bottom`, `left`, `right`, `center-horizontal`, `center-vertical`.
 * @param props.justify Justification of Popover component relative to another element: `start`, `middle`, `end`, `fit`.
 * @param props.adjustOnMutation Should the Popover auto adjust its content when the DOM changes (using MutationObserver).
 * @param props.children Content to appear inside of Popover container.
 * @param props.className Classname applied to Popover container.
 * @param props.popoverZIndex Number that controls the z-index of the popover element directly.
 * @param props.refEl Reference element that Popover component should be positioned against.
 * @param props.usePortal Boolean to describe if content should be portaled to end of DOM, or appear in DOM tree.
 * @param props.portalClassName Classname applied to root element of the portal.
 * @param props.portalContainer HTML element that the popover is portaled within.
 * @param props.scrollContainer HTML ancestor element that's scrollable to position the popover accurately within scrolling containers.
 */
declare function Popover({ active, spacing, align, justify, adjustOnMutation, children, className, popoverZIndex, refEl, usePortal, portalClassName, portalContainer: portalContainerProp, scrollContainer: scrollContainerProp, ...rest }: PopoverProps): JSX.Element | null;
declare namespace Popover {
    var displayName: string;
    var propTypes: {
        children: PropTypes.Requireable<string | number | boolean | {} | PropTypes.ReactElementLike | PropTypes.ReactNodeArray>;
        active: PropTypes.Requireable<boolean>;
        className: PropTypes.Requireable<string>;
        align: PropTypes.Requireable<Align>;
        justify: PropTypes.Requireable<Justify>;
        refEl: PropTypes.Requireable<PropTypes.InferProps<{
            current: PropTypes.Requireable<any>;
        }>>;
        usePortal: PropTypes.Requireable<boolean>;
        portalClassName: PropTypes.Requireable<string>;
        spacing: PropTypes.Requireable<number>;
        adjustOnMutation: PropTypes.Requireable<boolean>;
    };
}
export default Popover;
//# sourceMappingURL=Popover.d.ts.map