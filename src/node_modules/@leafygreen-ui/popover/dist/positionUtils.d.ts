import { Align, Justify, ElementPosition } from './types';
interface ElementViewportPositions {
    referenceElViewportPos: ElementPosition;
    contentElViewportPos: ElementPosition;
    spacing: number;
}
interface ElementDocumentPositions {
    referenceElDocumentPos: ElementPosition;
    contentElDocumentPos: ElementPosition;
    spacing: number;
}
interface ElementPositions extends Partial<ElementViewportPositions>, Partial<ElementDocumentPositions> {
}
interface WindowSize {
    windowWidth: number;
    windowHeight: number;
}
interface CalculatePosition extends Required<ElementPositions>, Partial<WindowSize> {
    useRelativePositioning: boolean;
    align: Align;
    justify: Justify;
}
export declare function calculatePosition({ useRelativePositioning, spacing, align, justify, referenceElViewportPos, referenceElDocumentPos, contentElViewportPos, contentElDocumentPos, windowHeight, windowWidth, }: CalculatePosition): {
    align: Align;
    justify: Justify;
    positionCSS: any;
};
export declare function getElementDocumentPosition(element: HTMLElement | null, scrollContainer?: HTMLElement | null): ElementPosition;
export declare function getElementViewportPosition(element: HTMLElement | null, scrollContainer?: HTMLElement | null): ElementPosition;
export {};
//# sourceMappingURL=positionUtils.d.ts.map