import React from 'react';
import PropTypes from 'prop-types';
import { Align, Justify, PopoverProps } from '@leafygreen-ui/popover';
interface MenuProps extends Omit<PopoverProps, 'active'> {
    /**
     * A slot for the element used to trigger the Menu. Passing a trigger allows
     * Menu to control opening and closing itself internally.
     */
    trigger?: React.ReactElement | Function;
    /**
     * Determines the open state of the menu
     *
     * default: `false`
     */
    open?: boolean;
    /**
     * Callback to change the open state of the Menu.
     *
     */
    setOpen?: React.Dispatch<React.SetStateAction<boolean>>;
    /**
     * Callback to determine whether or not Menu should close when user tries to close it.
     *
     */
    shouldClose?: () => boolean;
}
/**
 * # Menu
 *
 * Menu component
 *
 * ```
<button>
  <Menu open={true}>
    <MenuItem>Hello World!</MenuItem>
  </Menu>
</button>
```
 * @param props.children Content to appear inside of Menu.
 * @param props.open Boolean to describe whether or not Menu is open.
 * @param props.setOpen Callback to change the open state of the Menu.
 * @param props.shouldClose Callback to determine whether or not Menu should close when user tries to close it.
 * @param props.className Classname applied to Menu.
 * @param props.align Alignment of Menu relative to another element: `top`, `bottom`, `left`, `right`.
 * @param props.justify Justification of Menu relative to another element: `start`, `middle`, `end`.
 * @param props.refEl Reference element that Menu should be positioned against.
 * @param props.usePortal Boolean to describe if content should be portaled to end of DOM, or appear in DOM tree.
 * @param props.trigger Trigger element can be ReactNode or function, and, if present, internally manages active state of Menu.
 */
declare function Menu({ align, justify, adjustOnMutation, shouldClose, spacing, open: controlledOpen, setOpen: controlledSetOpen, children, className, refEl, trigger, usePortal, portalClassName, portalContainer, scrollContainer, popoverZIndex, ...rest }: MenuProps): any;
declare namespace Menu {
    var displayName: string;
    var propTypes: {
        children: PropTypes.Requireable<PropTypes.ReactNodeLike>;
        className: PropTypes.Requireable<string>;
        align: PropTypes.Requireable<Align>;
        justify: PropTypes.Requireable<Justify>;
        refEl: PropTypes.Requireable<PropTypes.InferProps<{
            current: PropTypes.Requireable<any>;
        }>>;
        usePortal: PropTypes.Requireable<boolean>;
        trigger: PropTypes.Requireable<string | number | boolean | {} | PropTypes.ReactElementLike | PropTypes.ReactNodeArray>;
        open: PropTypes.Requireable<boolean>;
        setOpen: PropTypes.Requireable<(...args: any[]) => any>;
    };
}
export default Menu;
//# sourceMappingURL=Menu.d.ts.map