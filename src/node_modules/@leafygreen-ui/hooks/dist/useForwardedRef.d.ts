/// <reference types="react" />
export declare function useObservedRef<T>(callback: (value: T) => void, initialValue: T, options: {
    initialValue: T;
    deps?: React.DependencyList;
}): React.MutableRefObject<T>;
export declare function useObservedRef<T>(callback: (value: T) => void, options?: {
    initialValue: T | null;
    deps?: React.DependencyList;
}): React.RefObject<T>;
export declare function useObservedRef<T>(callback: (value: T | undefined) => void, options?: {
    deps?: React.DependencyList;
}): React.MutableRefObject<T>;
declare type SettableRef<T> = React.RefCallback<T> | React.MutableRefObject<T>;
declare type ValueOrArray<T> = T | ReadonlyArray<T>;
export declare function useForwardedRef<T>(forwardedRefOrRefs: ValueOrArray<SettableRef<T> | null>, initialValue: T): React.MutableRefObject<T>;
export declare function useForwardedRef<T>(forwardedRefOrRefs: ValueOrArray<SettableRef<T | null> | null>, initialValue: T | null): React.RefObject<T>;
export {};
//# sourceMappingURL=useForwardedRef.d.ts.map