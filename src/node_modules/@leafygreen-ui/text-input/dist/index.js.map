{"version":3,"file":"index.js","sources":["../src/TextInput.tsx"],"sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { css, cx } from '@leafygreen-ui/emotion';\nimport CheckmarkIcon from '@leafygreen-ui/icon/dist/Checkmark';\nimport CheckmarkWithCircleIcon from '@leafygreen-ui/icon/dist/CheckmarkWithCircle';\nimport WarningIcon from '@leafygreen-ui/icon/dist/Warning';\nimport InteractionRing from '@leafygreen-ui/interaction-ring';\nimport { uiColors } from '@leafygreen-ui/palette';\nimport { createDataProp, HTMLElementProps, Either } from '@leafygreen-ui/lib';\nimport { useIdAllocator, useValidation } from '@leafygreen-ui/hooks';\nimport { Description, Label } from '@leafygreen-ui/typography';\n\nconst iconSelectorProp = createDataProp('icon-selector');\n\nexport const State = {\n  None: 'none',\n  Valid: 'valid',\n  Error: 'error',\n} as const;\n\nexport type State = typeof State[keyof typeof State];\n\nexport const TextInputType = {\n  Email: 'email',\n  Password: 'password',\n  Search: 'search',\n  Text: 'text',\n  Url: 'url',\n  Tel: 'tel',\n  Number: 'number',\n} as const;\n\nexport type TextInputType = typeof TextInputType[keyof typeof TextInputType];\n\nconst Mode = {\n  Light: 'light',\n  Dark: 'dark',\n} as const;\n\ntype Mode = typeof Mode[keyof typeof Mode];\n\nexport const SizeVariant = {\n  XSmall: 'xsmall',\n  Small: 'small',\n  Default: 'default',\n  Large: 'large',\n} as const;\n\nexport type SizeVariant = typeof SizeVariant[keyof typeof SizeVariant];\n\nexport const BaseFontSize = 14 | 16;\n\nexport type BaseFontSize = typeof BaseFontSize;\n\ninterface TextInputProps extends HTMLElementProps<'input', HTMLInputElement> {\n  /**\n   * id associated with the TextInput component.\n   */\n  id?: string;\n\n  /**\n   * Text shown in bold above the input element.\n   */\n  label?: string | null;\n\n  /**\n   * Text that gives more detail about the requirements for the input.\n   */\n  description?: string;\n\n  /**\n   * Whether or not the field is optional.\n   * Default: false\n   */\n  optional?: boolean;\n\n  /**\n   * Whether or not the field is currently disabled.\n   * Default: false\n   */\n  disabled?: boolean;\n\n  /**\n   * Callback to be executed when the input stops being focused.\n   */\n  onBlur?: React.FocusEventHandler<HTMLInputElement>;\n\n  /**\n   * Callback to be executed when the value of the input field changes.\n   */\n  onChange?: React.ChangeEventHandler<HTMLInputElement>;\n\n  /**\n   * The placeholder text shown in the input field before the user begins typing.\n   */\n  placeholder?: string;\n\n  /**\n   * The message shown below the input field if the value is invalid.\n   */\n  errorMessage?: string;\n\n  /**\n   * The current state of the TextInput. This can be none, valid, or error.\n   */\n  state?: State;\n\n  /**\n   * The current value of the input field. If a value is passed to this prop, component will be controlled by consumer.\n   */\n  value?: string;\n\n  /**\n   * className supplied to the TextInput container.\n   */\n  className?: string;\n\n  /**\n   *  determines whether or not the component appears in dark mode.\n   */\n  darkMode?: boolean;\n\n  type?: TextInputType;\n\n  handleValidation?: (value: string) => void;\n\n  ['aria-labelledby']?: string;\n\n  /**\n   *  determines the font size and padding.\n   */\n\n  sizeVariant?: SizeVariant;\n\n  /**\n   *  determines the base font size if sizeVariant is set to default.\n   */\n\n  baseFontSize?: BaseFontSize;\n}\n\ntype AriaLabels = 'label' | 'aria-labelledby';\ntype AccessibleTextInputProps =\n  | Either<TextInputProps, AriaLabels>\n  | (TextInputProps & { type: 'search'; 'aria-label': string });\n\nconst interactionRingStyle = css`\n  width: 100%;\n`;\n\nconst textInputStyle = css`\n  display: flex;\n  flex-direction: column;\n`;\n\nconst inputContainerStyle = css`\n  position: relative;\n  display: flex;\n  align-items: center;\n  z-index: 0;\n`;\n\nconst inputStyle = css`\n  width: 100%;\n  height: 36px;\n  border-radius: 4px;\n  padding-left: 12px;\n  font-size: 14px;\n  font-weight: normal;\n  font-family: Akzidenz, ‘Helvetica Neue’, Helvetica, Arial, sans-serif;\n  border: 1px solid;\n  transition: border-color 150ms ease-in-out;\n  z-index: 1;\n  outline: none;\n\n  &::placeholder {\n    color: ${uiColors.gray.base};\n  }\n\n  &:disabled {\n    cursor: not-allowed;\n  }\n`;\n\nconst inputIconStyle = css`\n  position: absolute;\n  display: flex;\n  align-items: center;\n  right: 12px;\n  z-index: 1;\n`;\n\nconst validIconStyle = css`\n  color: ${uiColors.green.base};\n`;\n\nconst optionalStyle = css`\n  color: ${uiColors.gray.dark1};\n  font-size: 12px;\n  font-style: italic;\n  font-weight: normal;\n`;\n\nconst errorMessageStyle = css`\n  font-size: 14px;\n  min-height: 20px;\n  padding-top: 4px;\n  font-weight: normal;\n`;\n\ninterface ColorSets {\n  inputColor: string;\n  inputBackgroundColor: string;\n  disabledColor: string;\n  disabledBackgroundColor: string;\n  errorIconColor: string;\n  errorBorder: string;\n  errorMessage: string;\n  optional: string;\n  defaultBorder: string;\n  validBorder: string;\n}\n\nconst colorSets: Record<Mode, ColorSets> = {\n  [Mode.Light]: {\n    inputColor: uiColors.gray.dark3,\n    inputBackgroundColor: uiColors.white,\n    disabledColor: uiColors.gray.base,\n    disabledBackgroundColor: uiColors.gray.light2,\n    errorIconColor: uiColors.red.base,\n    errorMessage: uiColors.red.base,\n    errorBorder: uiColors.red.base,\n    optional: uiColors.gray.dark1,\n    defaultBorder: uiColors.gray.base,\n    validBorder: uiColors.green.base,\n  },\n  [Mode.Dark]: {\n    inputColor: uiColors.white,\n    inputBackgroundColor: '#394F5A',\n    disabledColor: uiColors.gray.dark1,\n    disabledBackgroundColor: '#263843',\n    errorIconColor: '#EF8D6F',\n    errorMessage: '#EF8D6F',\n    errorBorder: '#5a3c3b',\n    optional: uiColors.gray.light1,\n    defaultBorder: '#394F5A',\n    validBorder: '#394F5A',\n  },\n} as const;\n\nconst interactionRingColor: Record<Mode, Record<'valid' | 'error', string>> = {\n  [Mode.Light]: {\n    [State.Error]: uiColors.red.light3,\n    [State.Valid]: uiColors.green.light3,\n  },\n  [Mode.Dark]: {\n    [State.Error]: uiColors.red.dark2,\n    [State.Valid]: uiColors.gray.dark1,\n  },\n};\n\ninterface SizeSet {\n  inputHeight: number;\n  inputText: number;\n  text: number;\n  lineHeight: number;\n  padding: number;\n}\n\nfunction getStatefulInputStyles({\n  state,\n  optional,\n  mode,\n  disabled,\n  sizeSet,\n}: {\n  state: State;\n  optional: boolean;\n  mode: Mode;\n  disabled: boolean;\n  sizeSet: SizeSet;\n}) {\n  switch (state) {\n    case State.Valid: {\n      return css`\n        padding-right: 30px;\n        border-color: ${!disabled ? colorSets[mode].validBorder : 'inherit'};\n      `;\n    }\n\n    case State.Error: {\n      return cx(\n        css`\n          padding-right: 30px;\n          border-color: ${!disabled ? colorSets[mode].errorBorder : 'inherit'};\n        `,\n        {\n          [css`\n            background-color: #5a3c3b;\n          `]: mode === Mode.Dark,\n        },\n      );\n    }\n\n    default: {\n      return css`\n        padding-right: ${optional ? 60 : sizeSet.padding}px;\n        border-color: ${colorSets[mode].defaultBorder};\n      `;\n    }\n  }\n}\n\nfunction getSizeSets(baseFontSize: BaseFontSize, sizeVariant: SizeVariant) {\n  const sizeSets: Record<SizeVariant, SizeSet> = {\n    [SizeVariant.XSmall]: {\n      inputHeight: 22,\n      inputText: 12,\n      text: 14,\n      lineHeight: 20,\n      padding: 10,\n    },\n    [SizeVariant.Small]: {\n      inputHeight: 28,\n      inputText: 14,\n      text: 14,\n      lineHeight: 20,\n      padding: 10,\n    },\n    [SizeVariant.Default]: {\n      inputHeight: 36,\n      inputText: baseFontSize,\n      text: baseFontSize,\n      lineHeight: 20,\n      padding: 12,\n    },\n    [SizeVariant.Large]: {\n      inputHeight: 48,\n      inputText: 18,\n      text: 18,\n      lineHeight: 22,\n      padding: 16,\n    },\n  };\n  return sizeSets[sizeVariant];\n}\n\n/**\n * # TextInput\n *\n * TextInput component\n *\n * ```\n<TextInput label='Input Label' onChange={() => execute when value of input field changes}/>\n```\n * @param props.id id associated with the TextInput component.\n * @param props.label Text shown in bold above the input element.\n * @param props.description Text that gives more detail about the requirements for the input.\n * @param props.optional Whether or not the field is optional.\n * @param props.disabled Whether or not the field is currently disabled.\n * @param props.onChange Callback to be executed when the value of the input field changes.\n * @param props.onBlur Callback to be executed when the input stops being focused.\n * @param props.placeholder The placeholder text shown in the input field before the user begins typing.\n * @param props.errorMessage The message shown below the input field if the value is invalid.\n * @param props.state The current state of the TextInput. This can be none, valid, or error.\n * @param props.value The current value of the input field. If a value is passed to this prop, component will be controlled by consumer.\n * @param props.className className supplied to the TextInput container.\n * @param props.darkMode determines whether or not the component appears in dark mode.\n * @param props.sizeVariant determines the size of the text and the height of the input.\n */\nconst TextInput: React.ComponentType<\n  React.PropsWithRef<AccessibleTextInputProps>\n> = React.forwardRef(\n  (\n    {\n      label,\n      description,\n      onChange,\n      onBlur,\n      placeholder,\n      errorMessage,\n      optional = false,\n      disabled = false,\n      state = State.None,\n      type = TextInputType.Text,\n      id: propsId,\n      value: controlledValue,\n      className,\n      darkMode = false,\n      sizeVariant = SizeVariant.Default,\n      'aria-labelledby': ariaLabelledby,\n      handleValidation,\n      baseFontSize = 14,\n      ...rest\n    }: AccessibleTextInputProps,\n    forwardRef: React.Ref<HTMLInputElement>,\n  ) => {\n    const mode = darkMode ? Mode.Dark : Mode.Light;\n    const isControlled = typeof controlledValue === 'string';\n    const [uncontrolledValue, setValue] = useState('');\n    const value = isControlled ? controlledValue : uncontrolledValue;\n    const id = useIdAllocator({ prefix: 'textinput', id: propsId });\n    const sizeSet = getSizeSets(baseFontSize, sizeVariant);\n\n    // Validation\n    const validation = useValidation<HTMLInputElement>(handleValidation);\n\n    const onBlurHandler: React.FocusEventHandler<HTMLInputElement> = e => {\n      if (onBlur) {\n        onBlur(e);\n      }\n\n      validation.onBlur(e);\n    };\n\n    const onValueChange: React.ChangeEventHandler<HTMLInputElement> = e => {\n      if (onChange) {\n        onChange(e);\n      }\n\n      if (!isControlled) {\n        setValue(e.target.value);\n      }\n\n      validation.onChange(e);\n    };\n\n    if (type !== 'search' && !label && !ariaLabelledby) {\n      console.error(\n        'For screen-reader accessibility, label or aria-labelledby must be provided to TextInput.',\n      );\n    }\n\n    if (type === 'search' && !rest['aria-label']) {\n      console.error(\n        'For screen-reader accessibility, aria-label must be provided to TextInput.',\n      );\n    }\n\n    const RenderedCheckmarkIcon = darkMode\n      ? CheckmarkWithCircleIcon\n      : CheckmarkIcon;\n\n    return (\n      <div className={cx(textInputStyle, className)}>\n        {label && (\n          <Label\n            darkMode={darkMode}\n            htmlFor={id}\n            disabled={disabled}\n            className={cx(css`\n              font-size: ${sizeSet.text}px;\n            `)}\n          >\n            {label}\n          </Label>\n        )}\n        {description && (\n          <Description\n            darkMode={darkMode}\n            className={cx(css`\n              font-size: ${sizeSet.text}px;\n              line-height: ${sizeSet.lineHeight}px;\n            `)}\n          >\n            {description}\n          </Description>\n        )}\n        <div className={inputContainerStyle}>\n          <InteractionRing\n            className={interactionRingStyle}\n            darkMode={darkMode}\n            disabled={disabled}\n            ignoreKeyboardContext={true}\n            color={\n              state === State.Valid || state === State.Error\n                ? {\n                    hovered: interactionRingColor[mode][state],\n                  }\n                : undefined\n            }\n          >\n            <input\n              {...rest}\n              aria-labelledby={ariaLabelledby}\n              type={type}\n              className={cx(\n                inputStyle,\n                css`\n                  color: ${colorSets[mode].inputColor};\n                  background-color: ${colorSets[mode].inputBackgroundColor};\n                  font-size: ${sizeSet.inputText}px;\n                  height: ${sizeSet.inputHeight}px;\n                  padding-left: ${sizeSet.padding}px;\n\n                  &:focus {\n                    border: 1px solid ${colorSets[mode].inputBackgroundColor};\n                  }\n\n                  &:disabled {\n                    color: ${colorSets[mode].disabledColor};\n                    background-color: ${colorSets[mode]\n                      .disabledBackgroundColor};\n\n                    &:-webkit-autofill {\n                      &,\n                      &:hover,\n                      &:focus {\n                        appearance: none;\n                        border: 1px solid ${colorSets[mode].defaultBorder};\n                        -webkit-text-fill-color: ${colorSets[mode]\n                          .disabledColor};\n                        -webkit-box-shadow: 0 0 0px 1000px\n                          ${colorSets[mode].disabledBackgroundColor} inset;\n                      }\n                    }\n                  }\n                `,\n                getStatefulInputStyles({\n                  state,\n                  optional,\n                  mode,\n                  disabled,\n                  sizeSet,\n                }),\n              )}\n              value={value}\n              required={!optional}\n              disabled={disabled}\n              placeholder={placeholder}\n              onChange={onValueChange}\n              onBlur={onBlurHandler}\n              ref={forwardRef}\n              id={id}\n              autoComplete={disabled ? 'off' : rest?.autoComplete || 'on'}\n              aria-invalid={state === 'error'}\n            />\n          </InteractionRing>\n\n          <div {...iconSelectorProp.prop} className={inputIconStyle}>\n            {state === State.Valid && (\n              <RenderedCheckmarkIcon\n                role=\"presentation\"\n                className={validIconStyle}\n              />\n            )}\n\n            {state === State.Error && (\n              <WarningIcon\n                role=\"presentation\"\n                className={css`\n                  color: ${colorSets[mode].errorIconColor};\n                `}\n              />\n            )}\n\n            {state === State.None && optional && (\n              <div\n                className={cx(\n                  optionalStyle,\n                  css`\n                    color: ${colorSets[mode].optional};\n                  `,\n                )}\n              >\n                <p>Optional</p>\n              </div>\n            )}\n          </div>\n        </div>\n        {state === State.Error && errorMessage && (\n          <div\n            className={cx(\n              errorMessageStyle,\n              css`\n                color: ${colorSets[mode].errorMessage};\n                font-size: ${sizeSet.text}px;\n                line-height: ${sizeSet.lineHeight}px;\n              `,\n            )}\n          >\n            <label>{errorMessage}</label>\n          </div>\n        )}\n      </div>\n    );\n  },\n);\n\nTextInput.displayName = 'TextInput';\n\nTextInput.propTypes = {\n  id: PropTypes.string,\n  label: PropTypes.string,\n  description: PropTypes.string,\n  optional: PropTypes.bool,\n  disabled: PropTypes.bool,\n  onChange: PropTypes.func,\n  placeholder: PropTypes.string,\n  errorMessage: PropTypes.string,\n  state: PropTypes.oneOf(Object.values(State)),\n  value: PropTypes.string,\n  className: PropTypes.string,\n  sizeVariant: PropTypes.oneOf(Object.values(SizeVariant)),\n  baseFontSize: PropTypes.oneOf([14, 16]),\n};\n\nexport default TextInput;\n"],"names":["_templateObject","_templateObject2","_templateObject3","_templateObject4","_templateObject5","_templateObject6","_templateObject7","_templateObject8","_colorSets","_Mode$Light","_Mode$Dark","_interactionRingColor","_templateObject9","_templateObject10","_templateObject11","_templateObject12","_templateObject13","_templateObject14","_templateObject15","_templateObject16","_templateObject17","_templateObject18","_excluded","iconSelectorProp","createDataProp","State","None","Valid","Error","TextInputType","Email","Password","Search","Text","Url","Tel","Number","Mode","SizeVariant","XSmall","Small","Default","Large","interactionRingStyle","css","_taggedTemplateLiteral","textInputStyle","inputContainerStyle","inputStyle","uiColors","gray","base","inputIconStyle","validIconStyle","green","optionalStyle","dark1","errorMessageStyle","colorSets","_defineProperty","inputColor","dark3","inputBackgroundColor","white","disabledColor","disabledBackgroundColor","light2","errorIconColor","red","errorMessage","errorBorder","optional","defaultBorder","validBorder","light1","interactionRingColor","light3","dark2","getStatefulInputStyles","_ref","state","mode","disabled","sizeSet","cx","padding","TextInput","React","forwardRef","_ref2","label","description","onChange","onBlur","placeholder","_ref2$optional","_ref2$disabled","_ref2$state","_ref2$type","type","propsId","id","controlledValue","value","className","_ref2$darkMode","darkMode","_ref2$sizeVariant","sizeVariant","ariaLabelledby","handleValidation","_ref2$baseFontSize","baseFontSize","rest","_objectWithoutProperties","isControlled","_useState2","_slicedToArray","useState","uncontrolledValue","setValue","useIdAllocator","prefix","_sizeSets","inputHeight","inputText","text","lineHeight","getSizeSets","validation","useValidation","console","error","RenderedCheckmarkIcon","CheckmarkWithCircleIcon","CheckmarkIcon","___EmotionJSX","Label","htmlFor","Description","InteractionRing","ignoreKeyboardContext","color","hovered","undefined","_extends","aria-labelledby","required","e","target","ref","autoComplete","aria-invalid","prop","role","WarningIcon","displayName","propTypes","PropTypes","string","bool","func","oneOf","Object","values"],"mappings":"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"}