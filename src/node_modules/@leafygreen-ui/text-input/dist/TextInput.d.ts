import React from 'react';
import { HTMLElementProps, Either } from '@leafygreen-ui/lib';
export declare const State: {
    readonly None: "none";
    readonly Valid: "valid";
    readonly Error: "error";
};
export declare type State = typeof State[keyof typeof State];
export declare const TextInputType: {
    readonly Email: "email";
    readonly Password: "password";
    readonly Search: "search";
    readonly Text: "text";
    readonly Url: "url";
    readonly Tel: "tel";
    readonly Number: "number";
};
export declare type TextInputType = typeof TextInputType[keyof typeof TextInputType];
export declare const SizeVariant: {
    readonly XSmall: "xsmall";
    readonly Small: "small";
    readonly Default: "default";
    readonly Large: "large";
};
export declare type SizeVariant = typeof SizeVariant[keyof typeof SizeVariant];
export declare const BaseFontSize: number;
export declare type BaseFontSize = typeof BaseFontSize;
interface TextInputProps extends HTMLElementProps<'input', HTMLInputElement> {
    /**
     * id associated with the TextInput component.
     */
    id?: string;
    /**
     * Text shown in bold above the input element.
     */
    label?: string | null;
    /**
     * Text that gives more detail about the requirements for the input.
     */
    description?: string;
    /**
     * Whether or not the field is optional.
     * Default: false
     */
    optional?: boolean;
    /**
     * Whether or not the field is currently disabled.
     * Default: false
     */
    disabled?: boolean;
    /**
     * Callback to be executed when the input stops being focused.
     */
    onBlur?: React.FocusEventHandler<HTMLInputElement>;
    /**
     * Callback to be executed when the value of the input field changes.
     */
    onChange?: React.ChangeEventHandler<HTMLInputElement>;
    /**
     * The placeholder text shown in the input field before the user begins typing.
     */
    placeholder?: string;
    /**
     * The message shown below the input field if the value is invalid.
     */
    errorMessage?: string;
    /**
     * The current state of the TextInput. This can be none, valid, or error.
     */
    state?: State;
    /**
     * The current value of the input field. If a value is passed to this prop, component will be controlled by consumer.
     */
    value?: string;
    /**
     * className supplied to the TextInput container.
     */
    className?: string;
    /**
     *  determines whether or not the component appears in dark mode.
     */
    darkMode?: boolean;
    type?: TextInputType;
    handleValidation?: (value: string) => void;
    ['aria-labelledby']?: string;
    /**
     *  determines the font size and padding.
     */
    sizeVariant?: SizeVariant;
    /**
     *  determines the base font size if sizeVariant is set to default.
     */
    baseFontSize?: BaseFontSize;
}
declare type AriaLabels = 'label' | 'aria-labelledby';
declare type AccessibleTextInputProps = Either<TextInputProps, AriaLabels> | (TextInputProps & {
    type: 'search';
    'aria-label': string;
});
/**
 * # TextInput
 *
 * TextInput component
 *
 * ```
<TextInput label='Input Label' onChange={() => execute when value of input field changes}/>
```
 * @param props.id id associated with the TextInput component.
 * @param props.label Text shown in bold above the input element.
 * @param props.description Text that gives more detail about the requirements for the input.
 * @param props.optional Whether or not the field is optional.
 * @param props.disabled Whether or not the field is currently disabled.
 * @param props.onChange Callback to be executed when the value of the input field changes.
 * @param props.onBlur Callback to be executed when the input stops being focused.
 * @param props.placeholder The placeholder text shown in the input field before the user begins typing.
 * @param props.errorMessage The message shown below the input field if the value is invalid.
 * @param props.state The current state of the TextInput. This can be none, valid, or error.
 * @param props.value The current value of the input field. If a value is passed to this prop, component will be controlled by consumer.
 * @param props.className className supplied to the TextInput container.
 * @param props.darkMode determines whether or not the component appears in dark mode.
 * @param props.sizeVariant determines the size of the text and the height of the input.
 */
declare const TextInput: React.ComponentType<React.PropsWithRef<AccessibleTextInputProps>>;
export default TextInput;
//# sourceMappingURL=TextInput.d.ts.map