import PropTypes from 'prop-types';
import React from 'react';
import { HTMLElementProps, Either } from '@leafygreen-ui/lib';
export declare const Size: {
    readonly Default: "default";
    readonly Small: "small";
    readonly XSmall: "xsmall";
};
export declare type Size = typeof Size[keyof typeof Size];
export declare const Mode: {
    readonly Light: "light";
    readonly Dark: "dark";
};
export declare type Mode = typeof Mode[keyof typeof Mode];
interface BaseToggleProps {
    /**
     * Sets the size of the toggle.
     *
     * default: `'default'`
     */
    size?: Size;
    /**
     * Determines if the Toggle will render the dark mode styles.
     *
     * default: `false`
     */
    darkMode?: boolean;
    /**
     * Sets the checked state of the Toggle.
     */
    checked?: boolean;
    /**
     * Disables the Toggle.
     *
     * default: `false`
     */
    disabled?: boolean;
    /**
     * `onChange` fires when the internally-managed `checked` state of the component is updated. Receives the updated checked state of the toggle as its first argument, and the associated mouse event as the second.
     */
    onChange?: (checked: boolean, mouseEvent: React.MouseEvent<HTMLButtonElement>) => void;
    /**
     * Adds a className to the outermost element.
     */
    className?: string;
}
declare type ToggleProps = Either<BaseToggleProps & Omit<HTMLElementProps<'button', never>, keyof BaseToggleProps>, 'aria-label' | 'aria-labelledby'>;
declare function Toggle({ className, size, darkMode, disabled, onChange: onChangeProp, onClick: onClickProp, checked: controlledChecked, ...rest }: ToggleProps): JSX.Element;
declare namespace Toggle {
    var displayName: string;
    var propTypes: {
        size: PropTypes.Requireable<string>;
        darkMode: PropTypes.Requireable<boolean>;
        checked: PropTypes.Requireable<boolean>;
        disabled: PropTypes.Requireable<boolean>;
        className: PropTypes.Requireable<string>;
        onChange: PropTypes.Requireable<(...args: any[]) => any>;
        onClick: PropTypes.Requireable<(...args: any[]) => any>;
    };
}
export default Toggle;
//# sourceMappingURL=Toggle.d.ts.map