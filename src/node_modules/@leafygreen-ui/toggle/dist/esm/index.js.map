{"version":3,"file":"index.js","sources":["../../src/Toggle.tsx"],"sourcesContent":["import PropTypes from 'prop-types';\nimport React, { useState, useCallback } from 'react';\nimport { createDataProp, HTMLElementProps, Either } from '@leafygreen-ui/lib';\nimport { validateAriaLabelProps } from '@leafygreen-ui/a11y';\nimport { css, cx } from '@leafygreen-ui/emotion';\nimport InteractionRing from '@leafygreen-ui/interaction-ring';\nimport { uiColors } from '@leafygreen-ui/palette';\n\nexport const Size = {\n  Default: 'default',\n  Small: 'small',\n  XSmall: 'xsmall',\n} as const;\n\nexport type Size = typeof Size[keyof typeof Size];\n\nexport const Mode = {\n  Light: 'light',\n  Dark: 'dark',\n} as const;\n\nexport type Mode = typeof Mode[keyof typeof Mode];\n\nconst toggleButton = createDataProp('toggle-button');\n\nconst buttonSelectors = {\n  checked: `${toggleButton.selector}[aria-checked=\"true\"]`,\n  unchecked: `${toggleButton.selector}[aria-checked=\"false\"]`,\n  disabled: `${toggleButton.selector}:disabled`,\n};\n\nconst sliderSelector = {\n  checked: `${buttonSelectors.checked} > &`,\n  unchecked: `${buttonSelectors.unchecked} > &`,\n  disabled: `${buttonSelectors.disabled} > &`,\n};\n\nconst transitionInMS = 150;\n\nconst baseSliderStyles = css`\n  transition: all ${transitionInMS}ms ease-in-out;\n  border-radius: 100%;\n  position: absolute;\n  top: 0;\n  bottom: 0;\n  margin: auto;\n  overflow: hidden;\n  transform: translate3d(0, 0, 0);\n\n  &:before,\n  &:after {\n    content: '';\n    position: absolute;\n    top: 0;\n    bottom: 0;\n    left: 0;\n    right: 0;\n  }\n\n  ${sliderSelector.disabled} {\n    &:before,\n    &:after {\n      content: none;\n    }\n  }\n`;\n\nconst baseButtonStyles = css`\n  transition: ${transitionInMS}ms all ease-in-out, 0 background-color linear;\n  display: inline-block;\n  flex-shrink: 0;\n  position: relative;\n  padding: 0;\n  border-radius: 50px;\n  border: 1px solid;\n  cursor: pointer;\n\n  &:disabled {\n    cursor: not-allowed;\n  }\n\n  &:focus {\n    outline: none;\n  }\n\n  &[aria-checked='true'] {\n    // We set background-color here to avoid a small issue with overflow clipping\n    // that makes this look less seamless than it should.\n    background-color: #43b1e5;\n    border-color: #2e9ed3;\n    transition-delay: ${transitionInMS}ms;\n\n    &:before {\n      transform: scale(1);\n      opacity: 1;\n    }\n  }\n\n  // We're animating this pseudo-element in order to give the toggle groove\n  // background an animation in and out.\n  &:before {\n    content: '';\n    transition: ${transitionInMS}ms all ease-in-out;\n    position: absolute;\n    top: 0;\n    bottom: 0;\n    left: 0;\n    right: 0;\n    border-radius: 50px;\n    background-color: #43b1e5;\n    box-shadow: inset 0 0 10px rgba(0, 0, 0, 0.1);\n    opacity: 0;\n    transform: scale(0.85);\n  }\n\n  &:disabled:before {\n    opacity: 0;\n  }\n`;\n\nconst baseLabelStyle = css`\n  transition: all ${transitionInMS}ms ease-in-out;\n  position: absolute;\n  top: 1px;\n  bottom: 0;\n  margin: auto;\n  height: 11px;\n  line-height: 11px;\n  text-transform: uppercase;\n  font-weight: bold;\n  font-size: 11px;\n  color: white;\n  user-select: none;\n`;\n\nconst onLabelStyle = css`\n  left: 9px;\n`;\n\nconst offLabelStyle = css`\n  right: 6px;\n`;\n\nconst sizeStyles = {\n  [Size.Default]: {\n    button: css`\n      height: 32px;\n      width: 62px;\n    `,\n\n    slider: css`\n      height: 28px;\n      width: 28px;\n      left: 1px;\n\n      ${sliderSelector.checked} {\n        transform: translate3d(30px, 0, 0);\n      }\n\n      ${sliderSelector.disabled} {\n        height: 28px;\n        width: 28px;\n      }\n    `,\n  },\n\n  [Size.Small]: {\n    button: css`\n      height: 22px;\n      width: 40px;\n    `,\n\n    slider: css`\n      height: 20px;\n      width: 20px;\n\n      ${sliderSelector.checked} {\n        transform: translate3d(18px, 0, 0);\n      }\n\n      ${sliderSelector.disabled} {\n        height: 18px;\n        width: 18px;\n        left: 1px;\n      }\n\n      ${buttonSelectors.checked}:disabled {\n        transform: translate3d(17px, 0, 0);\n      }\n    `,\n  },\n\n  [Size.XSmall]: {\n    button: css`\n      height: 14px;\n      width: 26px;\n    `,\n\n    slider: css`\n      height: 12px;\n      width: 12px;\n\n      ${sliderSelector.checked} {\n        transform: translate3d(12px, 0, 0);\n      }\n\n      ${sliderSelector.disabled} {\n        height: 10px;\n        width: 10px;\n        left: 1px;\n      }\n\n      ${buttonSelectors.checked}:disabled {\n        transform: translate3d(11px, 0, 0);\n      }\n    `,\n  },\n} as const;\n\nconst modeStyles = {\n  [Mode.Light]: {\n    button: css`\n      box-shadow: inset 0 0 5px rgba(6, 22, 33, 0.1);\n\n      &[aria-checked='false']:not(:disabled) {\n        background-color: rgba(61, 79, 88, 0.1);\n        border-color: rgba(18, 22, 22, 0.03);\n      }\n\n      &:disabled {\n        background-color: rgba(6, 22, 33, 0.09);\n        border-color: rgba(6, 22, 33, 0.04);\n        box-shadow: none;\n      }\n    `,\n\n    slider: css`\n      background-color: white;\n      box-shadow: 0 0 2px rgba(28, 192, 97, 0.08), 0 1px 2px rgba(0, 0, 0, 0.25),\n        inset 0 -1px 0 #f1f1f1;\n\n      &:before {\n        background-image: linear-gradient(${uiColors.white}, #f6f6f6);\n      }\n\n      ${sliderSelector.disabled} {\n        box-shadow: none;\n        background-color: rgba(6, 22, 33, 0.09);\n      }\n    `,\n\n    offLabel: css`\n      color: ${uiColors.gray.dark1};\n    `,\n\n    onLabel: css`\n      color: ${uiColors.white};\n    `,\n  },\n\n  [Mode.Dark]: {\n    button: css`\n      box-shadow: inset 0 0 10px rgba(6, 22, 33, 0.15);\n\n      &[aria-checked='false']:not(:disabled) {\n        background-color: rgba(6, 22, 33, 0.4);\n        border-color: rgba(6, 22, 33, 0.1);\n      }\n\n      &:disabled {\n        background-color: rgba(255, 255, 255, 0.15);\n        border-color: rgba(255, 255, 255, 0.1);\n      }\n    `,\n\n    slider: css`\n      ${sliderSelector.checked} {\n        background-color: white;\n        box-shadow: 0 0 2px rgba(0, 0, 0, 0.08), 0 1px 2px rgba(0, 0, 0, 0.25),\n          inset 0 -1px 0 #cdcdcd;\n\n        &:before {\n          opacity: 0;\n        }\n\n        &:after {\n          opacity: 1;\n        }\n      }\n\n      ${sliderSelector.unchecked} {\n        background-color: #6f767b;\n        box-shadow: 0 0 2px rgba(0, 0, 0, 0.15), 0 1px 2px rgba(0, 0, 0, 0.25),\n          inset 0 -1px 0 ${uiColors.gray.dark2};\n      }\n\n      ${sliderSelector.disabled} {\n        background-color: rgba(255, 255, 255, 0.15);\n        background-image: none;\n        box-shadow: none;\n      }\n    `,\n\n    offLabel: css`\n      color: ${uiColors.gray.light1};\n    `,\n\n    onLabel: css`\n      color: ${uiColors.white};\n      text-shadow: 0 0 2px ${uiColors.blue.base};\n    `,\n  },\n} as const;\n\ninterface BaseToggleProps {\n  /**\n   * Sets the size of the toggle.\n   *\n   * default: `'default'`\n   */\n  size?: Size;\n\n  /**\n   * Determines if the Toggle will render the dark mode styles.\n   *\n   * default: `false`\n   */\n  darkMode?: boolean;\n\n  /**\n   * Sets the checked state of the Toggle.\n   */\n  checked?: boolean;\n\n  /**\n   * Disables the Toggle.\n   *\n   * default: `false`\n   */\n  disabled?: boolean;\n\n  /**\n   * `onChange` fires when the internally-managed `checked` state of the component is updated. Receives the updated checked state of the toggle as its first argument, and the associated mouse event as the second.\n   */\n  onChange?: (\n    checked: boolean,\n    mouseEvent: React.MouseEvent<HTMLButtonElement>,\n  ) => void;\n\n  /**\n   * Adds a className to the outermost element.\n   */\n  className?: string;\n}\n\ntype ToggleProps = Either<\n  BaseToggleProps &\n    Omit<HTMLElementProps<'button', never>, keyof BaseToggleProps>,\n  'aria-label' | 'aria-labelledby'\n>;\n\nfunction Toggle({\n  className,\n  size = Size.Default,\n  darkMode = false,\n  disabled = false,\n  onChange: onChangeProp,\n  onClick: onClickProp,\n  checked: controlledChecked,\n  ...rest\n}: ToggleProps) {\n  validateAriaLabelProps(rest, Toggle.displayName);\n\n  const [buttonElement, setButtonElement] = useState<HTMLButtonElement | null>(\n    null,\n  );\n  const [checked, setChecked] = useState(false);\n\n  const isControlled = typeof controlledChecked === 'boolean';\n  const normalizedChecked = controlledChecked ?? checked;\n\n  const onClick: React.MouseEventHandler<HTMLButtonElement> = useCallback(\n    e => {\n      onClickProp?.(e);\n\n      if (isControlled) {\n        onChangeProp?.(!controlledChecked, e);\n      } else {\n        setChecked(curr => {\n          const updatedState = !curr;\n          onChangeProp?.(updatedState, e);\n          return updatedState;\n        });\n      }\n    },\n    [isControlled, controlledChecked, onClickProp, onChangeProp],\n  );\n\n  const {\n    button: buttonModeStyles,\n    slider: sliderModeStyles,\n    offLabel: offLabelModeStyles,\n    onLabel: onLabelModeStyles,\n  } = modeStyles[darkMode ? Mode.Dark : Mode.Light];\n\n  const { button: buttonSizeStyles, slider: sliderSizeStyles } = sizeStyles[\n    size\n  ];\n\n  return (\n    <InteractionRing\n      darkMode={darkMode}\n      disabled={disabled}\n      borderRadius=\"50px\"\n      focusTargetElement={buttonElement}\n      className={className}\n    >\n      <button\n        role=\"switch\"\n        type=\"button\"\n        onClick={onClick}\n        aria-checked={normalizedChecked}\n        disabled={disabled}\n        aria-disabled={disabled}\n        ref={setButtonElement}\n        className={cx(baseButtonStyles, buttonModeStyles, buttonSizeStyles)}\n        {...toggleButton.prop}\n        {...rest}\n      >\n        {size === 'default' && !disabled && (\n          <>\n            <span\n              aria-hidden={true}\n              className={cx(baseLabelStyle, onLabelStyle, onLabelModeStyles)}\n            >\n              On\n            </span>\n\n            <span\n              aria-hidden={true}\n              className={cx(baseLabelStyle, offLabelStyle, offLabelModeStyles)}\n            >\n              Off\n            </span>\n          </>\n        )}\n\n        <div\n          className={cx(baseSliderStyles, sliderSizeStyles, sliderModeStyles)}\n        />\n      </button>\n    </InteractionRing>\n  );\n}\n\nToggle.displayName = 'Toggle';\n\nToggle.propTypes = {\n  size: PropTypes.oneOf(['default', 'small', 'xsmall']),\n  darkMode: PropTypes.bool,\n  checked: PropTypes.bool,\n  disabled: PropTypes.bool,\n  className: PropTypes.string,\n  onChange: PropTypes.func,\n  onClick: PropTypes.func,\n};\n\nexport default Toggle;\n"],"names":["_templateObject","_templateObject2","_templateObject3","_templateObject4","_templateObject5","_templateObject6","_templateObject7","_templateObject8","_templateObject9","_templateObject10","_templateObject11","_sizeStyles","_templateObject12","_templateObject13","_templateObject14","_templateObject15","_templateObject16","_templateObject17","_templateObject18","_templateObject19","_modeStyles","_excluded","Size","Default","Small","XSmall","Mode","toggleButton","createDataProp","buttonSelectors","checked","concat","selector","unchecked","disabled","sliderSelector","baseSliderStyles","css","_taggedTemplateLiteral","baseButtonStyles","baseLabelStyle","onLabelStyle","offLabelStyle","sizeStyles","_defineProperty","button","slider","modeStyles","uiColors","white","offLabel","gray","dark1","onLabel","dark2","light1","blue","base","Toggle","_ref","className","_ref$size","size","_ref$darkMode","darkMode","_ref$disabled","onChangeProp","onChange","onClickProp","onClick","controlledChecked","rest","_objectWithoutProperties","validateAriaLabelProps","displayName","_useState2","_slicedToArray","useState","buttonElement","setButtonElement","_useState4","setChecked","isControlled","normalizedChecked","useCallback","e","curr","updatedState","_modeStyles2","buttonModeStyles","sliderModeStyles","offLabelModeStyles","onLabelModeStyles","_sizeStyles$size","buttonSizeStyles","sliderSizeStyles","___EmotionJSX","InteractionRing","borderRadius","focusTargetElement","_extends","role","type","aria-checked","aria-disabled","ref","cx","prop","React","Fragment","aria-hidden","propTypes","PropTypes","oneOf","bool","string","func"],"mappings":"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"}