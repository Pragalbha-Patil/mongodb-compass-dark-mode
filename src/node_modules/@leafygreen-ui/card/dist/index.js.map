{"version":3,"file":"index.js","sources":["../src/Card.tsx"],"sourcesContent":["import React from 'react';\nimport { transparentize } from 'polished';\nimport PropTypes from 'prop-types';\nimport { css, cx } from '@leafygreen-ui/emotion';\nimport { uiColors } from '@leafygreen-ui/palette';\nimport Box, { BoxProps, ExtendableBox } from '@leafygreen-ui/box';\n\nexport const ContentStyle = {\n  None: 'none',\n  Clickable: 'clickable',\n} as const;\n\nexport type ContentStyle = typeof ContentStyle[keyof typeof ContentStyle];\n\nconst Mode = {\n  Dark: 'dark',\n  Light: 'light',\n} as const;\n\ntype Mode = typeof Mode[keyof typeof Mode];\n\ninterface ColorSet {\n  containerStyle: string;\n  clickableStyle: string;\n}\n\nconst lightBaseBoxShadow = `0 4px 10px -4px ${transparentize(\n  0.7,\n  uiColors.black,\n)}`;\nconst darkBaseBoxShadow = `0 4px 20px -4px  ${transparentize(0.3, '#000')}`;\nconst lightHoverBoxShadow = `0 2px 6px -2px ${transparentize(\n  0.4,\n  uiColors.black,\n)}`;\nconst darkHoverBoxShadow = `0 2px 12px -2px ${transparentize(0.1, '#000')}`;\nconst focusBoxShadow = `0 0 0 3px ${uiColors.focus}`;\n\nconst colorSet: Record<Mode, ColorSet> = {\n  [Mode.Light]: {\n    containerStyle: css`\n      border: 1px solid ${uiColors.gray.light2};\n      box-shadow: 0 4px 10px -4px ${transparentize(0.7, uiColors.black)};\n      background-color: white;\n      color: ${uiColors.gray.dark3};\n    `,\n    clickableStyle: css`\n      cursor: pointer;\n\n      &:focus {\n        outline: none;\n        box-shadow: ${lightBaseBoxShadow}, ${focusBoxShadow};\n      }\n\n      &:hover {\n        border: 1px solid ${uiColors.gray.light2};\n        box-shadow: ${lightHoverBoxShadow};\n\n        &:focus {\n          box-shadow: ${lightHoverBoxShadow}, ${focusBoxShadow};\n        }\n      }\n    `,\n  },\n  [Mode.Dark]: {\n    containerStyle: css`\n      border: 1px solid ${uiColors.gray.dark2};\n      box-shadow: ${darkBaseBoxShadow};\n      background-color: ${uiColors.gray.dark2};\n      color: ${uiColors.white};\n    `,\n    clickableStyle: css`\n      cursor: pointer;\n\n      &:focus {\n        outline: none;\n        box-shadow: ${darkBaseBoxShadow}, ${focusBoxShadow};\n      }\n\n      &:hover {\n        box-shadow: ${darkHoverBoxShadow};\n\n        &:focus {\n          box-shadow: ${darkHoverBoxShadow}, ${focusBoxShadow};\n        }\n      }\n    `,\n  },\n};\n\nconst containerStyle = css`\n  position: relative;\n  border-radius: 7px;\n  transition: border 150ms ease-in-out, box-shadow 150ms ease-in-out;\n`;\n\ninterface CardProps {\n  className?: string;\n  contentStyle?: ContentStyle;\n  darkMode?: boolean;\n}\n\nconst Card: ExtendableBox<CardProps> = ({\n  className,\n  contentStyle,\n  darkMode = false,\n  ...rest\n}: BoxProps<'div', CardProps>) => {\n  if (\n    contentStyle === undefined &&\n    (('onClick' in rest && rest.onClick !== undefined) ||\n      ('href' in rest && !!rest.href))\n  ) {\n    contentStyle = ContentStyle.Clickable;\n  }\n\n  const mode = darkMode ? Mode.Dark : Mode.Light;\n\n  return (\n    <Box\n      // @ts-expect-error\n      className={cx(\n        containerStyle,\n        colorSet[mode].containerStyle,\n        {\n          [colorSet[mode].clickableStyle]:\n            contentStyle === ContentStyle.Clickable,\n        },\n        className,\n      )}\n      {...rest}\n    />\n  );\n};\n\nCard.displayName = 'Card';\n\nCard.propTypes = {\n  className: PropTypes.string,\n};\n\nexport default Card;\n"],"names":["_templateObject","_templateObject2","_templateObject3","_templateObject4","_colorSet","_templateObject5","_excluded","ContentStyle","None","Clickable","Mode","lightBaseBoxShadow","concat","transparentize","uiColors","black","darkBaseBoxShadow","lightHoverBoxShadow","darkHoverBoxShadow","focusBoxShadow","focus","colorSet","_defineProperty","containerStyle","css","_taggedTemplateLiteral","gray","light2","dark3","clickableStyle","dark2","white","Card","_ref","className","contentStyle","_ref$darkMode","darkMode","rest","_objectWithoutProperties","undefined","onClick","href","mode","___EmotionJSX","Box","_extends","cx","displayName","propTypes","PropTypes","string"],"mappings":"yjDAIA,IAEIA,EAAiBC,EAAkBC,EAAkBC,EAAkBC,EAAWC,EAFlFC,EAAY,CAAC,YAAa,eAAgB,YAWnCC,EAAe,CACxBC,KAAM,OACNC,UAAW,aAETC,EACI,OADJA,EAEK,QAELC,EAAqB,mBAAmBC,OAAOC,iBAAe,GAAKC,WAASC,QAC5EC,EAAoB,oBAAoBJ,OAAOC,iBAAe,GAAK,SACnEI,EAAsB,kBAAkBL,OAAOC,iBAAe,GAAKC,WAASC,QAC5EG,EAAqB,mBAAmBN,OAAOC,iBAAe,GAAK,SACnEM,EAAiB,aAAaP,OAAOE,WAASM,OAC9CC,GAA4BC,EAAhBlB,EAAY,GAA+BM,EAAY,CACrEa,eAAgBC,MAAIxB,IAAoBA,EAAkByB,EAAuB,CAAC,6BAA8B,wCAAyC,mDAAoD,aAAcX,WAASY,KAAKC,OAAQd,iBAAe,GAAKC,WAASC,OAAQD,WAASY,KAAKE,OACpSC,eAAgBL,MAAIvB,IAAqBA,EAAmBwB,EAAuB,CAAC,4FAA6F,KAAM,4DAA6D,0BAA2B,iDAAkD,KAAM,iCAAkCd,EAAoBQ,EAAgBL,WAASY,KAAKC,OAAQV,EAAqBA,EAAqBE,KAC3cG,EAAgBlB,EAAWM,EAAW,CACxCa,eAAgBC,MAAItB,IAAqBA,EAAmBuB,EAAuB,CAAC,6BAA8B,wBAAyB,8BAA+B,mBAAoB,aAAcX,WAASY,KAAKI,MAAOd,EAAmBF,WAASY,KAAKI,MAAOhB,WAASiB,OAClRF,eAAgBL,MAAIrB,IAAqBA,EAAmBsB,EAAuB,CAAC,4FAA6F,KAAM,sDAAuD,iDAAkD,KAAM,iCAAkCT,EAAmBG,EAAgBD,EAAoBA,EAAoBC,KACjZf,GACAmB,EAAiBC,MAAInB,IAAqBA,EAAmBoB,EAAuB,CAAC,8HAErFO,EAAO,SAAcC,GACvB,IAAIC,EAAYD,EAAKC,UACjBC,EAAeF,EAAKE,aACpBC,EAAgBH,EAAKI,SACrBA,OAA6B,IAAlBD,GAAmCA,EAC9CE,EAAOC,EAAyBN,EAAM3B,QAErBkC,IAAjBL,IAA+B,YAAaG,QAAyBE,IAAjBF,EAAKG,SAAyB,SAAUH,GAAUA,EAAKI,QAC7GP,EAAe5B,EAAaE,WAG9B,IAAIkC,EAAON,EAAW3B,EAAYA,EAClC,OAAOkC,MAAcC,UACnBC,EAAS,CACTZ,UAAWa,KAAGxB,EAAgBF,EAASsB,GAAMpB,eAAgBD,EAAgB,GAAID,EAASsB,GAAMd,eAAgBM,IAAiB5B,EAAaE,WAAYyB,IACzJI,KAGLN,EAAKgB,YAAc,OACnBhB,EAAKiB,UAAY,CACff,UAAWgB,UAAUC"}