import React from 'react';
import PropTypes from 'prop-types';
declare const Variant: {
    readonly Success: "success";
    readonly Note: "note";
    readonly Warning: "warning";
    readonly Important: "important";
    readonly Progress: "progress";
};
declare type Variant = typeof Variant[keyof typeof Variant];
export { Variant };
export interface ToastProps extends Omit<React.ComponentProps<'div'>, 'title'> {
    /**
     * Optional text shown in bold above the body text.
     */
    title?: React.ReactNode;
    /**
     * Required main text for the Toast.
     */
    body: React.ReactNode;
    /**
     * Optional className passed to the wrapping <div /> for the toast.
     */
    className?: string;
    /**
     * Required style variant to render the Toast as.
     */
    variant: Variant;
    /**
     * Optional number between 0 and 1 that sets the progress bar's progress. Note that the progress bar is only rendered when the Toast variant is set to `'progress'`.
     *
     * **Default:** `1`
     */
    progress?: number;
    /**
     * Optional boolean that renders the Toast and makes it visible when true.
     *
     * **Default:** `false`
     */
    open?: boolean;
    /**
     * Optional click event handler that, when set, renders a close button that receives the passed handler.
     */
    close?: React.MouseEventHandler;
}
declare function Toast({ title, body, className, variant, progress, open, close, ...rest }: ToastProps): JSX.Element;
declare namespace Toast {
    var displayName: string;
    var propTypes: {
        title: PropTypes.Requireable<string | PropTypes.ReactElementLike>;
        body: PropTypes.Validator<string | PropTypes.ReactElementLike>;
        className: PropTypes.Requireable<string>;
        variant: PropTypes.Validator<Variant>;
        progress: PropTypes.Requireable<number>;
        open: PropTypes.Requireable<boolean>;
        close: PropTypes.Requireable<(...args: any[]) => any>;
    };
}
export default Toast;
//# sourceMappingURL=Toast.d.ts.map