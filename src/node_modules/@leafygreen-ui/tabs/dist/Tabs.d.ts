import React from 'react';
import PropTypes from 'prop-types';
import { Either } from '@leafygreen-ui/lib';
declare const Mode: {
    readonly Dark: "dark";
    readonly Light: "light";
};
declare type Mode = typeof Mode[keyof typeof Mode];
export { Mode };
declare type ReactEmpty = null | undefined | false | '';
export interface TabsProps {
    /**
     * Content that will appear inside of Tabs component. Should be comprised of at least two Tabs.
     */
    children: Array<React.ReactElement | ReactEmpty>;
    /**
     * Callback to be executed when Tab is selected. Receives index of activated Tab as the first argument.
     */
    setSelected?: any;
    /**
     * Index of the Tab that should appear active. If value passed to selected prop, component will be controlled by consumer.
     */
    selected?: number;
    /**
     * className supplied to Tabs container.
     */
    className?: string;
    /**
     * determines if component will appear for Dark Mode
     * @default false
     */
    darkMode?: boolean;
    /**
     * HTML Element that wraps title in Tab List.
     */
    as?: React.ElementType<any>;
    /**
     * Accessible label that describes the set of tabs
     */
    ['aria-label']?: string;
    /**
     * References id of label external to the component that describes the set of tabs
     */
    ['aria-labelledby']?: string;
}
declare type AriaLabels = 'aria-label' | 'aria-labelledby';
export declare type AccessibleTabsProps = Either<TabsProps, AriaLabels>;
/**
 * # Tabs
 *
 * Tabs component
 *
 * ```
<Tabs selected={0} setSelected={() => execute callback when new Tab is selected}>
  <Tab name='First Tab'>Tab 1</Tab>
  <Tab name='Second Tab'>Tab 2</Tab>
</Tabs>
```
 * @param props.children Content to appear inside of Tabs component.
 * @param props.setSelected Callback to be executed when Tab is selected. Receives index of activated Tab as the first argument.
 * @param props.selected Index of the Tab that should appear active. If value passed, component will be controlled by consumer.
 * @param props.className className applied to Tabs container.
 * @param props.as HTML Element that wraps name in Tab List.
 */
declare function Tabs(props: AccessibleTabsProps): JSX.Element;
declare namespace Tabs {
    var displayName: string;
    var propTypes: {
        children: PropTypes.Requireable<PropTypes.ReactNodeLike>;
        setSelected: PropTypes.Requireable<(...args: any[]) => any>;
        selected: PropTypes.Requireable<number>;
        className: PropTypes.Requireable<string>;
        as: PropTypes.Requireable<string | ((...args: any[]) => any)>;
    };
}
export default Tabs;
//# sourceMappingURL=Tabs.d.ts.map