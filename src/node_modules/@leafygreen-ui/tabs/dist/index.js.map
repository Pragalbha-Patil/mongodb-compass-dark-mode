{"version":3,"file":"index.js","sources":["../src/getNodeTextContent.ts","../src/TabTitle.tsx","../src/InternalTab.tsx","../src/Tabs.tsx","../src/Tab.tsx"],"sourcesContent":["import { ReactElement, ReactNode, ReactText } from 'react';\n\n/**\n * Returns the text string of a React node\n */\nexport function getNodeTextContent(node?: ReactNode): string {\n  if (isText(node)) {\n    return node.toString().trim();\n  }\n\n  if (Array.isArray(node)) {\n    return node.map(getNodeTextContent).join(' ').trim();\n  }\n\n  if (hasChildren(node)) {\n    return getNodeTextContent(node.props.children);\n  }\n\n  return '';\n}\n\nfunction hasChildren(item?: any): item is ReactElement {\n  return item && typeof item === 'object' && item.props;\n}\n\nfunction isText(item?: any): item is ReactText {\n  return typeof item === 'string' || typeof item === 'number';\n}\n","import React, { useState, useRef, useEffect, RefObject } from 'react';\nimport { css, cx } from '@leafygreen-ui/emotion';\nimport { uiColors } from '@leafygreen-ui/palette';\nimport Box, { ExtendableBox } from '@leafygreen-ui/box';\nimport { useUsingKeyboardContext } from '@leafygreen-ui/leafygreen-provider';\nimport { fontFamilies } from '@leafygreen-ui/tokens';\nimport { useIsomorphicLayoutEffect } from '@leafygreen-ui/hooks';\nimport { Mode } from './Tabs';\nimport { getNodeTextContent } from './getNodeTextContent';\n\nconst modeColors = {\n  light: {\n    listTitleColor: css`\n      color: ${uiColors.gray.dark1};\n    `,\n    listTitleHover: css`\n      &:hover {\n        cursor: pointer;\n\n        &:not(:focus) {\n          color: ${uiColors.gray.dark3};\n\n          &:after {\n            background-color: ${uiColors.gray.light2};\n          }\n        }\n      }\n    `,\n    listTitleFocus: css`\n      &:focus {\n        color: ${uiColors.blue.base};\n\n        &:after {\n          background-color: ${uiColors.blue.base};\n        }\n      }\n    `,\n  },\n\n  dark: {\n    listTitleColor: css`\n      color: ${uiColors.gray.light1};\n    `,\n    listTitleHover: css`\n      &:hover {\n        cursor: pointer;\n\n        &:not(:focus) {\n          color: ${uiColors.white};\n\n          &:after {\n            background-color: ${uiColors.gray.dark1};\n          }\n        }\n      }\n    `,\n    listTitleFocus: css`\n      &:focus {\n        color: ${uiColors.blue.light1};\n\n        &:after {\n          background-color: ${uiColors.focus};\n        }\n      }\n    `,\n  },\n};\n\nconst listTitleSelected = css`\n  &:after {\n    transform: scaleX(1);\n    background-color: ${uiColors.green.base};\n  }\n\n  &:hover:after {\n    transform: scaleX(1);\n    background-color: ${uiColors.green.base};\n  }\n`;\n\nconst listTitle = css`\n  background-color: transparent;\n  border: 0px;\n  padding: 12px 16px;\n  text-decoration: none;\n  max-width: 300px;\n  white-space: nowrap;\n  transition: 150ms color ease-in-out;\n  font-family: ${fontFamilies.default};\n  font-weight: 600;\n  font-size: 16px;\n  position: relative;\n\n  &:focus {\n    outline: none;\n  }\n\n  &:after {\n    content: '';\n    position: absolute;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    height: 4px;\n    border-radius: 4px 4px 0 0;\n    transition: all 150ms ease-in-out;\n    background-color: transparent;\n    transform: scaleX(0.8);\n  }\n\n  &:hover:after {\n    transform: scaleX(0.95);\n  }\n\n  &:active:after {\n    &:after {\n      transform: scaleX(1);\n      background-color: ${uiColors.green.base};\n    }\n  }\n`;\n\nconst textOverflowStyles = css`\n  cursor: pointer;\n  overflow: hidden;\n  text-overflow: ellipsis;\n`;\n\ninterface BaseTabTitleProps {\n  darkMode?: boolean;\n  selected?: boolean;\n  href?: string;\n  children?: React.ReactNode;\n  className?: string;\n  disabled?: boolean;\n  isAnyTabFocused?: boolean;\n  parentRef?: HTMLDivElement;\n  [key: string]: any;\n}\n\nconst TabTitle: ExtendableBox<BaseTabTitleProps, 'button'> = ({\n  selected = false,\n  disabled = false,\n  children,\n  className,\n  darkMode,\n  parentRef,\n  ...rest\n}: BaseTabTitleProps) => {\n  const { usingKeyboard: showFocus } = useUsingKeyboardContext();\n  const [showEllipsis, setShowEllipsis] = useState(false);\n  const titleRef = useRef<HTMLAnchorElement | HTMLButtonElement>(null);\n\n  const mode = darkMode ? Mode.Dark : Mode.Light;\n\n  // Checks to see if the current activeElement is a part of the same tab set\n  // as the current TabTitle. If so, and the current TabTitle is not disabled\n  // and is selected, we manually move focus to that TabTitle.\n  useEffect(() => {\n    const tabsList = Array.from(parentRef?.children ?? []);\n    const activeEl = document.activeElement;\n\n    if (\n      activeEl &&\n      tabsList.indexOf(activeEl) !== -1 &&\n      !disabled &&\n      selected &&\n      titleRef.current\n    ) {\n      titleRef.current.focus();\n    }\n  }, [parentRef, disabled, selected, titleRef]);\n\n  useIsomorphicLayoutEffect(() => {\n    const titleNode = titleRef.current;\n\n    if (titleNode == null) {\n      return;\n    }\n\n    // Max-width of TabTitle is 300 pixels, and we only want to show ellipsis when the title exceeds this length\n    // When this style isn't conditionally applied, TabTitle will automatically truncate based on available space in the viewport.\n    if (titleNode.scrollWidth > 300) {\n      setShowEllipsis(true);\n    }\n  }, [titleRef, setShowEllipsis]);\n\n  const sharedTabProps = {\n    ...rest,\n    className: cx(\n      listTitle,\n      modeColors[mode].listTitleColor,\n      {\n        [listTitleSelected]: selected,\n        [modeColors[mode].listTitleFocus]: showFocus,\n        [textOverflowStyles]: showEllipsis,\n        [modeColors[mode].listTitleHover]: !disabled && !selected,\n      },\n      className,\n    ),\n    role: 'tab',\n    tabIndex: selected ? 0 : -1,\n    ['aria-selected']: selected,\n    name: getNodeTextContent(rest.name),\n  } as const;\n\n  if (typeof rest.href === 'string') {\n    return (\n      <Box\n        as=\"a\"\n        ref={titleRef as RefObject<HTMLAnchorElement>}\n        {...sharedTabProps}\n      >\n        {children}\n      </Box>\n    );\n  }\n\n  return (\n    <Box\n      as=\"button\"\n      ref={titleRef as RefObject<HTMLButtonElement>}\n      {...sharedTabProps}\n    >\n      {children}\n    </Box>\n  );\n};\n\nTabTitle.displayName = 'TabTitle';\n\nexport default TabTitle;\n","import React, { useMemo } from 'react';\nimport Portal from '@leafygreen-ui/portal';\nimport { useIdAllocator } from '@leafygreen-ui/hooks';\nimport TabTitle from './TabTitle';\nimport { TabsProps } from './Tabs';\n\ntype InternalTabProps = Pick<TabsProps, 'as' | 'darkMode' | 'className'> & {\n  child: React.ReactElement;\n  onKeyDown: (e: KeyboardEvent) => void;\n  onClick?: (e: React.MouseEvent) => void;\n  isAnyTabFocused?: boolean;\n  selected: boolean;\n  tabRef: HTMLDivElement | null;\n  panelRef: HTMLDivElement | null;\n};\n\nconst InternalTab = React.memo(\n  ({ child, selected, tabRef, panelRef, ...tabProps }: InternalTabProps) => {\n    const { id: idProp, name } = child.props;\n\n    const panelId = useIdAllocator({ prefix: 'tab-panel' });\n    const tabId = useIdAllocator({ prefix: 'tab', id: idProp });\n\n    const tab = (\n      <TabTitle\n        {...tabProps}\n        selected={selected}\n        id={tabId}\n        aria-controls={panelId}\n      >\n        {name}\n      </TabTitle>\n    );\n\n    const panel = useMemo(\n      () =>\n        React.cloneElement(child, {\n          id: panelId,\n          selected: selected,\n          ['aria-labelledby']: tabId,\n        }),\n      [child, panelId, selected, tabId],\n    );\n\n    return (\n      <>\n        <Portal container={tabRef}>{tab}</Portal>\n        <Portal container={panelRef}>{panel}</Portal>\n      </>\n    );\n  },\n);\n\nInternalTab.displayName = 'InternalTab';\n\nexport default InternalTab;\n","import React, { useState, useMemo, useCallback } from 'react';\nimport PropTypes from 'prop-types';\nimport { css, cx } from '@leafygreen-ui/emotion';\nimport { uiColors } from '@leafygreen-ui/palette';\nimport { keyMap, isComponentType, Either } from '@leafygreen-ui/lib';\nimport { validateAriaLabelProps } from '@leafygreen-ui/a11y';\nimport InternalTab from './InternalTab';\n\nconst Mode = {\n  Dark: 'dark',\n  Light: 'light',\n} as const;\n\ntype Mode = typeof Mode[keyof typeof Mode];\n\nexport { Mode };\n\nconst modeColors = {\n  [Mode.Light]: {\n    activeStyle: css`\n      color: ${uiColors.green.dark2};\n\n      &:hover:not(:focus) {\n        color: ${uiColors.green.dark2};\n      }\n    `,\n    disabledColor: css`\n      color: ${uiColors.gray.light1};\n    `,\n    underlineColor: css`\n      border-bottom: 1px solid ${uiColors.gray.light2};\n    `,\n  },\n\n  [Mode.Dark]: {\n    activeStyle: css`\n      color: ${uiColors.green.light2};\n\n      &:hover:not(:focus) {\n        color: ${uiColors.green.light2};\n      }\n    `,\n    disabledColor: css`\n      color: ${uiColors.gray.dark1};\n    `,\n    underlineColor: css`\n      border-bottom: 1px solid ${uiColors.gray.dark2};\n    `,\n  },\n};\n\nconst listStyle = css`\n  list-style: none;\n  padding: 0;\n  display: flex;\n  width: 100%;\n  overflow-x: auto;\n\n  /* Remove scrollbar */\n\n  /* Chrome, Edge, Safari and Opera */\n  &::-webkit-scrollbar {\n    display: none;\n  }\n\n  -ms-overflow-style: none; /* IE */\n  scrollbar-width: none; /* Firefox */\n`;\n\nconst disabledStyle = css`\n  cursor: not-allowed;\n`;\n\ntype ReactEmpty = null | undefined | false | '';\n\nexport interface TabsProps {\n  /**\n   * Content that will appear inside of Tabs component. Should be comprised of at least two Tabs.\n   */\n  children: Array<React.ReactElement | ReactEmpty>;\n\n  /**\n   * Callback to be executed when Tab is selected. Receives index of activated Tab as the first argument.\n   */\n  setSelected?: any;\n\n  /**\n   * Index of the Tab that should appear active. If value passed to selected prop, component will be controlled by consumer.\n   */\n  selected?: number;\n\n  /**\n   * className supplied to Tabs container.\n   */\n  className?: string;\n\n  /**\n   * determines if component will appear for Dark Mode\n   * @default false\n   */\n  darkMode?: boolean;\n\n  /**\n   * HTML Element that wraps title in Tab List.\n   */\n  as?: React.ElementType<any>;\n\n  /**\n   * Accessible label that describes the set of tabs\n   */\n  ['aria-label']?: string;\n\n  /**\n   * References id of label external to the component that describes the set of tabs\n   */\n  ['aria-labelledby']?: string;\n}\n\ntype AriaLabels = 'aria-label' | 'aria-labelledby';\n\nexport type AccessibleTabsProps = Either<TabsProps, AriaLabels>;\n\n/**\n * # Tabs\n *\n * Tabs component\n *\n * ```\n<Tabs selected={0} setSelected={() => execute callback when new Tab is selected}>\n  <Tab name='First Tab'>Tab 1</Tab>\n  <Tab name='Second Tab'>Tab 2</Tab>\n</Tabs>\n```\n * @param props.children Content to appear inside of Tabs component.\n * @param props.setSelected Callback to be executed when Tab is selected. Receives index of activated Tab as the first argument.\n * @param props.selected Index of the Tab that should appear active. If value passed, component will be controlled by consumer.\n * @param props.className className applied to Tabs container.\n * @param props.as HTML Element that wraps name in Tab List.\n */\nfunction Tabs(props: AccessibleTabsProps) {\n  validateAriaLabelProps(props, 'Tabs');\n\n  const {\n    children,\n    setSelected: setControlledSelected,\n    selected: controlledSelected,\n    className,\n    darkMode = false,\n    as = 'button',\n    'aria-labelledby': ariaLabelledby,\n    'aria-label': ariaLabel,\n    ...rest\n  } = props;\n  const mode = darkMode ? Mode.Dark : Mode.Light;\n\n  const [tabNode, setTabNode] = useState<HTMLDivElement | null>(null);\n  const [panelNode, setPanelNode] = useState<HTMLDivElement | null>(null);\n\n  const accessibilityProps = {\n    ['aria-label']: ariaLabel,\n    ['aria-labelledby']: ariaLabelledby,\n  };\n\n  const childrenArray = useMemo(\n    () => React.Children.toArray(children) as Array<React.ReactElement>,\n    [children],\n  );\n\n  const isControlled = typeof controlledSelected === 'number';\n  const [uncontrolledSelected, setUncontrolledSelected] = useState(\n    childrenArray.findIndex(child => child.props.default || 0),\n  );\n  const selected = isControlled ? controlledSelected : uncontrolledSelected;\n  const setSelected = isControlled\n    ? setControlledSelected\n    : setUncontrolledSelected;\n\n  const handleChange = useCallback(\n    (e: React.SyntheticEvent<Element, MouseEvent>, index: number) => {\n      setSelected?.(index);\n    },\n    [setSelected],\n  );\n\n  const getEnabledIndexes: () => [Array<number>, number] = useCallback(() => {\n    const enabledIndexes = childrenArray\n      .filter(child => !child.props.disabled)\n      .map(child => childrenArray.indexOf(child));\n\n    return [enabledIndexes, enabledIndexes.indexOf(selected!)];\n  }, [childrenArray, selected]);\n\n  const handleArrowKeyPress = useCallback(\n    (e: KeyboardEvent) => {\n      if (!(e.metaKey || e.ctrlKey)) {\n        if (e.keyCode === keyMap.ArrowRight) {\n          const [enabledIndexes, current] = getEnabledIndexes();\n          setSelected?.(enabledIndexes[(current + 1) % enabledIndexes.length]);\n        } else if (e.keyCode === keyMap.ArrowLeft) {\n          const [enabledIndexes, current] = getEnabledIndexes();\n          setSelected?.(\n            enabledIndexes[\n              (current - 1 + enabledIndexes.length) % enabledIndexes.length\n            ],\n          );\n        }\n      }\n    },\n    [getEnabledIndexes, setSelected],\n  );\n\n  const renderedChildren = React.Children.map(children, (child, index) => {\n    if (!isComponentType(child, 'Tab')) {\n      return child;\n    }\n\n    const isTabSelected = index === selected;\n    const { disabled, onClick, onKeyDown, className, ...rest } = child.props;\n\n    const tabProps = {\n      as,\n      disabled,\n      darkMode,\n      parentRef: tabNode,\n      className: cx(\n        {\n          [modeColors[mode].activeStyle]: isTabSelected,\n          [cx(modeColors[mode].disabledColor, disabledStyle)]: disabled,\n        },\n        className,\n      ),\n      onKeyDown: (event: KeyboardEvent) => {\n        onKeyDown?.(event);\n        handleArrowKeyPress(event);\n      },\n      onClick: !disabled\n        ? (event: React.MouseEvent) => {\n            onClick?.(event);\n            handleChange(event, index);\n          }\n        : undefined,\n      ...rest,\n    };\n\n    return (\n      <InternalTab\n        child={child}\n        selected={isTabSelected}\n        tabRef={tabNode}\n        panelRef={panelNode}\n        {...tabProps}\n      />\n    );\n  });\n\n  return (\n    <div {...rest} className={className}>\n      {renderedChildren}\n      <div\n        className={cx(listStyle, modeColors[mode].underlineColor)}\n        role=\"tablist\"\n        ref={setTabNode}\n        aria-orientation=\"horizontal\"\n        {...accessibilityProps}\n      />\n\n      <div ref={setPanelNode} />\n    </div>\n  );\n}\n\nTabs.displayName = 'Tabs';\n\nTabs.propTypes = {\n  children: PropTypes.node,\n  setSelected: PropTypes.func,\n  selected: PropTypes.number,\n  className: PropTypes.string,\n  as: PropTypes.oneOfType([PropTypes.string, PropTypes.func]),\n};\n\nexport default Tabs;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport interface TabProps {\n  /**\n   * Content that will appear as the title in the Tab list.\n   */\n  name: React.ReactNode;\n\n  /**\n   * Content that will appear inside of Tab panel.\n   */\n  children?: React.ReactNode;\n\n  /**\n   * Boolean that determines if the Tab is disabled.\n   */\n  disabled?: boolean;\n\n  /**\n   * If Tabs component is uncontrolled, this determines what Tab will be selected on first render.\n   */\n  default?: boolean;\n\n  /**\n   * Adds a className to the root element.\n   */\n  className?: string;\n\n  /**\n   * Destination when name is rendered as `a` tag.\n   */\n  href?: string;\n\n  /**\n   * Destination when name is rendered as `Link` tag.\n   */\n  to?: string;\n\n  selected?: boolean;\n\n  ariaControl?: string;\n\n  // Done in order to support any Router system, such that TabTitle component can accept any URL destination prop.\n  [key: string]: any;\n}\n\n/**\n * # Tab\n *\n * Tab panel component\n *\n * ```\n  <Tab name='First Tab'>Tab 1</Tab>\n```\n * @param props.children Content that will appear inside of Tab panel.\n * @param props.disabled Boolean that determines if the Tab is disabled.\n * @param props.name Name that will appear in Tab List.\n * @param props.className Adds a className to the root element.\n * @param props.default If Tabs component is uncontrolled, this determines what Tab will be selected on first render.\n * @param props.href Destination when name is rendered as `a` tag.\n * @param props.to Destination when name is rendered as `Link` tag.\n *\n */\nfunction Tab({ selected, children, ...rest }: TabProps) {\n  // default and name are not an HTML properties\n  // onClick applies to TabTitle component, not Tab component\n  delete rest.default, delete rest.name, delete rest.onClick, delete rest.href;\n\n  return (\n    <div {...rest} role=\"tabpanel\">\n      {selected ? children : null}\n    </div>\n  );\n}\n\nTab.displayName = 'Tab';\n\nTab.propTypes = {\n  selected: PropTypes.bool,\n  children: PropTypes.node,\n  name: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),\n  content: PropTypes.node,\n  disabled: PropTypes.bool,\n  ariaControl: PropTypes.string,\n};\n\nexport default Tab;\n"],"names":["getNodeTextContent","node","item","toString","trim","Array","isArray","map","join","_typeof","props","hasChildren","children","_templateObject","_templateObject2","_templateObject3","_templateObject4","_templateObject5","_templateObject6","_templateObject7","_templateObject8","_templateObject9","_excluded","modeColors","light","listTitleColor","css","_taggedTemplateLiteral","uiColors","gray","dark1","listTitleHover","dark3","light2","listTitleFocus","blue","base","dark","light1","white","focus","listTitleSelected","green","listTitle","fontFamilies","default","textOverflowStyles","TabTitle","_ref","_cx","_objectSpread2","_ref$selected","selected","_ref$disabled","disabled","className","darkMode","parentRef","rest","_objectWithoutProperties","showFocus","useUsingKeyboardContext","usingKeyboard","_useState2","_slicedToArray","useState","showEllipsis","setShowEllipsis","titleRef","useRef","mode","Mode","Dark","Light","useEffect","_parentRef$children","tabsList","from","activeEl","document","activeElement","indexOf","current","useIsomorphicLayoutEffect","titleNode","scrollWidth","sharedTabProps","_objectSpread","cx","_defineProperty","role","tabIndex","name","href","___EmotionJSX","Box","_extends","as","ref","displayName","InternalTab","React","memo","child","tabRef","panelRef","tabProps","_child$props","idProp","id","panelId","useIdAllocator","prefix","tabId","tab","aria-controls","panel","useMemo","cloneElement","Fragment","Portal","container","_modeColors","_excluded2","activeStyle","dark2","disabledColor","underlineColor","listStyle","disabledStyle","Tabs","_accessibilityProps","validateAriaLabelProps","setControlledSelected","setSelected","controlledSelected","_props$darkMode","_props$as","ariaLabelledby","ariaLabel","tabNode","setTabNode","_useState4","panelNode","setPanelNode","accessibilityProps","childrenArray","Children","toArray","isControlled","_useState6","findIndex","uncontrolledSelected","setUncontrolledSelected","handleChange","useCallback","e","index","getEnabledIndexes","enabledIndexes","filter","handleArrowKeyPress","metaKey","ctrlKey","keyCode","keyMap","ArrowRight","_getEnabledIndexes2","length","ArrowLeft","_getEnabledIndexes4","_enabledIndexes","_current","renderedChildren","isComponentType","isTabSelected","onClick","_onKeyDown","onKeyDown","event","undefined","aria-orientation","propTypes","PropTypes","func","number","string","oneOfType","Tab","bool","content","ariaControl"],"mappings":"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"}