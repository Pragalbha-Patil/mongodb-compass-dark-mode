import React from 'react';
import PropTypes from 'prop-types';
import { HTMLElementProps } from '@leafygreen-ui/lib';
import { RadioGroupProps } from './RadioGroup';
declare const Mode: {
    readonly Dark: "dark";
    readonly Light: "light";
};
declare type Mode = typeof Mode[keyof typeof Mode];
export { Mode };
export declare type RadioProps = Omit<HTMLElementProps<'input', never>, 'size'> & Pick<RadioGroupProps, 'darkMode' | 'size'> & {
    default?: boolean;
    id?: string | number;
};
/**
 * # Radio
 *
 * Radio component
 *
 * ```
  <Radio value='radio-1'>Radio 1</Radio>
```
 * @param props.disabled Boolean that determines if the Radio is disabled.
 * @param props.children Content that will appear inside of Radio.
 * @param props.value Used to determine what Radio is active.
 * @param props.id Id for Radio and respective label.
 * @param props.default If RadioGroup is uncontrolled, the default property makes this Radio checked on the initial render.
 * @param props.className className supplied to Radio container.
 * @param props.size Size of Radio buttons.
 */
declare function Radio({ children, className, onChange, value, disabled, id, name, darkMode, checked, size, ...rest }: RadioProps): JSX.Element;
declare namespace Radio {
    var displayName: string;
    var propTypes: {
        checked: PropTypes.Requireable<boolean>;
        disabled: PropTypes.Requireable<boolean>;
        className: PropTypes.Requireable<string>;
        children: PropTypes.Requireable<PropTypes.ReactNodeLike>;
        onChange: PropTypes.Requireable<(...args: any[]) => any>;
        value: PropTypes.Validator<React.ReactText>;
        id: PropTypes.Requireable<string>;
        name: PropTypes.Requireable<string>;
        size: PropTypes.Requireable<string>;
        default: PropTypes.Requireable<boolean>;
        darkMode: PropTypes.Requireable<boolean>;
    };
}
export default Radio;
//# sourceMappingURL=Radio.d.ts.map