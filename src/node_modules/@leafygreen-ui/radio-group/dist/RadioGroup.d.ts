import React from 'react';
import PropTypes from 'prop-types';
import { Size } from './types';
export interface RadioGroupProps {
    /**
     * Determines whether or not the RadioGroup will appear in dark mode.
     *
     * @default false
     */
    darkMode?: boolean;
    /**
     * className supplied to RadioGroup container.
     */
    className?: string;
    /**
     * Callback to be executed when a Radio is selected.
     */
    onChange?: React.ChangeEventHandler<HTMLInputElement>;
    /**
     * Content that will appear inside of RadioGroup component.
     */
    children: React.ReactNode;
    /**
     * Name passed to each Radio belonging to the RadioGroup.
     */
    name?: string;
    /**
     * Determines what radio will be checked on default. Component will be controlled if this prop is used.
     */
    value?: string | number | null;
    /**
     * Determines the size of the Radio components Can be 'small' or 'default.
     *
     * @default default
     */
    size?: Size;
}
/**
 * # RadioGroup
 *
 * RadioGroup component
 *
 * ```
<RadioGroup onChange={() => execute callback onChange}>
  <Radio value='Radio-1'>Radio 1</Radio>
  <Radio value='Radio-2'>Radio 2</Radio>
</RadioGroup>
```
 * @param props.children Content to appear inside of RadioGroup component.
 * @param props.onChange Callback to be executed when a Radio is selected.
 * @param props.value Radio that should appear checked. If value passed, component will be controlled by consumer.
 * @param props.className classname applied to RadioGroup container.
 * @param props.name Name passed to each Radio belonging to the RadioGroup.
 * @param props.darkMode Determines whether or not the RadioGroup will appear in dark mode.
 * @param props.size Determines the size of the Radio components Can be 'small' or 'default.
 */
declare function RadioGroup({ darkMode, size, className, onChange, children, value: controlledValue, name: nameProp, }: RadioGroupProps): JSX.Element;
declare namespace RadioGroup {
    var propTypes: {
        darkMode: PropTypes.Requireable<boolean>;
        size: PropTypes.Requireable<string>;
        className: PropTypes.Requireable<string>;
        value: PropTypes.Requireable<React.ReactText>;
        onChange: PropTypes.Requireable<(...args: any[]) => any>;
        children: PropTypes.Requireable<PropTypes.ReactNodeLike>;
        name: PropTypes.Requireable<string>;
    };
    var displayName: string;
}
export default RadioGroup;
//# sourceMappingURL=RadioGroup.d.ts.map