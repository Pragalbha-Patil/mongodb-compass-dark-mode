import React from 'react';
import PropTypes from 'prop-types';
import Size from './Size';
import { HTMLElementProps } from '@leafygreen-ui/lib';
interface RadioBoxGroupProps extends HTMLElementProps<'div', never> {
    /**
     * Content that will appear inside of RadioBoxGroup component.
     */
    children?: React.ReactNode;
    /**
     * Callback to be executed when a RadioBox is selected.
     */
    onChange?: React.ChangeEventHandler<HTMLInputElement>;
    /**
     * Name passed to each RadioBox belonging to the RadioGroup.
     */
    name?: string;
    /**
     * Determines what RadioBox will be checked on default. Component will be controlled if this prop is used.
     */
    value?: string | number;
    /**
     * Determines size of RadioBox components ['default', 'compact', 'full'].
     */
    size?: Size;
    /**
     * className supplied to RadioBoxGroup container.
     */
    className?: string;
}
/**
 * # RadioBoxGroup
 *
 * RadioBoxGroup component
 *
 * ```
<RadioBoxGroup onChange={() => execute callback onChange}>
  <RadioBox value='RadioBox-1'>RadioBox 1</RadioBox>
  <RadioBox value='RadioBox-2'>RadioBox 2</RadioBox>
</RadioBoxGroup>
```
 * @param props.children Content to appear inside of RadioBoxGroup component.
 * @param props.onChange Callback to be executed when a RadioBox is selected.
 * @param props.name Name passed to each RadioBox belonging to the RadioBoxGroup.
 * @param props.value RadioBox that should appear checked. If value passed, component will be controlled by consumer.
 * @param props.className classname applied to RadioBoxGroup container.
 * @param props.size Determines size of RadioBox components ['default', 'compact', 'full'].
 */
declare function RadioBoxGroup({ children, className, size, onChange, name, // = this.defaultName,
value: controlledValue, ...rest }: RadioBoxGroupProps): JSX.Element;
declare namespace RadioBoxGroup {
    var displayName: string;
    var propTypes: {
        children: PropTypes.Requireable<PropTypes.ReactNodeLike>;
        onChange: PropTypes.Requireable<(...args: any[]) => any>;
        name: PropTypes.Requireable<string>;
        value: PropTypes.Requireable<React.ReactText>;
        size: PropTypes.Requireable<string>;
        className: PropTypes.Requireable<string>;
    };
}
export default RadioBoxGroup;
//# sourceMappingURL=RadioBoxGroup.d.ts.map