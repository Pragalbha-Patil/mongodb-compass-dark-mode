{"version":3,"file":"index.js","sources":["../../src/Size.ts","../../src/context.ts","../../src/RadioBox.tsx","../../src/RadioBoxGroup.tsx"],"sourcesContent":["const Size = {\n  Default: 'default',\n  Compact: 'compact',\n  Full: 'full',\n} as const;\n\ntype Size = typeof Size[keyof typeof Size];\n\nexport default Size;\n","import { createContext, ChangeEventHandler, useContext } from 'react';\nimport Size from './Size';\n\nexport interface RadioBoxGroupContext {\n  value: string | number | undefined;\n  onChange: ChangeEventHandler<HTMLInputElement>;\n  size: Size | undefined;\n  name: string | undefined;\n}\n\nconst context = createContext<RadioBoxGroupContext | null>(null);\n\nexport const Provider = context.Provider;\n\nexport function useRadioBoxGroupContext() {\n  return useContext(context);\n}\n","import React, { useCallback, useMemo, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { HTMLElementProps, createDataProp } from '@leafygreen-ui/lib';\nimport { css, cx } from '@leafygreen-ui/emotion';\nimport { useIdAllocator } from '@leafygreen-ui/hooks';\nimport InteractionRing from '@leafygreen-ui/interaction-ring';\nimport { uiColors } from '@leafygreen-ui/palette';\nimport Size from './Size';\nimport { useRadioBoxGroupContext, RadioBoxGroupContext } from './context';\n\nconst radioBoxWrapper = createDataProp('radio-box-wrapper');\nconst radioBoxInput = createDataProp('radio-box-input');\n\nexport const radioBoxSizes: { [K in Size]: string } = {\n  [Size.Default]: css`\n    width: 169px;\n  `,\n\n  [Size.Compact]: css`\n    padding-right: 4px;\n    padding-left: 4px;\n  `,\n\n  [Size.Full]: css`\n    flex: 1;\n  `,\n};\n\nconst inputStyles = css`\n  opacity: 0;\n  position: absolute;\n  pointer-events: none;\n`;\n\ninterface StateForStyles {\n  checked: boolean;\n  disabled: boolean;\n  size: Size;\n}\n\nconst getInteractionRingStyles = (_: StateForStyles) => {\n  const baseStyles = css`\n    width: 100%;\n    height: 100%;\n    // Display behind border\n    z-index: -1;\n  `;\n\n  return baseStyles;\n};\n\nconst getBorderStyles = ({ checked, disabled, size }: StateForStyles) => {\n  const baseStyles = cx(\n    css`\n      border: 1px solid ${checked ? 'transparent' : uiColors.gray.base};\n      border-radius: 4px;\n      cursor: pointer;\n      position: relative;\n      pointer-events: none;\n      transition: border 100ms ease-in-out;\n    `,\n    {\n      [radioBoxSizes[size]]: size === Size.Full,\n    },\n  );\n\n  if (disabled) {\n    return cx(\n      baseStyles,\n      css`\n        border-color: ${uiColors.gray.light2};\n        cursor: not-allowed;\n      `,\n    );\n  }\n\n  return baseStyles;\n};\n\nconst getRadioDisplayStyles = ({ disabled }: StateForStyles) => {\n  const baseStyles = css`\n    transition: box-shadow 150ms ease-in-out;\n    padding: 15px;\n    font-size: 14px;\n    font-weight: bold;\n    text-align: center;\n    overflow-wrap: break-word;\n    background-color: white;\n    border-radius: 4px;\n    color: ${uiColors.gray.dark2};\n    pointer-events: auto;\n    z-index: 2;\n\n    display: flex;\n    align-items: center;\n    justify-content: center;\n  `;\n\n  if (disabled) {\n    return cx(\n      baseStyles,\n      css`\n        color: ${uiColors.gray.light1};\n        background: ${uiColors.gray.light3};\n      `,\n    );\n  }\n\n  return baseStyles;\n};\n\nexport const radioWrapper = css`\n  display: flex;\n  position: relative;\n\n  // Establishes the root element as a new stacking context\n  // so that the z-index of the span within the button doesn't\n  // appear above other elements on the page that it shouldn't.\n  z-index: 0;\n\n  &:not(:last-of-type) {\n    margin-right: 12px;\n  }\n`;\n\nexport interface RadioBoxProps {\n  onChange?: React.ChangeEventHandler<HTMLInputElement>;\n  checked?: boolean;\n  size?: Size;\n  name?: string;\n\n  /**\n   * className supplied to RadioBox container.\n   */\n  className?: string;\n\n  /**\n   * Used to determine what RadioBox is checked.\n   */\n  value: string | number;\n\n  /**\n   * Boolean that determines if the RadioBox is disabled.\n   */\n  disabled?: boolean;\n\n  /**\n   * Id for RadioBox and respective label.\n   */\n  id?: string;\n\n  /**\n   * Content that will appear inside of the RadioBox component's label.\n   */\n  children?: React.ReactNode;\n\n  /**\n   * If RadioBoxGroup is uncontrolled, the default property makes this RadioBox checked on the initial render.\n   */\n  default?: boolean;\n}\n\nfunction isChecked({\n  checkedProp,\n  defaultProp,\n  radioBoxGroupContext,\n  value,\n}: {\n  checkedProp?: boolean;\n  defaultProp: boolean;\n  radioBoxGroupContext: RadioBoxGroupContext | null;\n  value: string | number;\n}): boolean {\n  const contextValue = radioBoxGroupContext?.value;\n\n  if (contextValue == null) {\n    return checkedProp ?? defaultProp;\n  }\n\n  return contextValue === value;\n}\n\n/**\n * # RadioBox\n *\n * RadioBox component\n *\n * ```\n  <RadioBox value='radio-box-1'>RadioBox 1</RadioBox>\n```\n * @param props.className className supplied to RadioBox container.\n * @param props.value Used to determine what RadioBox is active.\n * @param props.disabled Boolean that determines if the RadioBox is disabled.\n * @param props.id Id for RadioBox and respective label.\n * @param props.children Content that will appear inside of RadioBox.\n * @param props.default If RadioBoxGroup is uncontrolled, the default property makes this RadioBox checked on the initial render.\n */\nexport default function RadioBox({\n  className = '',\n  onChange: onChangeProp,\n  value,\n  checked: checkedProp,\n  default: defaultProp = false,\n  disabled = false,\n  id: idProp,\n  size: sizeProp = Size.Default,\n  children,\n  name: nameProp,\n  ...rest\n}: RadioBoxProps & Omit<HTMLElementProps<'input', never>, 'size'>) {\n  const radioBoxGroupContext = useRadioBoxGroupContext();\n\n  const localId = useIdAllocator({\n    prefix: 'radio-box',\n  });\n\n  const id = useMemo(() => idProp ?? localId, [idProp, localId]);\n\n  const size = radioBoxGroupContext?.size ?? sizeProp;\n  const name = radioBoxGroupContext?.name ?? nameProp;\n  const checked = isChecked({\n    value,\n    checkedProp,\n    defaultProp,\n    radioBoxGroupContext,\n  });\n  const contextOnChange = radioBoxGroupContext?.onChange;\n  const onChange: React.ChangeEventHandler<HTMLInputElement> = useCallback(\n    e => {\n      onChangeProp?.(e);\n      contextOnChange?.(e);\n    },\n    [onChangeProp, contextOnChange],\n  );\n\n  const radioDisplayStyle = getRadioDisplayStyles({ checked, disabled, size });\n  const interactionContainerStyle = getInteractionRingStyles({\n    checked,\n    disabled,\n    size,\n  });\n\n  const [inputElement, setInputElement] = useState<HTMLElement | null>(null);\n\n  return (\n    <label\n      {...radioBoxWrapper.prop}\n      htmlFor={id}\n      className={cx(\n        radioWrapper,\n        {\n          [radioBoxSizes['full']]: size === 'full',\n        },\n        className,\n      )}\n    >\n      <input\n        {...rest}\n        {...radioBoxInput.prop}\n        ref={setInputElement}\n        type=\"radio\"\n        id={id}\n        name={name}\n        onChange={onChange}\n        value={value}\n        checked={checked}\n        aria-checked={checked}\n        disabled={disabled}\n        aria-disabled={disabled}\n        className={inputStyles}\n      />\n\n      <div\n        className={cx(\n          css`\n            height: 100%;\n          `,\n          getBorderStyles({ checked, disabled, size }),\n        )}\n      >\n        <InteractionRing\n          className={interactionContainerStyle}\n          disabled={disabled}\n          focusTargetElement={inputElement}\n          borderRadius=\"3px\"\n          color={{ hovered: checked ? uiColors.green.base : undefined }}\n          forceState={{\n            hovered: checked ? true : undefined,\n          }}\n        >\n          <div className={cx(radioDisplayStyle, radioBoxSizes[size])}>\n            {children}\n          </div>\n        </InteractionRing>\n      </div>\n    </label>\n  );\n}\n\nRadioBox.displayName = 'RadioBox';\n\nRadioBox.propTypes = {\n  value: PropTypes.oneOfType([PropTypes.string, PropTypes.number]).isRequired,\n  onChange: PropTypes.func,\n  checked: PropTypes.bool,\n  disabled: PropTypes.bool,\n  className: PropTypes.string,\n  id: PropTypes.string,\n  name: PropTypes.string,\n  children: PropTypes.node,\n  default: PropTypes.bool,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { css, cx } from '@leafygreen-ui/emotion';\nimport Size from './Size';\nimport { HTMLElementProps } from '@leafygreen-ui/lib';\nimport { useIdAllocator } from '@leafygreen-ui/hooks';\nimport { Provider } from './context';\n\nconst baseGroupStyle = css`\n  display: flex;\n`;\n\ninterface RadioBoxGroupProps extends HTMLElementProps<'div', never> {\n  /**\n   * Content that will appear inside of RadioBoxGroup component.\n   */\n  children?: React.ReactNode;\n\n  /**\n   * Callback to be executed when a RadioBox is selected.\n   */\n  onChange?: React.ChangeEventHandler<HTMLInputElement>;\n\n  /**\n   * Name passed to each RadioBox belonging to the RadioGroup.\n   */\n  name?: string;\n\n  /**\n   * Determines what RadioBox will be checked on default. Component will be controlled if this prop is used.\n   */\n  value?: string | number;\n\n  /**\n   * Determines size of RadioBox components ['default', 'compact', 'full'].\n   */\n  size?: Size;\n\n  /**\n   * className supplied to RadioBoxGroup container.\n   */\n  className?: string;\n}\n\n/**\n * # RadioBoxGroup\n *\n * RadioBoxGroup component\n *\n * ```\n<RadioBoxGroup onChange={() => execute callback onChange}>\n  <RadioBox value='RadioBox-1'>RadioBox 1</RadioBox>\n  <RadioBox value='RadioBox-2'>RadioBox 2</RadioBox>\n</RadioBoxGroup>\n```\n * @param props.children Content to appear inside of RadioBoxGroup component.\n * @param props.onChange Callback to be executed when a RadioBox is selected.\n * @param props.name Name passed to each RadioBox belonging to the RadioBoxGroup.\n * @param props.value RadioBox that should appear checked. If value passed, component will be controlled by consumer.\n * @param props.className classname applied to RadioBoxGroup container.\n * @param props.size Determines size of RadioBox components ['default', 'compact', 'full'].\n */\nfunction RadioBoxGroup({\n  children,\n  className,\n  size = Size.Default,\n  onChange = () => {},\n  name, // = this.defaultName,\n  value: controlledValue,\n  ...rest\n}: RadioBoxGroupProps) {\n  const [uncontrolledValue, setUncontrolledValue] = React.useState<\n    string | number | undefined\n  >();\n\n  const defaultName = useIdAllocator({\n    prefix: 'radio-box-group',\n    id: name,\n  });\n\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    if (onChange) {\n      // Stopped propagation to prevent event from bubbling with new target, and thus value coming back as undefined\n      e.stopPropagation();\n      onChange(e);\n    }\n\n    if (!controlledValue) {\n      setUncontrolledValue(e.target.value);\n    }\n  };\n\n  return (\n    <Provider\n      value={{\n        value: controlledValue ?? uncontrolledValue,\n        name: defaultName,\n        size,\n        onChange: handleChange,\n      }}\n    >\n      <div\n        {...rest}\n        className={cx(baseGroupStyle, className)}\n        role=\"group\"\n        aria-label={name}\n      >\n        {children}\n      </div>\n    </Provider>\n  );\n}\n\nRadioBoxGroup.displayName = 'RadioBoxGroup';\n\nRadioBoxGroup.propTypes = {\n  children: PropTypes.node,\n  onChange: PropTypes.func,\n  name: PropTypes.string,\n  value: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  size: PropTypes.oneOf(['compact', 'default', 'full']),\n  className: PropTypes.string,\n};\n\nexport default RadioBoxGroup;\n"],"names":["Size","Default","Compact","Full","context","createContext","Provider","_templateObject","_templateObject2","_templateObject3","_radioBoxSizes","_templateObject4","_templateObject5","_templateObject6","_templateObject7","_templateObject8","_templateObject9","_templateObject10","_templateObject11","_excluded","radioBoxWrapper","createDataProp","radioBoxInput","radioBoxSizes","_defineProperty","css","_taggedTemplateLiteral","inputStyles","getBorderStyles","_ref","checked","disabled","size","baseStyles","cx","uiColors","gray","base","light2","radioWrapper","RadioBox","_ref4","_radioBoxGroupContext","_radioBoxGroupContext2","_ref4$className","className","onChangeProp","onChange","value","checkedProp","_ref4$default","default","defaultProp","_ref4$disabled","idProp","id","_ref4$size","sizeProp","children","nameProp","name","rest","_objectWithoutProperties","radioBoxGroupContext","useContext","localId","useIdAllocator","prefix","useMemo","_ref3","contextValue","isChecked","contextOnChange","useCallback","e","radioDisplayStyle","_ref2","dark2","light1","light3","getRadioDisplayStyles","interactionContainerStyle","_useState2","_slicedToArray","useState","inputElement","setInputElement","___EmotionJSX","_extends","prop","htmlFor","ref","type","aria-checked","aria-disabled","InteractionRing","focusTargetElement","borderRadius","color","hovered","green","undefined","forceState","displayName","propTypes","PropTypes","oneOfType","string","number","isRequired","func","bool","node","baseGroupStyle","RadioBoxGroup","_ref$size","_ref$onChange","controlledValue","_React$useState2","React","uncontrolledValue","setUncontrolledValue","defaultName","stopPropagation","target","role","aria-label","oneOf"],"mappings":"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"}