import React from 'react';
import PropTypes from 'prop-types';
import { HTMLElementProps } from '@leafygreen-ui/lib';
import Size from './Size';
export declare const radioBoxSizes: {
    [K in Size]: string;
};
export declare const radioWrapper: string;
export interface RadioBoxProps {
    onChange?: React.ChangeEventHandler<HTMLInputElement>;
    checked?: boolean;
    size?: Size;
    name?: string;
    /**
     * className supplied to RadioBox container.
     */
    className?: string;
    /**
     * Used to determine what RadioBox is checked.
     */
    value: string | number;
    /**
     * Boolean that determines if the RadioBox is disabled.
     */
    disabled?: boolean;
    /**
     * Id for RadioBox and respective label.
     */
    id?: string;
    /**
     * Content that will appear inside of the RadioBox component's label.
     */
    children?: React.ReactNode;
    /**
     * If RadioBoxGroup is uncontrolled, the default property makes this RadioBox checked on the initial render.
     */
    default?: boolean;
}
/**
 * # RadioBox
 *
 * RadioBox component
 *
 * ```
  <RadioBox value='radio-box-1'>RadioBox 1</RadioBox>
```
 * @param props.className className supplied to RadioBox container.
 * @param props.value Used to determine what RadioBox is active.
 * @param props.disabled Boolean that determines if the RadioBox is disabled.
 * @param props.id Id for RadioBox and respective label.
 * @param props.children Content that will appear inside of RadioBox.
 * @param props.default If RadioBoxGroup is uncontrolled, the default property makes this RadioBox checked on the initial render.
 */
declare function RadioBox({ className, onChange: onChangeProp, value, checked: checkedProp, default: defaultProp, disabled, id: idProp, size: sizeProp, children, name: nameProp, ...rest }: RadioBoxProps & Omit<HTMLElementProps<'input', never>, 'size'>): JSX.Element;
declare namespace RadioBox {
    var displayName: string;
    var propTypes: {
        value: PropTypes.Validator<React.ReactText>;
        onChange: PropTypes.Requireable<(...args: any[]) => any>;
        checked: PropTypes.Requireable<boolean>;
        disabled: PropTypes.Requireable<boolean>;
        className: PropTypes.Requireable<string>;
        id: PropTypes.Requireable<string>;
        name: PropTypes.Requireable<string>;
        children: PropTypes.Requireable<PropTypes.ReactNodeLike>;
        default: PropTypes.Requireable<boolean>;
    };
}
export default RadioBox;
//# sourceMappingURL=RadioBox.d.ts.map