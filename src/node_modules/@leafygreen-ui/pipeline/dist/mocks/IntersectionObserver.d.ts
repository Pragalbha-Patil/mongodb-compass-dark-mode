import { IntersectionOptions } from 'react-intersection-observer';
declare const observerMap: Map<any, any>;
declare const instanceMap: Map<any, any>;
declare function IntersectionObserver(cb: IntersectionObserverCallback, options: IntersectionOptions): {
    thresholds: (number | undefined)[];
    root: Element | null | undefined;
    rootMargin: string | undefined;
    observe: (element: Element) => void;
    unobserve: (element: Element) => void;
    disconnect: () => null;
};
/**
 * Set the `isIntersecting` on all current IntersectionObserver instances
 * @param isIntersecting {boolean}
 */
declare function mockAllIsIntersecting(isIntersecting: boolean): void;
/**
 * Set the `isIntersecting` for the IntersectionObserver of a specific element.
 * @param element {Element}
 * @param isIntersecting {boolean}
 */
declare function mockIsIntersecting(element: Element, isIntersecting: boolean): void;
/**
 * Call the `intersectionMockInstance` method with an element, to get the (mocked)
 * `IntersectionObserver` instance. You can use this to spy on the `observe` and
 * `unobserve` methods.
 * @param element {Element}
 * @return IntersectionObserver
 */
declare function intersectionMockInstance(element: Element): IntersectionObserver;
export { IntersectionObserver, mockAllIsIntersecting, mockIsIntersecting, intersectionMockInstance, observerMap, instanceMap, };
//# sourceMappingURL=IntersectionObserver.d.ts.map