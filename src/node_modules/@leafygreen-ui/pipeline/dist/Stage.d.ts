import React, { ReactNode } from 'react';
import { Size } from './styles';
export interface StageProps {
    /**
     * Content that will appear inside of the Stage component.
     **/
    children: ReactNode;
    /**
     * Classname applied to Stage content container.
     **/
    className?: string;
    /**
     * The DOM node to use as the root node for the intersectionObserver. Defaults to window when null or undefined.
     **/
    intersectionNode?: HTMLElement | null;
    /**
     * Alter the rendered size of the component. Inherited from the parent Pipeline component.
     */
    size?: Size;
    /**
     * Either a single number or an array of numbers which indicate at what percentage of the target's visibility
     * the observer's callback should be executed.
     */
    threshold?: number | Array<number>;
}
/**
 * # Stage
 *
 * React Component to render an individual MongoDB Aggregation stage.
 * To be used in conjunction with Pipeline component as a child.
 *
 * ```
 * <Pipeline>
 *   <Stage>$match</Stage>
 *   <Stage>$addFields</Stage>
 *   <Stage>$limit</Stage>
 * </Pipeline>
 * ```
 * @param props.children Content that will appear inside of the Stage component.
 * @param props.className Classname applied to Stage content container.
 * @param props.intersectionNode The DOM node to use as the root node for the intersectionObserver. Defaults to window when null or undefined.
 * @param props.size Alters the rendered size of the component.
 * @param props.threshold Either a single number or an array of numbers which indicate at what percentage of the target's visibility the observer's callback should be executed.
 * @param props.variant Alters the visual appearance of the component.
 */
declare const Stage: React.ForwardRefExoticComponent<StageProps & React.RefAttributes<HTMLLIElement>>;
export default Stage;
//# sourceMappingURL=Stage.d.ts.map