export declare function serialize(data: unknown): string;
export declare function deserialize<T = unknown>(str: string): T | string;
declare type RPCMessageBus = {
    on: Function;
    off: Function;
} & ({
    postMessage: Function;
    send?: never;
} | {
    postMessage?: never;
    send?: Function;
});
export declare function removeTrailingUndefined(arr: unknown[]): unknown[];
export declare const close: unique symbol;
export declare const cancel: unique symbol;
export declare type Exposed<T> = {
    [k in keyof T]: T[k] & {
        close(): void;
    };
} & {
    [close]: () => void;
};
export declare function exposeAll<O>(obj: O, messageBus: RPCMessageBus): Exposed<O>;
export declare type Caller<Impl, Keys extends keyof Impl = keyof Impl> = CancelableMethods<Pick<Impl, Keys>> & {
    [cancel]: () => void;
};
export declare function createCaller<Impl extends {}>(methodNames: Extract<keyof Impl, string>[], messageBus: RPCMessageBus): Caller<Impl, typeof methodNames[number]>;
export {};
